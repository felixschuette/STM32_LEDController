
bluepill_blinky_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08007cdc  08007cdc  00017cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f94  08007f94  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  08007f94  08007f94  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f94  08007f94  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f94  08007f94  00017f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f98  08007f98  00017f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08007f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  200001c8  08008164  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c28  08008164  00020c28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0c1  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d60  00000000  00000000  0003b2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  0003f018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  000403a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001916e  00000000  00000000  00041550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012541  00000000  00000000  0005a6be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077a47  00000000  00000000  0006cbff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4646  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000579c  00000000  00000000  000e46c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001c8 	.word	0x200001c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08007cc4 	.word	0x08007cc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001cc 	.word	0x200001cc
 8000148:	08007cc4 	.word	0x08007cc4

0800014c <rtc_get_time_usec>:
 *  Created on: Mar 25, 2020
 *      Author: felix
 */
#include "debug_log.h"

uint32_t rtc_get_time_usec(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint32_t tick = HAL_GetTick();
 8000152:	f001 f929 	bl	80013a8 <HAL_GetTick>
 8000156:	6078      	str	r0, [r7, #4]
	return tick;
 8000158:	687b      	ldr	r3, [r7, #4]
}
 800015a:	4618      	mov	r0, r3
 800015c:	3708      	adds	r7, #8
 800015e:	46bd      	mov	sp, r7
 8000160:	bd80      	pop	{r7, pc}
	...

08000164 <debug_log>:

void debug_log(char *msg, ...)
{
 8000164:	b40f      	push	{r0, r1, r2, r3}
 8000166:	b580      	push	{r7, lr}
 8000168:	b082      	sub	sp, #8
 800016a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, msg);
 800016c:	f107 0314 	add.w	r3, r7, #20
 8000170:	603b      	str	r3, [r7, #0]

    int time = rtc_get_time_usec();
 8000172:	f7ff ffeb 	bl	800014c <rtc_get_time_usec>
 8000176:	4603      	mov	r3, r0
 8000178:	607b      	str	r3, [r7, #4]
    printf("%d.%03d: ", time / 1000, time % 1000);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	4a11      	ldr	r2, [pc, #68]	; (80001c4 <debug_log+0x60>)
 800017e:	fb82 1203 	smull	r1, r2, r2, r3
 8000182:	1192      	asrs	r2, r2, #6
 8000184:	17db      	asrs	r3, r3, #31
 8000186:	1ad0      	subs	r0, r2, r3
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4a0e      	ldr	r2, [pc, #56]	; (80001c4 <debug_log+0x60>)
 800018c:	fb82 1203 	smull	r1, r2, r2, r3
 8000190:	1191      	asrs	r1, r2, #6
 8000192:	17da      	asrs	r2, r3, #31
 8000194:	1a8a      	subs	r2, r1, r2
 8000196:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800019a:	fb01 f202 	mul.w	r2, r1, r2
 800019e:	1a9a      	subs	r2, r3, r2
 80001a0:	4601      	mov	r1, r0
 80001a2:	4809      	ldr	r0, [pc, #36]	; (80001c8 <debug_log+0x64>)
 80001a4:	f006 fee6 	bl	8006f74 <iprintf>
    vprintf(msg, args);
 80001a8:	6839      	ldr	r1, [r7, #0]
 80001aa:	6938      	ldr	r0, [r7, #16]
 80001ac:	f006 ff1e 	bl	8006fec <viprintf>
    printf("\n");
 80001b0:	200a      	movs	r0, #10
 80001b2:	f006 fef7 	bl	8006fa4 <putchar>
}
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr
 80001c4:	10624dd3 	.word	0x10624dd3
 80001c8:	08007cdc 	.word	0x08007cdc

080001cc <initializeLEDApplication>:
#include "led_test.h"

uint32_t notif;

void initializeLEDApplication(TIM_HandleTypeDef *htim1,
		TIM_HandleTypeDef *htim2) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	6039      	str	r1, [r7, #0]
	/* Initializing the LED stripe stuctures */
	Bus1_LEDStripe.timer = htim1;
 80001d6:	4a19      	ldr	r2, [pc, #100]	; (800023c <initializeLEDApplication+0x70>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	6013      	str	r3, [r2, #0]
	Bus1_LEDStripe.is_animating = false;
 80001dc:	4b17      	ldr	r3, [pc, #92]	; (800023c <initializeLEDApplication+0x70>)
 80001de:	2200      	movs	r2, #0
 80001e0:	731a      	strb	r2, [r3, #12]
	Bus1_LEDStripe.spi_bus = bus_1;
 80001e2:	4b16      	ldr	r3, [pc, #88]	; (800023c <initializeLEDApplication+0x70>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	711a      	strb	r2, [r3, #4]
	Bus1_LEDStripe.queue = malloc(sizeof(led_pattern_queue_t));
 80001e8:	2008      	movs	r0, #8
 80001ea:	f006 fdf9 	bl	8006de0 <malloc>
 80001ee:	4603      	mov	r3, r0
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b12      	ldr	r3, [pc, #72]	; (800023c <initializeLEDApplication+0x70>)
 80001f4:	609a      	str	r2, [r3, #8]
	Bus1_LEDStripe.queue->head = NULL;
 80001f6:	4b11      	ldr	r3, [pc, #68]	; (800023c <initializeLEDApplication+0x70>)
 80001f8:	689b      	ldr	r3, [r3, #8]
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
	Bus1_LEDStripe.is_timer_active = false;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	; (800023c <initializeLEDApplication+0x70>)
 8000200:	2200      	movs	r2, #0
 8000202:	735a      	strb	r2, [r3, #13]

	Bus2_LEDStripe.timer = htim2;
 8000204:	4a0e      	ldr	r2, [pc, #56]	; (8000240 <initializeLEDApplication+0x74>)
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	6013      	str	r3, [r2, #0]
	Bus2_LEDStripe.is_animating = false;
 800020a:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <initializeLEDApplication+0x74>)
 800020c:	2200      	movs	r2, #0
 800020e:	731a      	strb	r2, [r3, #12]
	Bus2_LEDStripe.spi_bus = bus_2;
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <initializeLEDApplication+0x74>)
 8000212:	2201      	movs	r2, #1
 8000214:	711a      	strb	r2, [r3, #4]
	Bus2_LEDStripe.queue = malloc(sizeof(led_pattern_queue_t));
 8000216:	2008      	movs	r0, #8
 8000218:	f006 fde2 	bl	8006de0 <malloc>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <initializeLEDApplication+0x74>)
 8000222:	609a      	str	r2, [r3, #8]
	Bus2_LEDStripe.queue->head = NULL;
 8000224:	4b06      	ldr	r3, [pc, #24]	; (8000240 <initializeLEDApplication+0x74>)
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
	Bus2_LEDStripe.is_timer_active = false;
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <initializeLEDApplication+0x74>)
 800022e:	2200      	movs	r2, #0
 8000230:	735a      	strb	r2, [r3, #13]
}
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000318 	.word	0x20000318
 8000240:	200002fc 	.word	0x200002fc

08000244 <popQueueElement>:

static uint8_t popQueueElement(led_pattern_queue_t *queue,
		led_pattern_t *pattern) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
	led_stripe_queue_element_t *old_head = NULL;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]

	if (queue->head == NULL) {
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d101      	bne.n	800025e <popQueueElement+0x1a>
		return EXIT_FAILURE;
 800025a:	2301      	movs	r3, #1
 800025c:	e01b      	b.n	8000296 <popQueueElement+0x52>
	}

	memcpy(pattern, &(queue->head)->led_pattern, sizeof(led_pattern_t));
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	220c      	movs	r2, #12
 8000264:	4619      	mov	r1, r3
 8000266:	6838      	ldr	r0, [r7, #0]
 8000268:	f006 fdca 	bl	8006e00 <memcpy>
	old_head = (led_stripe_queue_element_t*) queue->head;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	60fb      	str	r3, [r7, #12]

	if (queue->head->next != NULL) {
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d005      	beq.n	8000288 <popQueueElement+0x44>
		queue->head = (led_stripe_queue_element_t*) queue->head->next;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	68da      	ldr	r2, [r3, #12]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	e002      	b.n	800028e <popQueueElement+0x4a>
	} else {
		queue->head = NULL;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
	}

	free(old_head);
 800028e:	68f8      	ldr	r0, [r7, #12]
 8000290:	f006 fdae 	bl	8006df0 <free>

	return EXIT_SUCCESS;
 8000294:	2300      	movs	r3, #0
}
 8000296:	4618      	mov	r0, r3
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <pushQueueElement>:

static uint8_t pushQueueElement(led_pattern_queue_t *queue,
		led_pattern_t *pattern) {
 800029e:	b580      	push	{r7, lr}
 80002a0:	b084      	sub	sp, #16
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
 80002a6:	6039      	str	r1, [r7, #0]
	led_stripe_queue_element_t *cursor = queue->head;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	60fb      	str	r3, [r7, #12]
	led_stripe_queue_element_t *new_element = NULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]

	if (queue->head == NULL) {
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d115      	bne.n	80002e6 <pushQueueElement+0x48>
		new_element = (led_stripe_queue_element_t*) malloc(
 80002ba:	2010      	movs	r0, #16
 80002bc:	f006 fd90 	bl	8006de0 <malloc>
 80002c0:	4603      	mov	r3, r0
 80002c2:	60bb      	str	r3, [r7, #8]
				sizeof(led_stripe_queue_element_t));
		new_element->next = NULL;
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
		memcpy(&new_element->led_pattern, pattern, sizeof(led_pattern_t));
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	220c      	movs	r2, #12
 80002ce:	6839      	ldr	r1, [r7, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f006 fd95 	bl	8006e00 <memcpy>
		queue->head = new_element;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	601a      	str	r2, [r3, #0]
		return EXIT_SUCCESS;
 80002dc:	2300      	movs	r3, #0
 80002de:	e01e      	b.n	800031e <pushQueueElement+0x80>
	}

	while (cursor->next != NULL) {
		cursor = (led_stripe_queue_element_t*) cursor->next;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	60fb      	str	r3, [r7, #12]
	while (cursor->next != NULL) {
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d1f8      	bne.n	80002e0 <pushQueueElement+0x42>
	}

	if (cursor->next == NULL) {
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d112      	bne.n	800031c <pushQueueElement+0x7e>
		new_element = (led_stripe_queue_element_t*) malloc(
 80002f6:	2010      	movs	r0, #16
 80002f8:	f006 fd72 	bl	8006de0 <malloc>
 80002fc:	4603      	mov	r3, r0
 80002fe:	60bb      	str	r3, [r7, #8]
				sizeof(led_stripe_queue_element_t));
		new_element->next = NULL;
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
		memcpy(&new_element->led_pattern, pattern, sizeof(led_pattern_t));
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	220c      	movs	r2, #12
 800030a:	6839      	ldr	r1, [r7, #0]
 800030c:	4618      	mov	r0, r3
 800030e:	f006 fd77 	bl	8006e00 <memcpy>
		cursor->next = (struct led_stripe_queue_element_t*) new_element;
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	68ba      	ldr	r2, [r7, #8]
 8000316:	60da      	str	r2, [r3, #12]
		return EXIT_SUCCESS;
 8000318:	2300      	movs	r3, #0
 800031a:	e000      	b.n	800031e <pushQueueElement+0x80>
	}

	return EXIT_FAILURE;
 800031c:	2301      	movs	r3, #1
}
 800031e:	4618      	mov	r0, r3
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <startTimer>:

static void startTimer(TIM_HandleTypeDef *timer, uint32_t duration_ms) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]

	if (timer->Instance == LED_BUS1_TIMER) {
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800033a:	d107      	bne.n	800034c <startTimer+0x24>
		debug_log("starting timer for LED_BUS1 with duration: %d", duration_ms);
 800033c:	6839      	ldr	r1, [r7, #0]
 800033e:	4813      	ldr	r0, [pc, #76]	; (800038c <startTimer+0x64>)
 8000340:	f7ff ff10 	bl	8000164 <debug_log>
		Bus1_LEDStripe.is_timer_active = true;
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <startTimer+0x68>)
 8000346:	2201      	movs	r2, #1
 8000348:	735a      	strb	r2, [r3, #13]
 800034a:	e00b      	b.n	8000364 <startTimer+0x3c>
	} else if (timer->Instance == LED_BUS2_TIMER) {
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <startTimer+0x6c>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <startTimer+0x3c>
		debug_log("starting timer for LED_BUS2 with duration: %d", duration_ms);
 8000356:	6839      	ldr	r1, [r7, #0]
 8000358:	480f      	ldr	r0, [pc, #60]	; (8000398 <startTimer+0x70>)
 800035a:	f7ff ff03 	bl	8000164 <debug_log>
		Bus2_LEDStripe.is_timer_active = true;
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <startTimer+0x74>)
 8000360:	2201      	movs	r2, #1
 8000362:	735a      	strb	r2, [r3, #13]
	}

	__HAL_TIM_CLEAR_IT(timer, TIM_IT_UPDATE);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f06f 0201 	mvn.w	r2, #1
 800036c:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_AUTORELOAD(timer, duration_ms);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	683a      	ldr	r2, [r7, #0]
 8000374:	62da      	str	r2, [r3, #44]	; 0x2c
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	683a      	ldr	r2, [r7, #0]
 800037a:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(timer);
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f003 faa4 	bl	80038ca <HAL_TIM_Base_Start_IT>
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	08007ce8 	.word	0x08007ce8
 8000390:	20000318 	.word	0x20000318
 8000394:	40000400 	.word	0x40000400
 8000398:	08007d18 	.word	0x08007d18
 800039c:	200002fc 	.word	0x200002fc

080003a0 <pushAnimationPatternInQueue>:

static uint8_t pushAnimationPatternInQueue(led_stripe_t *stripe) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]

	if (stripe->is_animating == false) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	7b1b      	ldrb	r3, [r3, #12]
 80003ac:	f083 0301 	eor.w	r3, r3, #1
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <pushAnimationPatternInQueue+0x1a>
		return EXIT_FAILURE;
 80003b6:	2301      	movs	r3, #1
 80003b8:	e061      	b.n	800047e <pushAnimationPatternInQueue+0xde>
	}

	led_pattern_t tmp_pattern = { };
 80003ba:	f107 030c 	add.w	r3, r7, #12
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
	tmp_pattern.led_num = stripe->animation_pattern.led_num;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	8a9b      	ldrh	r3, [r3, #20]
 80003ca:	823b      	strh	r3, [r7, #16]
	tmp_pattern.direction = stripe->animation_pattern.direction;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	7d9b      	ldrb	r3, [r3, #22]
 80003d0:	74bb      	strb	r3, [r7, #18]
	tmp_pattern.duration_ms = stripe->animation_pattern.duration_ms;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	8b1b      	ldrh	r3, [r3, #24]
 80003d6:	82bb      	strh	r3, [r7, #20]
	tmp_pattern.led_colors = malloc(
			stripe->animation_pattern.led_num * sizeof(led_rgb_color_t));
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	8a9b      	ldrh	r3, [r3, #20]
	tmp_pattern.led_colors = malloc(
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	4618      	mov	r0, r3
 80003e0:	f006 fcfe 	bl	8006de0 <malloc>
 80003e4:	4603      	mov	r3, r0
 80003e6:	60fb      	str	r3, [r7, #12]
	memcpy(tmp_pattern.led_colors, stripe->animation_pattern.led_colors,
 80003e8:	68f8      	ldr	r0, [r7, #12]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6919      	ldr	r1, [r3, #16]
			stripe->animation_pattern.led_num * sizeof(led_rgb_color_t));
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	8a9b      	ldrh	r3, [r3, #20]
	memcpy(tmp_pattern.led_colors, stripe->animation_pattern.led_colors,
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	461a      	mov	r2, r3
 80003f6:	f006 fd03 	bl	8006e00 <memcpy>
	pushQueueElement(stripe->queue, &tmp_pattern);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	f107 020c 	add.w	r2, r7, #12
 8000402:	4611      	mov	r1, r2
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff4a 	bl	800029e <pushQueueElement>

	/* shift animation pattern for next time */
	switch (stripe->animation_pattern.direction) {
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	7d9b      	ldrb	r3, [r3, #22]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d002      	beq.n	8000418 <pushAnimationPatternInQueue+0x78>
 8000412:	2b01      	cmp	r3, #1
 8000414:	d019      	beq.n	800044a <pushAnimationPatternInQueue+0xaa>
 8000416:	e031      	b.n	800047c <pushAnimationPatternInQueue+0xdc>
	case animation_upwards:
		debug_log("shifting animation upwards");
 8000418:	481b      	ldr	r0, [pc, #108]	; (8000488 <pushAnimationPatternInQueue+0xe8>)
 800041a:	f7ff fea3 	bl	8000164 <debug_log>
		memcpy(&stripe->animation_pattern.led_colors[1], tmp_pattern.led_colors,
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	691b      	ldr	r3, [r3, #16]
 8000422:	3304      	adds	r3, #4
 8000424:	68f9      	ldr	r1, [r7, #12]
				(tmp_pattern.led_num - 1) * sizeof(led_rgb_color_t));
 8000426:	8a3a      	ldrh	r2, [r7, #16]
 8000428:	3a01      	subs	r2, #1
		memcpy(&stripe->animation_pattern.led_colors[1], tmp_pattern.led_colors,
 800042a:	0092      	lsls	r2, r2, #2
 800042c:	4618      	mov	r0, r3
 800042e:	f006 fce7 	bl	8006e00 <memcpy>
		memcpy(stripe->animation_pattern.led_colors,
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	691a      	ldr	r2, [r3, #16]
				tmp_pattern.led_colors + tmp_pattern.led_num - 1,
 8000436:	68f9      	ldr	r1, [r7, #12]
 8000438:	8a3b      	ldrh	r3, [r7, #16]
		memcpy(stripe->animation_pattern.led_colors,
 800043a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800043e:	3b01      	subs	r3, #1
 8000440:	009b      	lsls	r3, r3, #2
				tmp_pattern.led_colors + tmp_pattern.led_num - 1,
 8000442:	440b      	add	r3, r1
		memcpy(stripe->animation_pattern.led_colors,
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	6013      	str	r3, [r2, #0]
				sizeof(led_rgb_color_t));
		break;
 8000448:	e018      	b.n	800047c <pushAnimationPatternInQueue+0xdc>
	case animation_downwards:
		debug_log("shifting animation downwards");
 800044a:	4810      	ldr	r0, [pc, #64]	; (800048c <pushAnimationPatternInQueue+0xec>)
 800044c:	f7ff fe8a 	bl	8000164 <debug_log>
		memcpy(stripe->animation_pattern.led_colors, &tmp_pattern.led_colors[1],
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	6918      	ldr	r0, [r3, #16]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	3304      	adds	r3, #4
				(tmp_pattern.led_num - 1) * sizeof(led_rgb_color_t));
 8000458:	8a3a      	ldrh	r2, [r7, #16]
 800045a:	3a01      	subs	r2, #1
		memcpy(stripe->animation_pattern.led_colors, &tmp_pattern.led_colors[1],
 800045c:	0092      	lsls	r2, r2, #2
 800045e:	4619      	mov	r1, r3
 8000460:	f006 fcce 	bl	8006e00 <memcpy>
		memcpy(stripe->animation_pattern.led_colors + tmp_pattern.led_num - 1,
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	691a      	ldr	r2, [r3, #16]
 8000468:	8a3b      	ldrh	r3, [r7, #16]
 800046a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800046e:	3b01      	subs	r3, #1
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4413      	add	r3, r2
				tmp_pattern.led_colors, sizeof(led_rgb_color_t));
 8000474:	68fa      	ldr	r2, [r7, #12]
		memcpy(stripe->animation_pattern.led_colors + tmp_pattern.led_num - 1,
 8000476:	6812      	ldr	r2, [r2, #0]
 8000478:	601a      	str	r2, [r3, #0]
		break;
 800047a:	bf00      	nop
	}

	return EXIT_SUCCESS;
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	08007d48 	.word	0x08007d48
 800048c:	08007d64 	.word	0x08007d64

08000490 <showNextPattern>:

static uint8_t showNextPattern(led_stripe_t *stripe) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	led_pattern_t nextPattern = { };
 8000498:	f107 0308 	add.w	r3, r7, #8
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
	uint8_t chk = EXIT_SUCCESS;
 80004a4:	2300      	movs	r3, #0
 80004a6:	75fb      	strb	r3, [r7, #23]

	pushAnimationPatternInQueue(stripe);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff ff79 	bl	80003a0 <pushAnimationPatternInQueue>

	chk = popQueueElement(stripe->queue, &nextPattern);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	f107 0208 	add.w	r2, r7, #8
 80004b6:	4611      	mov	r1, r2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff fec3 	bl	8000244 <popQueueElement>
 80004be:	4603      	mov	r3, r0
 80004c0:	75fb      	strb	r3, [r7, #23]
	if (chk == EXIT_FAILURE) {
 80004c2:	7dfb      	ldrb	r3, [r7, #23]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d104      	bne.n	80004d2 <showNextPattern+0x42>
		debug_log("queue is empty, nothing to display ...");
 80004c8:	4812      	ldr	r0, [pc, #72]	; (8000514 <showNextPattern+0x84>)
 80004ca:	f7ff fe4b 	bl	8000164 <debug_log>
		return EXIT_FAILURE;
 80004ce:	2301      	movs	r3, #1
 80004d0:	e01c      	b.n	800050c <showNextPattern+0x7c>
	}

	if (nextPattern.duration_ms > 0) {
 80004d2:	8a3b      	ldrh	r3, [r7, #16]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d006      	beq.n	80004e6 <showNextPattern+0x56>
		startTimer(stripe->timer, nextPattern.duration_ms);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	8a3a      	ldrh	r2, [r7, #16]
 80004de:	4611      	mov	r1, r2
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ff21 	bl	8000328 <startTimer>
	}

	debug_log("showing next pattern with duration %d and #%d leds n ow.",
			nextPattern.duration_ms, nextPattern.led_num);
 80004e6:	8a3b      	ldrh	r3, [r7, #16]
	debug_log("showing next pattern with duration %d and #%d leds n ow.",
 80004e8:	4619      	mov	r1, r3
			nextPattern.duration_ms, nextPattern.led_num);
 80004ea:	89bb      	ldrh	r3, [r7, #12]
	debug_log("showing next pattern with duration %d and #%d leds n ow.",
 80004ec:	461a      	mov	r2, r3
 80004ee:	480a      	ldr	r0, [pc, #40]	; (8000518 <showNextPattern+0x88>)
 80004f0:	f7ff fe38 	bl	8000164 <debug_log>
	showLEDs(nextPattern.led_colors, nextPattern.led_num, stripe->spi_bus);
 80004f4:	68b8      	ldr	r0, [r7, #8]
 80004f6:	89b9      	ldrh	r1, [r7, #12]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	791b      	ldrb	r3, [r3, #4]
 80004fc:	461a      	mov	r2, r3
 80004fe:	f000 fc26 	bl	8000d4e <showLEDs>
	free(nextPattern.led_colors);
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	4618      	mov	r0, r3
 8000506:	f006 fc73 	bl	8006df0 <free>
	return chk;
 800050a:	7dfb      	ldrb	r3, [r7, #23]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	08007d84 	.word	0x08007d84
 8000518:	08007dac 	.word	0x08007dac

0800051c <startAnimating>:

void startAnimating(led_stripe_t *stripe, led_pattern_t *pattern) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	debug_log("Starting animation ...");
 8000526:	480a      	ldr	r0, [pc, #40]	; (8000550 <startAnimating+0x34>)
 8000528:	f7ff fe1c 	bl	8000164 <debug_log>
	memcpy(&stripe->animation_pattern, pattern, sizeof(led_pattern_t));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3310      	adds	r3, #16
 8000530:	220c      	movs	r2, #12
 8000532:	6839      	ldr	r1, [r7, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f006 fc63 	bl	8006e00 <memcpy>
	stripe->is_animating = true;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2201      	movs	r2, #1
 800053e:	731a      	strb	r2, [r3, #12]
	showNextPattern(stripe);
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff ffa5 	bl	8000490 <showNextPattern>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	08007de8 	.word	0x08007de8

08000554 <HAL_TIM_PeriodElapsedCallback>:
void stopAnimating(led_stripe_t *stripe) {
	free(stripe->animation_pattern.led_colors);
	stripe->is_animating = false;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == LED_BUS1_TIMER) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000564:	d10c      	bne.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x2c>
		debug_log("LED_BUS1_TIMER");
 8000566:	4812      	ldr	r0, [pc, #72]	; (80005b0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000568:	f7ff fdfc 	bl	8000164 <debug_log>
		Bus1_LEDStripe.is_timer_active = false;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800056e:	2200      	movs	r2, #0
 8000570:	735a      	strb	r2, [r3, #13]
		notif |= LED_BUS1_NOTIF;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	e010      	b.n	80005a2 <HAL_TIM_PeriodElapsedCallback+0x4e>
	} else if (htim->Instance == LED_BUS2_TIMER) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d10b      	bne.n	80005a2 <HAL_TIM_PeriodElapsedCallback+0x4e>
		debug_log("LED_BUS2_TIMER");
 800058a:	480d      	ldr	r0, [pc, #52]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800058c:	f7ff fdea 	bl	8000164 <debug_log>
		Bus2_LEDStripe.is_timer_active = false;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000592:	2200      	movs	r2, #0
 8000594:	735a      	strb	r2, [r3, #13]
		notif |= LED_BUS2_NOTIF;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f043 0302 	orr.w	r3, r3, #2
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80005a0:	6013      	str	r3, [r2, #0]
	}
	HAL_TIM_Base_Stop(htim);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f003 f967 	bl	8003876 <HAL_TIM_Base_Stop>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	08007e00 	.word	0x08007e00
 80005b4:	20000318 	.word	0x20000318
 80005b8:	20000334 	.word	0x20000334
 80005bc:	40000400 	.word	0x40000400
 80005c0:	08007e10 	.word	0x08007e10
 80005c4:	200002fc 	.word	0x200002fc

080005c8 <unsetNotification>:

static void unsetNotification(uint32_t notification) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	notif &= (uint32_t) (~notification);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	43da      	mvns	r2, r3
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <unsetNotification+0x20>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4013      	ands	r3, r2
 80005da:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <unsetNotification+0x20>)
 80005dc:	6013      	str	r3, [r2, #0]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20000334 	.word	0x20000334

080005ec <runLEDScheduler>:

void runLEDScheduler() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	while (1) {
		if (notif & LED_BUS1_NOTIF) {
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <runLEDScheduler+0x44>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d008      	beq.n	800060e <runLEDScheduler+0x22>
			debug_log("LED_BUS1_NOTIF");
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <runLEDScheduler+0x48>)
 80005fe:	f7ff fdb1 	bl	8000164 <debug_log>
			showNextPattern(&Bus1_LEDStripe);
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <runLEDScheduler+0x4c>)
 8000604:	f7ff ff44 	bl	8000490 <showNextPattern>
			unsetNotification(LED_BUS1_NOTIF);
 8000608:	2001      	movs	r0, #1
 800060a:	f7ff ffdd 	bl	80005c8 <unsetNotification>
		}
		if (notif & LED_BUS2_NOTIF) {
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <runLEDScheduler+0x44>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0ea      	beq.n	80005f0 <runLEDScheduler+0x4>
			debug_log("LED_BUS2_NOTIF");
 800061a:	4808      	ldr	r0, [pc, #32]	; (800063c <runLEDScheduler+0x50>)
 800061c:	f7ff fda2 	bl	8000164 <debug_log>
			showNextPattern(&Bus2_LEDStripe);
 8000620:	4807      	ldr	r0, [pc, #28]	; (8000640 <runLEDScheduler+0x54>)
 8000622:	f7ff ff35 	bl	8000490 <showNextPattern>
			unsetNotification(LED_BUS2_NOTIF);
 8000626:	2002      	movs	r0, #2
 8000628:	f7ff ffce 	bl	80005c8 <unsetNotification>
		if (notif & LED_BUS1_NOTIF) {
 800062c:	e7e0      	b.n	80005f0 <runLEDScheduler+0x4>
 800062e:	bf00      	nop
 8000630:	20000334 	.word	0x20000334
 8000634:	08007e20 	.word	0x08007e20
 8000638:	20000318 	.word	0x20000318
 800063c:	08007e30 	.word	0x08007e30
 8000640:	200002fc 	.word	0x200002fc

08000644 <testRoutine>:
 *  Created on: Mar 26, 2020
 *      Author: felix
 */
#include "led_test.h"

void testRoutine(led_stripe_t *stripe) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	debug_log("starting test routine ...");
 800064c:	482f      	ldr	r0, [pc, #188]	; (800070c <testRoutine+0xc8>)
 800064e:	f7ff fd89 	bl	8000164 <debug_log>
	uint16_t led_num = 300;
 8000652:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000656:	837b      	strh	r3, [r7, #26]

	led_rgb_color_t *led = malloc(sizeof(led_rgb_color_t) * led_num);
 8000658:	8b7b      	ldrh	r3, [r7, #26]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4618      	mov	r0, r3
 800065e:	f006 fbbf 	bl	8006de0 <malloc>
 8000662:	4603      	mov	r3, r0
 8000664:	617b      	str	r3, [r7, #20]

	led[0].red = 50;
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	2232      	movs	r2, #50	; 0x32
 800066a:	701a      	strb	r2, [r3, #0]
	led[0].green = 50;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	2232      	movs	r2, #50	; 0x32
 8000670:	705a      	strb	r2, [r3, #1]
	led[0].blue = 50;
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	2232      	movs	r2, #50	; 0x32
 8000676:	709a      	strb	r2, [r3, #2]
	led[0].white = 50;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2232      	movs	r2, #50	; 0x32
 800067c:	70da      	strb	r2, [r3, #3]

	led[1].red = 0;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3304      	adds	r3, #4
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
	led[1].green = 0;
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3304      	adds	r3, #4
 800068a:	2200      	movs	r2, #0
 800068c:	705a      	strb	r2, [r3, #1]
	led[1].blue = 5;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3304      	adds	r3, #4
 8000692:	2205      	movs	r2, #5
 8000694:	709a      	strb	r2, [r3, #2]
	led[1].white = 5;
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3304      	adds	r3, #4
 800069a:	2205      	movs	r2, #5
 800069c:	70da      	strb	r2, [r3, #3]

	for (int i = 2; i < led_num; i++) {
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
 80006a2:	e00a      	b.n	80006ba <testRoutine+0x76>
		memcpy(&led[i], &led[1], sizeof(led_rgb_color_t));
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	4413      	add	r3, r2
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	3204      	adds	r2, #4
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	601a      	str	r2, [r3, #0]
	for (int i = 2; i < led_num; i++) {
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	3301      	adds	r3, #1
 80006b8:	61fb      	str	r3, [r7, #28]
 80006ba:	8b7b      	ldrh	r3, [r7, #26]
 80006bc:	69fa      	ldr	r2, [r7, #28]
 80006be:	429a      	cmp	r2, r3
 80006c0:	dbf0      	blt.n	80006a4 <testRoutine+0x60>
//	led[7].red = 50;
//	led[7].green = 0;
//	led[7].blue = 0;
//	led[7].white = 0;

	led_pattern_t patterns = { 0 };
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]

	patterns.led_num = led_num;
 80006ce:	8b7b      	ldrh	r3, [r7, #26]
 80006d0:	81bb      	strh	r3, [r7, #12]
	patterns.duration_ms = 50;
 80006d2:	2332      	movs	r3, #50	; 0x32
 80006d4:	823b      	strh	r3, [r7, #16]
	patterns.direction = 1; // can be ignored anyway
 80006d6:	2301      	movs	r3, #1
 80006d8:	73bb      	strb	r3, [r7, #14]
	patterns.led_colors = malloc(patterns.led_num * sizeof(led_rgb_color_t));
 80006da:	89bb      	ldrh	r3, [r7, #12]
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 fb7e 	bl	8006de0 <malloc>
 80006e4:	4603      	mov	r3, r0
 80006e6:	60bb      	str	r3, [r7, #8]
	memcpy(patterns.led_colors, led,
 80006e8:	68bb      	ldr	r3, [r7, #8]
			patterns.led_num * sizeof(led_rgb_color_t));
 80006ea:	89ba      	ldrh	r2, [r7, #12]
	memcpy(patterns.led_colors, led,
 80006ec:	0092      	lsls	r2, r2, #2
 80006ee:	6979      	ldr	r1, [r7, #20]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f006 fb85 	bl	8006e00 <memcpy>
	startAnimating(stripe, &patterns);
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	4619      	mov	r1, r3
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff ff0d 	bl	800051c <startAnimating>
}
 8000702:	bf00      	nop
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	08007e40 	.word	0x08007e40

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fdf0 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f842 	bl	80007a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	debug_log("Q-loud LED Controller v1.0");
 800071c:	4818      	ldr	r0, [pc, #96]	; (8000780 <main+0x70>)
 800071e:	f7ff fd21 	bl	8000164 <debug_log>
	//debug_log("");
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f000 f9c9 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000726:	f000 f9a1 	bl	8000a6c <MX_DMA_Init>
  MX_SPI2_Init();
 800072a:	f000 f8cb 	bl	80008c4 <MX_SPI2_Init>
  MX_SPI1_Init();
 800072e:	f000 f893 	bl	8000858 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000732:	f000 f8fd 	bl	8000930 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000736:	f000 f94b 	bl	80009d0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800073a:	f005 ff7b 	bl	8006634 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000744:	480f      	ldr	r0, [pc, #60]	; (8000784 <main+0x74>)
 8000746:	f001 fab1 	bl	8001cac <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800074a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800074e:	f000 fe35 	bl	80013bc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <main+0x74>)
 800075a:	f001 faa7 	bl	8001cac <HAL_GPIO_WritePin>
	initializeSPIAdapter(&hspi1, &hspi2);
 800075e:	490a      	ldr	r1, [pc, #40]	; (8000788 <main+0x78>)
 8000760:	480a      	ldr	r0, [pc, #40]	; (800078c <main+0x7c>)
 8000762:	f000 fa07 	bl	8000b74 <initializeSPIAdapter>
	initializeLEDApplication(&htim2, &htim3);
 8000766:	490a      	ldr	r1, [pc, #40]	; (8000790 <main+0x80>)
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <main+0x84>)
 800076a:	f7ff fd2f 	bl	80001cc <initializeLEDApplication>
	debug_log("Initialization done.");
 800076e:	480a      	ldr	r0, [pc, #40]	; (8000798 <main+0x88>)
 8000770:	f7ff fcf8 	bl	8000164 <debug_log>
	testRoutine(&Bus2_LEDStripe);
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <main+0x8c>)
 8000776:	f7ff ff65 	bl	8000644 <testRoutine>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		runLEDScheduler();
 800077a:	f7ff ff37 	bl	80005ec <runLEDScheduler>
 800077e:	e7fc      	b.n	800077a <main+0x6a>
 8000780:	08007e5c 	.word	0x08007e5c
 8000784:	40011000 	.word	0x40011000
 8000788:	20000338 	.word	0x20000338
 800078c:	200003d0 	.word	0x200003d0
 8000790:	20000390 	.word	0x20000390
 8000794:	20000428 	.word	0x20000428
 8000798:	08007e78 	.word	0x08007e78
 800079c:	200002fc 	.word	0x200002fc

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007aa:	2228      	movs	r2, #40	; 0x28
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 fb31 	bl	8006e16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007de:	2301      	movs	r3, #1
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 f93e 	bl	8002a78 <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000802:	f000 f9b1 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2302      	movs	r3, #2
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000816:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2101      	movs	r1, #1
 8000822:	4618      	mov	r0, r3
 8000824:	f002 fba8 	bl	8002f78 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800082e:	f000 f99b 	bl	8000b68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000832:	2310      	movs	r3, #16
 8000834:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800083a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4618      	mov	r0, r3
 8000840:	f002 fd04 	bl	800324c <HAL_RCCEx_PeriphCLKConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800084a:	f000 f98d 	bl	8000b68 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	; 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_SPI1_Init+0x64>)
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <MX_SPI1_Init+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_SPI1_Init+0x64>)
 8000864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_SPI1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_SPI1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_SPI1_Init+0x64>)
 8000884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000888:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_SPI1_Init+0x64>)
 800088c:	2210      	movs	r2, #16
 800088e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_SPI1_Init+0x64>)
 80008a4:	220a      	movs	r2, #10
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_SPI1_Init+0x64>)
 80008aa:	f002 fd85 	bl	80033b8 <HAL_SPI_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b4:	f000 f958 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200003d0 	.word	0x200003d0
 80008c0:	40013000 	.word	0x40013000

080008c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_SPI2_Init+0x64>)
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_SPI2_Init+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_SPI2_Init+0x64>)
 80008d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_SPI2_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_SPI2_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_SPI2_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_SPI2_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SPI2_Init+0x64>)
 80008f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_SPI2_Init+0x64>)
 80008f8:	2208      	movs	r2, #8
 80008fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_SPI2_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_SPI2_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_SPI2_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_SPI2_Init+0x64>)
 8000910:	220a      	movs	r2, #10
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_SPI2_Init+0x64>)
 8000916:	f002 fd4f 	bl	80033b8 <HAL_SPI_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000920:	f000 f922 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000338 	.word	0x20000338
 800092c:	40003800 	.word	0x40003800

08000930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
	htim2.Init.RepetitionCounter = 1;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_TIM2_Init+0x9c>)
 800094e:	2201      	movs	r2, #1
 8000950:	615a      	str	r2, [r3, #20]
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_TIM2_Init+0x9c>)
 8000954:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000958:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_TIM2_Init+0x9c>)
 800095c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000960:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_TIM2_Init+0x9c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_TIM2_Init+0x9c>)
 800096a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800096e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_TIM2_Init+0x9c>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_TIM2_Init+0x9c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800097c:	4813      	ldr	r0, [pc, #76]	; (80009cc <MX_TIM2_Init+0x9c>)
 800097e:	f002 ff4f 	bl	8003820 <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000988:	f000 f8ee 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000990:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_TIM2_Init+0x9c>)
 800099a:	f003 f8c1 	bl	8003b20 <HAL_TIM_ConfigClockSource>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009a4:	f000 f8e0 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_TIM2_Init+0x9c>)
 80009b6:	f003 fa87 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009c0:	f000 f8d2 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000428 	.word	0x20000428

080009d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_TIM3_Init+0x94>)
 80009ee:	4a1e      	ldr	r2, [pc, #120]	; (8000a68 <MX_TIM3_Init+0x98>)
 80009f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_TIM3_Init+0x94>)
 80009f4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80009f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_TIM3_Init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_TIM3_Init+0x94>)
 8000a02:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_TIM3_Init+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_TIM3_Init+0x94>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a14:	4813      	ldr	r0, [pc, #76]	; (8000a64 <MX_TIM3_Init+0x94>)
 8000a16:	f002 ff03 	bl	8003820 <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a20:	f000 f8a2 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MX_TIM3_Init+0x94>)
 8000a32:	f003 f875 	bl	8003b20 <HAL_TIM_ConfigClockSource>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a3c:	f000 f894 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_TIM3_Init+0x94>)
 8000a4e:	f003 fa3b 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a58:	f000 f886 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000390 	.word	0x20000390
 8000a68:	40000400 	.word	0x40000400

08000a6c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_DMA_Init+0x48>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <MX_DMA_Init+0x48>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <MX_DMA_Init+0x48>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	200d      	movs	r0, #13
 8000a90:	f000 fd8d 	bl	80015ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a94:	200d      	movs	r0, #13
 8000a96:	f000 fda6 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	200f      	movs	r0, #15
 8000aa0:	f000 fd85 	bl	80015ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000aa4:	200f      	movs	r0, #15
 8000aa6:	f000 fd9e 	bl	80015e6 <HAL_NVIC_EnableIRQ>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <MX_GPIO_Init+0xa8>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <MX_GPIO_Init+0xa8>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_GPIO_Init+0xa8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <MX_GPIO_Init+0xa8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <MX_GPIO_Init+0xa8>)
 8000aea:	f043 0320 	orr.w	r3, r3, #32
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_GPIO_Init+0xa8>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0320 	and.w	r3, r3, #32
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_GPIO_Init+0xa8>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <MX_GPIO_Init+0xa8>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_GPIO_Init+0xa8>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_GPIO_Init+0xa8>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <MX_GPIO_Init+0xa8>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_GPIO_Init+0xa8>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b32:	480c      	ldr	r0, [pc, #48]	; (8000b64 <MX_GPIO_Init+0xac>)
 8000b34:	f001 f8ba 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_GPIO_Init+0xac>)
 8000b52:	f000 ff51 	bl	80019f8 <HAL_GPIO_Init>

}
 8000b56:	bf00      	nop
 8000b58:	3720      	adds	r7, #32
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40011000 	.word	0x40011000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <initializeSPIAdapter>:
#include "sk6812_rgbw.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void initializeSPIAdapter(SPI_HandleTypeDef *hspi_1, SPI_HandleTypeDef *hspi_2) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	memcpy(&bus1, hspi_1, sizeof(SPI_HandleTypeDef));
 8000b7e:	2258      	movs	r2, #88	; 0x58
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <initializeSPIAdapter+0x34>)
 8000b84:	f006 f93c 	bl	8006e00 <memcpy>
	memcpy(&bus2, hspi_2, sizeof(SPI_HandleTypeDef));
 8000b88:	2258      	movs	r2, #88	; 0x58
 8000b8a:	6839      	ldr	r1, [r7, #0]
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <initializeSPIAdapter+0x38>)
 8000b8e:	f006 f937 	bl	8006e00 <memcpy>

	HAL_SPI_MspInit(&bus1);
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <initializeSPIAdapter+0x34>)
 8000b94:	f000 f92e 	bl	8000df4 <HAL_SPI_MspInit>
	HAL_SPI_MspInit(&bus2);
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <initializeSPIAdapter+0x38>)
 8000b9a:	f000 f92b 	bl	8000df4 <HAL_SPI_MspInit>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200002a4 	.word	0x200002a4
 8000bac:	20000208 	.word	0x20000208

08000bb0 <sendSymbolStreamOnLine>:

static void sendSymbolStreamOnLine(uint8_t *symbols, uint16_t length,
		spi_bus_num_t busNum) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b098      	sub	sp, #96	; 0x60
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	707b      	strb	r3, [r7, #1]
	SPI_HandleTypeDef hspi;

	if(busNum == bus_1){
 8000bc0:	787b      	ldrb	r3, [r7, #1]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d108      	bne.n	8000bd8 <sendSymbolStreamOnLine+0x28>
		hspi = bus1;
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <sendSymbolStreamOnLine+0x5c>)
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	4611      	mov	r1, r2
 8000bce:	2258      	movs	r2, #88	; 0x58
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f006 f915 	bl	8006e00 <memcpy>
 8000bd6:	e00a      	b.n	8000bee <sendSymbolStreamOnLine+0x3e>
	}
	else if(busNum == bus_2){
 8000bd8:	787b      	ldrb	r3, [r7, #1]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d107      	bne.n	8000bee <sendSymbolStreamOnLine+0x3e>
		hspi = bus2;
 8000bde:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <sendSymbolStreamOnLine+0x60>)
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	4611      	mov	r1, r2
 8000be6:	2258      	movs	r2, #88	; 0x58
 8000be8:	4618      	mov	r0, r3
 8000bea:	f006 f909 	bl	8006e00 <memcpy>
	}

	HAL_SPI_Transmit_DMA(&hspi, symbols, length);
 8000bee:	887a      	ldrh	r2, [r7, #2]
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 fc40 	bl	800347c <HAL_SPI_Transmit_DMA>
	free(symbols);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f006 f8f7 	bl	8006df0 <free>
}
 8000c02:	bf00      	nop
 8000c04:	3760      	adds	r7, #96	; 0x60
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200002a4 	.word	0x200002a4
 8000c10:	20000208 	.word	0x20000208

08000c14 <color2Symbol>:

static void color2Symbol(uint8_t color, uint8_t *symbol_stream) {
 8000c14:	b480      	push	{r7}
 8000c16:	b087      	sub	sp, #28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
	const uint8_t oneSymbol = 0b11110000;
 8000c20:	23f0      	movs	r3, #240	; 0xf0
 8000c22:	73fb      	strb	r3, [r7, #15]
	const uint8_t zeroSymbol = 0b11000000;
 8000c24:	23c0      	movs	r3, #192	; 0xc0
 8000c26:	73bb      	strb	r3, [r7, #14]
	uint16_t cursor = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	82fb      	strh	r3, [r7, #22]

	for (int i = 7; i >= 0; i--) {
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	e018      	b.n	8000c64 <color2Symbol+0x50>
		if (color & (1 << i)) {
 8000c32:	79fa      	ldrb	r2, [r7, #7]
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	fa42 f303 	asr.w	r3, r2, r3
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d005      	beq.n	8000c4e <color2Symbol+0x3a>
			memcpy(symbol_stream + cursor, &oneSymbol, 1);
 8000c42:	8afb      	ldrh	r3, [r7, #22]
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e004      	b.n	8000c58 <color2Symbol+0x44>
		} else {
			memcpy(symbol_stream + cursor, &zeroSymbol, 1);
 8000c4e:	8afb      	ldrh	r3, [r7, #22]
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	7bba      	ldrb	r2, [r7, #14]
 8000c56:	701a      	strb	r2, [r3, #0]
		}
		cursor++;
 8000c58:	8afb      	ldrh	r3, [r7, #22]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	82fb      	strh	r3, [r7, #22]
	for (int i = 7; i >= 0; i--) {
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	dae3      	bge.n	8000c32 <color2Symbol+0x1e>
	}
}
 8000c6a:	bf00      	nop
 8000c6c:	371c      	adds	r7, #28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <getColorSymbolStream>:

static void getColorSymbolStream(led_rgb_color_t *led, uint8_t *symbol_stream) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
	uint16_t cursor = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	81fb      	strh	r3, [r7, #14]

	color2Symbol(led->green, symbol_stream + cursor);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7858      	ldrb	r0, [r3, #1]
 8000c86:	89fb      	ldrh	r3, [r7, #14]
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f7ff ffc1 	bl	8000c14 <color2Symbol>
	cursor += 8;
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	3308      	adds	r3, #8
 8000c96:	81fb      	strh	r3, [r7, #14]
	color2Symbol(led->red, symbol_stream + cursor);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7818      	ldrb	r0, [r3, #0]
 8000c9c:	89fb      	ldrh	r3, [r7, #14]
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f7ff ffb6 	bl	8000c14 <color2Symbol>
	cursor += 8;
 8000ca8:	89fb      	ldrh	r3, [r7, #14]
 8000caa:	3308      	adds	r3, #8
 8000cac:	81fb      	strh	r3, [r7, #14]
	color2Symbol(led->blue, symbol_stream + cursor);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7898      	ldrb	r0, [r3, #2]
 8000cb2:	89fb      	ldrh	r3, [r7, #14]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f7ff ffab 	bl	8000c14 <color2Symbol>
	cursor += 8;
 8000cbe:	89fb      	ldrh	r3, [r7, #14]
 8000cc0:	3308      	adds	r3, #8
 8000cc2:	81fb      	strh	r3, [r7, #14]
	color2Symbol(led->white, symbol_stream + cursor);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	78d8      	ldrb	r0, [r3, #3]
 8000cc8:	89fb      	ldrh	r3, [r7, #14]
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f7ff ffa0 	bl	8000c14 <color2Symbol>
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <buildSymbolStream>:

static void buildSymbolStream(uint8_t **stream, led_rgb_color_t *led,
		uint16_t ledNum) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	80fb      	strh	r3, [r7, #6]
	uint16_t stream_length = LED_STREAM_LENGTH(ledNum);
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	015b      	lsls	r3, r3, #5
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	338c      	adds	r3, #140	; 0x8c
 8000cf2:	823b      	strh	r3, [r7, #16]
	uint32_t cursor = START_OFFSET;
 8000cf4:	2350      	movs	r3, #80	; 0x50
 8000cf6:	617b      	str	r3, [r7, #20]
	*stream = malloc(stream_length);
 8000cf8:	8a3b      	ldrh	r3, [r7, #16]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f006 f870 	bl	8006de0 <malloc>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	601a      	str	r2, [r3, #0]

	memset(*stream, 0, stream_length);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	8a3a      	ldrh	r2, [r7, #16]
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f006 f880 	bl	8006e16 <memset>
	for (uint16_t i = 0; i < ledNum; i++) {
 8000d16:	2300      	movs	r3, #0
 8000d18:	827b      	strh	r3, [r7, #18]
 8000d1a:	e010      	b.n	8000d3e <buildSymbolStream+0x62>
		getColorSymbolStream(led + i, (*stream) + cursor);
 8000d1c:	8a7b      	ldrh	r3, [r7, #18]
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	18d0      	adds	r0, r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f7ff ffa1 	bl	8000c74 <getColorSymbolStream>
		cursor += SINGLE_LED_FRAME_SIZE;
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3320      	adds	r3, #32
 8000d36:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < ledNum; i++) {
 8000d38:	8a7b      	ldrh	r3, [r7, #18]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	827b      	strh	r3, [r7, #18]
 8000d3e:	8a7a      	ldrh	r2, [r7, #18]
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d3ea      	bcc.n	8000d1c <buildSymbolStream+0x40>
	}
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <showLEDs>:

	showLEDs(led, ledNum, busNum);
	free(led);
}

void showLEDs(led_rgb_color_t *led, uint16_t ledNum, spi_bus_num_t busNum) {
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	460b      	mov	r3, r1
 8000d58:	807b      	strh	r3, [r7, #2]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	707b      	strb	r3, [r7, #1]
	uint8_t *symbols_stream = NULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
	uint16_t stream_length = LED_STREAM_LENGTH(ledNum);
 8000d62:	887b      	ldrh	r3, [r7, #2]
 8000d64:	015b      	lsls	r3, r3, #5
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	338c      	adds	r3, #140	; 0x8c
 8000d6a:	81fb      	strh	r3, [r7, #14]

	buildSymbolStream(&symbols_stream, led, ledNum);
 8000d6c:	887a      	ldrh	r2, [r7, #2]
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ffb1 	bl	8000cdc <buildSymbolStream>
	sendSymbolStreamOnLine(symbols_stream, stream_length, busNum);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	787a      	ldrb	r2, [r7, #1]
 8000d7e:	89f9      	ldrh	r1, [r7, #14]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff15 	bl	8000bb0 <sendSymbolStreamOnLine>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_MspInit+0x5c>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <HAL_MspInit+0x5c>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6193      	str	r3, [r2, #24]
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_MspInit+0x5c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_MspInit+0x5c>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_MspInit+0x5c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_MspInit+0x5c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_MspInit+0x60>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_MspInit+0x60>)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000

08000df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a52      	ldr	r2, [pc, #328]	; (8000f58 <HAL_SPI_MspInit+0x164>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d14b      	bne.n	8000eac <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e14:	4b51      	ldr	r3, [pc, #324]	; (8000f5c <HAL_SPI_MspInit+0x168>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a50      	ldr	r2, [pc, #320]	; (8000f5c <HAL_SPI_MspInit+0x168>)
 8000e1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b4e      	ldr	r3, [pc, #312]	; (8000f5c <HAL_SPI_MspInit+0x168>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <HAL_SPI_MspInit+0x168>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a4a      	ldr	r2, [pc, #296]	; (8000f5c <HAL_SPI_MspInit+0x168>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <HAL_SPI_MspInit+0x168>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e44:	23a0      	movs	r3, #160	; 0xa0
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4842      	ldr	r0, [pc, #264]	; (8000f60 <HAL_SPI_MspInit+0x16c>)
 8000e58:	f000 fdce 	bl	80019f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000e5c:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <HAL_SPI_MspInit+0x170>)
 8000e5e:	4a42      	ldr	r2, [pc, #264]	; (8000f68 <HAL_SPI_MspInit+0x174>)
 8000e60:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e62:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <HAL_SPI_MspInit+0x170>)
 8000e64:	2210      	movs	r2, #16
 8000e66:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e68:	4b3e      	ldr	r3, [pc, #248]	; (8000f64 <HAL_SPI_MspInit+0x170>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <HAL_SPI_MspInit+0x170>)
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e74:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <HAL_SPI_MspInit+0x170>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <HAL_SPI_MspInit+0x170>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e80:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <HAL_SPI_MspInit+0x170>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <HAL_SPI_MspInit+0x170>)
 8000e88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e8e:	4835      	ldr	r0, [pc, #212]	; (8000f64 <HAL_SPI_MspInit+0x170>)
 8000e90:	f000 fbc4 	bl	800161c <HAL_DMA_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8000e9a:	f7ff fe65 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a30      	ldr	r2, [pc, #192]	; (8000f64 <HAL_SPI_MspInit+0x170>)
 8000ea2:	649a      	str	r2, [r3, #72]	; 0x48
 8000ea4:	4a2f      	ldr	r2, [pc, #188]	; (8000f64 <HAL_SPI_MspInit+0x170>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000eaa:	e050      	b.n	8000f4e <HAL_SPI_MspInit+0x15a>
  else if(hspi->Instance==SPI2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a2e      	ldr	r2, [pc, #184]	; (8000f6c <HAL_SPI_MspInit+0x178>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d14b      	bne.n	8000f4e <HAL_SPI_MspInit+0x15a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eb6:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <HAL_SPI_MspInit+0x168>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a28      	ldr	r2, [pc, #160]	; (8000f5c <HAL_SPI_MspInit+0x168>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_SPI_MspInit+0x168>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <HAL_SPI_MspInit+0x168>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a22      	ldr	r2, [pc, #136]	; (8000f5c <HAL_SPI_MspInit+0x168>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <HAL_SPI_MspInit+0x168>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000ee6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481d      	ldr	r0, [pc, #116]	; (8000f70 <HAL_SPI_MspInit+0x17c>)
 8000efc:	f000 fd7c 	bl	80019f8 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_SPI_MspInit+0x180>)
 8000f02:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_SPI_MspInit+0x184>)
 8000f04:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_SPI_MspInit+0x180>)
 8000f08:	2210      	movs	r2, #16
 8000f0a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_SPI_MspInit+0x180>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_SPI_MspInit+0x180>)
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_SPI_MspInit+0x180>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_SPI_MspInit+0x180>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <HAL_SPI_MspInit+0x180>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_SPI_MspInit+0x180>)
 8000f2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f30:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000f32:	4810      	ldr	r0, [pc, #64]	; (8000f74 <HAL_SPI_MspInit+0x180>)
 8000f34:	f000 fb72 	bl	800161c <HAL_DMA_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_SPI_MspInit+0x14e>
      Error_Handler();
 8000f3e:	f7ff fe13 	bl	8000b68 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_SPI_MspInit+0x180>)
 8000f46:	649a      	str	r2, [r3, #72]	; 0x48
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_SPI_MspInit+0x180>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	; 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40013000 	.word	0x40013000
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010800 	.word	0x40010800
 8000f64:	200004ac 	.word	0x200004ac
 8000f68:	40020030 	.word	0x40020030
 8000f6c:	40003800 	.word	0x40003800
 8000f70:	40010c00 	.word	0x40010c00
 8000f74:	20000468 	.word	0x20000468
 8000f78:	40020058 	.word	0x40020058

08000f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f8c:	d114      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	201c      	movs	r0, #28
 8000fac:	f000 faff 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb0:	201c      	movs	r0, #28
 8000fb2:	f000 fb18 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fb6:	e018      	b.n	8000fea <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d113      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	201d      	movs	r0, #29
 8000fe0:	f000 fae5 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fe4:	201d      	movs	r0, #29
 8000fe6:	f000 fafe 	bl	80015e6 <HAL_NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40000400 	.word	0x40000400

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <HardFault_Handler+0x4>

0800100e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <MemManage_Handler+0x4>

08001014 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <BusFault_Handler+0x4>

0800101a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <UsageFault_Handler+0x4>

08001020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 f99c 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <DMA1_Channel3_IRQHandler+0x10>)
 8001056:	f000 fb9b 	bl	8001790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200004ac 	.word	0x200004ac

08001064 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <DMA1_Channel5_IRQHandler+0x10>)
 800106a:	f000 fb91 	bl	8001790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000468 	.word	0x20000468

08001078 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800107e:	f000 ff34 	bl	8001eea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200009b8 	.word	0x200009b8

0800108c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <TIM2_IRQHandler+0x10>)
 8001092:	f002 fc3d 	bl	8003910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000428 	.word	0x20000428

080010a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <TIM3_IRQHandler+0x10>)
 80010a6:	f002 fc33 	bl	8003910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000390 	.word	0x20000390

080010b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d013      	beq.n	80010f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00b      	beq.n	80010f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010dc:	e000      	b.n	80010e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f9      	beq.n	80010de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010f4:	687b      	ldr	r3, [r7, #4]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <__io_putchar>:
char **environ = __env;

/* Functions */
#include "stdio.h"
int __io_putchar(int ch)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 ITM_SendChar(ch);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ffd2 	bl	80010b4 <ITM_SendChar>
 return(ch);
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e00a      	b.n	8001142 <_read+0x28>
		*ptr++ = __io_getchar();
 800112c:	f3af 8000 	nop.w
 8001130:	4601      	mov	r1, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	60ba      	str	r2, [r7, #8]
 8001138:	b2ca      	uxtb	r2, r1
 800113a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	3301      	adds	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	429a      	cmp	r2, r3
 8001148:	dbf0      	blt.n	800112c <_read+0x12>
	}

	return len;
 800114a:	687b      	ldr	r3, [r7, #4]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e009      	b.n	800117a <_write+0x26>
		__io_putchar(*ptr++);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	60ba      	str	r2, [r7, #8]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffc6 	bl	8001100 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	dbf1      	blt.n	8001166 <_write+0x12>
	}
	return len;
 8001182:	687b      	ldr	r3, [r7, #4]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_close>:

int _close(int file) {
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	return -1;
 8001194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b2:	605a      	str	r2, [r3, #4]
	return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <_isatty>:

int _isatty(int file) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	return 1;
 80011c8:	2301      	movs	r3, #1
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <_sbrk+0x50>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x16>
		heap_end = &end;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <_sbrk+0x50>)
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <_sbrk+0x54>)
 8001200:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <_sbrk+0x50>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <_sbrk+0x50>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	466a      	mov	r2, sp
 8001212:	4293      	cmp	r3, r2
 8001214:	d907      	bls.n	8001226 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001216:	f005 fdb9 	bl	8006d8c <__errno>
 800121a:	4602      	mov	r2, r0
 800121c:	230c      	movs	r3, #12
 800121e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001224:	e006      	b.n	8001234 <_sbrk+0x48>
	}

	heap_end += incr;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <_sbrk+0x50>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a03      	ldr	r2, [pc, #12]	; (800123c <_sbrk+0x50>)
 8001230:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001e4 	.word	0x200001e4
 8001240:	20000c28 	.word	0x20000c28

08001244 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <SystemInit+0x5c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <SystemInit+0x5c>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <SystemInit+0x5c>)
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	4911      	ldr	r1, [pc, #68]	; (80012a0 <SystemInit+0x5c>)
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <SystemInit+0x60>)
 800125c:	4013      	ands	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <SystemInit+0x5c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <SystemInit+0x5c>)
 8001266:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800126a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <SystemInit+0x5c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <SystemInit+0x5c>)
 8001276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <SystemInit+0x5c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <SystemInit+0x5c>)
 8001282:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001286:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SystemInit+0x5c>)
 800128a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800128e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SystemInit+0x64>)
 8001292:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001296:	609a      	str	r2, [r3, #8]
#endif 
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000
 80012a4:	f8ff0000 	.word	0xf8ff0000
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012ae:	e003      	b.n	80012b8 <LoopCopyDataInit>

080012b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012b6:	3104      	adds	r1, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012c0:	d3f6      	bcc.n	80012b0 <CopyDataInit>
  ldr r2, =_sbss
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012c4:	e002      	b.n	80012cc <LoopFillZerobss>

080012c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012c8:	f842 3b04 	str.w	r3, [r2], #4

080012cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012d0:	d3f9      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012d2:	f7ff ffb7 	bl	8001244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d6:	f005 fd5f 	bl	8006d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012da:	f7ff fa19 	bl	8000710 <main>
  bx lr
 80012de:	4770      	bx	lr
  ldr r3, =_sidata
 80012e0:	08007f9c 	.word	0x08007f9c
  ldr r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012e8:	200001c8 	.word	0x200001c8
  ldr r2, =_sbss
 80012ec:	200001c8 	.word	0x200001c8
  ldr r3, = _ebss
 80012f0:	20000c28 	.word	0x20000c28

080012f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC1_2_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_Init+0x28>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_Init+0x28>)
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 f945 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fd3c 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40022000 	.word	0x40022000

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f95d 	bl	8001602 <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001360:	f000 f925 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000000 	.word	0x20000000
 800137c:	20000008 	.word	0x20000008
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_IncTick+0x1c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_IncTick+0x20>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a03      	ldr	r2, [pc, #12]	; (80013a4 <HAL_IncTick+0x20>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	20000008 	.word	0x20000008
 80013a4:	200004f0 	.word	0x200004f0

080013a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b02      	ldr	r3, [pc, #8]	; (80013b8 <HAL_GetTick+0x10>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	200004f0 	.word	0x200004f0

080013bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff fff0 	bl	80013a8 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013d4:	d005      	beq.n	80013e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_Delay+0x40>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e2:	bf00      	nop
 80013e4:	f7ff ffe0 	bl	80013a8 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <HAL_Delay+0x28>
  {
  }
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000008 	.word	0x20000008

08001400 <__NVIC_SetPriorityGrouping>:
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4906      	ldr	r1, [pc, #24]	; (8001498 <__NVIC_EnableIRQ+0x34>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <SysTick_Config>:
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001578:	f7ff ff90 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff2d 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff42 	bl	8001448 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff90 	bl	80014f0 <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5f 	bl	800149c <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff35 	bl	8001464 <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa2 	bl	8001554 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e043      	b.n	80016ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <HAL_DMA_Init+0xa8>)
 800163a:	4413      	add	r3, r2
 800163c:	4a22      	ldr	r2, [pc, #136]	; (80016c8 <HAL_DMA_Init+0xac>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	009a      	lsls	r2, r3, #2
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <HAL_DMA_Init+0xb0>)
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2202      	movs	r2, #2
 8001654:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001666:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800166a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001674:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001680:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	bffdfff8 	.word	0xbffdfff8
 80016c8:	cccccccd 	.word	0xcccccccd
 80016cc:	40020000 	.word	0x40020000

080016d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_DMA_Start_IT+0x20>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e04a      	b.n	8001786 <HAL_DMA_Start_IT+0xb6>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d13a      	bne.n	8001778 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2202      	movs	r2, #2
 8001706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f000 f938 	bl	800199c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 020e 	orr.w	r2, r2, #14
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e00f      	b.n	8001766 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0204 	bic.w	r2, r2, #4
 8001754:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 020a 	orr.w	r2, r2, #10
 8001764:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 0201 	orr.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e005      	b.n	8001784 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001780:	2302      	movs	r3, #2
 8001782:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001784:	7dfb      	ldrb	r3, [r7, #23]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	2204      	movs	r2, #4
 80017ae:	409a      	lsls	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d04f      	beq.n	8001858 <HAL_DMA_IRQHandler+0xc8>
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d04a      	beq.n	8001858 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d107      	bne.n	80017e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0204 	bic.w	r2, r2, #4
 80017de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a66      	ldr	r2, [pc, #408]	; (8001980 <HAL_DMA_IRQHandler+0x1f0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d029      	beq.n	800183e <HAL_DMA_IRQHandler+0xae>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a65      	ldr	r2, [pc, #404]	; (8001984 <HAL_DMA_IRQHandler+0x1f4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d022      	beq.n	800183a <HAL_DMA_IRQHandler+0xaa>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a63      	ldr	r2, [pc, #396]	; (8001988 <HAL_DMA_IRQHandler+0x1f8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d01a      	beq.n	8001834 <HAL_DMA_IRQHandler+0xa4>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a62      	ldr	r2, [pc, #392]	; (800198c <HAL_DMA_IRQHandler+0x1fc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d012      	beq.n	800182e <HAL_DMA_IRQHandler+0x9e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a60      	ldr	r2, [pc, #384]	; (8001990 <HAL_DMA_IRQHandler+0x200>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00a      	beq.n	8001828 <HAL_DMA_IRQHandler+0x98>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a5f      	ldr	r2, [pc, #380]	; (8001994 <HAL_DMA_IRQHandler+0x204>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d102      	bne.n	8001822 <HAL_DMA_IRQHandler+0x92>
 800181c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001820:	e00e      	b.n	8001840 <HAL_DMA_IRQHandler+0xb0>
 8001822:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001826:	e00b      	b.n	8001840 <HAL_DMA_IRQHandler+0xb0>
 8001828:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800182c:	e008      	b.n	8001840 <HAL_DMA_IRQHandler+0xb0>
 800182e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001832:	e005      	b.n	8001840 <HAL_DMA_IRQHandler+0xb0>
 8001834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001838:	e002      	b.n	8001840 <HAL_DMA_IRQHandler+0xb0>
 800183a:	2340      	movs	r3, #64	; 0x40
 800183c:	e000      	b.n	8001840 <HAL_DMA_IRQHandler+0xb0>
 800183e:	2304      	movs	r3, #4
 8001840:	4a55      	ldr	r2, [pc, #340]	; (8001998 <HAL_DMA_IRQHandler+0x208>)
 8001842:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8094 	beq.w	8001976 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001856:	e08e      	b.n	8001976 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	2202      	movs	r2, #2
 800185e:	409a      	lsls	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d056      	beq.n	8001916 <HAL_DMA_IRQHandler+0x186>
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d051      	beq.n	8001916 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0320 	and.w	r3, r3, #32
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10b      	bne.n	8001898 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 020a 	bic.w	r2, r2, #10
 800188e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a38      	ldr	r2, [pc, #224]	; (8001980 <HAL_DMA_IRQHandler+0x1f0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d029      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x166>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a37      	ldr	r2, [pc, #220]	; (8001984 <HAL_DMA_IRQHandler+0x1f4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d022      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x162>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a35      	ldr	r2, [pc, #212]	; (8001988 <HAL_DMA_IRQHandler+0x1f8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d01a      	beq.n	80018ec <HAL_DMA_IRQHandler+0x15c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a34      	ldr	r2, [pc, #208]	; (800198c <HAL_DMA_IRQHandler+0x1fc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d012      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x156>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a32      	ldr	r2, [pc, #200]	; (8001990 <HAL_DMA_IRQHandler+0x200>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d00a      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x150>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a31      	ldr	r2, [pc, #196]	; (8001994 <HAL_DMA_IRQHandler+0x204>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <HAL_DMA_IRQHandler+0x14a>
 80018d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018d8:	e00e      	b.n	80018f8 <HAL_DMA_IRQHandler+0x168>
 80018da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018de:	e00b      	b.n	80018f8 <HAL_DMA_IRQHandler+0x168>
 80018e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e4:	e008      	b.n	80018f8 <HAL_DMA_IRQHandler+0x168>
 80018e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ea:	e005      	b.n	80018f8 <HAL_DMA_IRQHandler+0x168>
 80018ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f0:	e002      	b.n	80018f8 <HAL_DMA_IRQHandler+0x168>
 80018f2:	2320      	movs	r3, #32
 80018f4:	e000      	b.n	80018f8 <HAL_DMA_IRQHandler+0x168>
 80018f6:	2302      	movs	r3, #2
 80018f8:	4a27      	ldr	r2, [pc, #156]	; (8001998 <HAL_DMA_IRQHandler+0x208>)
 80018fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	2b00      	cmp	r3, #0
 800190a:	d034      	beq.n	8001976 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001914:	e02f      	b.n	8001976 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	2208      	movs	r2, #8
 800191c:	409a      	lsls	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4013      	ands	r3, r2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d028      	beq.n	8001978 <HAL_DMA_IRQHandler+0x1e8>
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b00      	cmp	r3, #0
 800192e:	d023      	beq.n	8001978 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 020e 	bic.w	r2, r2, #14
 800193e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f202 	lsl.w	r2, r1, r2
 800194e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	2b00      	cmp	r3, #0
 800196c:	d004      	beq.n	8001978 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	4798      	blx	r3
    }
  }
  return;
 8001976:	bf00      	nop
 8001978:	bf00      	nop
}
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40020008 	.word	0x40020008
 8001984:	4002001c 	.word	0x4002001c
 8001988:	40020030 	.word	0x40020030
 800198c:	40020044 	.word	0x40020044
 8001990:	40020058 	.word	0x40020058
 8001994:	4002006c 	.word	0x4002006c
 8001998:	40020000 	.word	0x40020000

0800199c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d108      	bne.n	80019dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019da:	e007      	b.n	80019ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	60da      	str	r2, [r3, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b08b      	sub	sp, #44	; 0x2c
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0a:	e127      	b.n	8001c5c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	f040 8116 	bne.w	8001c56 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d034      	beq.n	8001a9c <HAL_GPIO_Init+0xa4>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d80d      	bhi.n	8001a52 <HAL_GPIO_Init+0x5a>
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d02b      	beq.n	8001a92 <HAL_GPIO_Init+0x9a>
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d804      	bhi.n	8001a48 <HAL_GPIO_Init+0x50>
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d031      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d01c      	beq.n	8001a80 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a46:	e048      	b.n	8001ada <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d043      	beq.n	8001ad4 <HAL_GPIO_Init+0xdc>
 8001a4c:	2b11      	cmp	r3, #17
 8001a4e:	d01b      	beq.n	8001a88 <HAL_GPIO_Init+0x90>
          break;
 8001a50:	e043      	b.n	8001ada <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a52:	4a89      	ldr	r2, [pc, #548]	; (8001c78 <HAL_GPIO_Init+0x280>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d026      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
 8001a58:	4a87      	ldr	r2, [pc, #540]	; (8001c78 <HAL_GPIO_Init+0x280>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d806      	bhi.n	8001a6c <HAL_GPIO_Init+0x74>
 8001a5e:	4a87      	ldr	r2, [pc, #540]	; (8001c7c <HAL_GPIO_Init+0x284>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d020      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
 8001a64:	4a86      	ldr	r2, [pc, #536]	; (8001c80 <HAL_GPIO_Init+0x288>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01d      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
          break;
 8001a6a:	e036      	b.n	8001ada <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a6c:	4a85      	ldr	r2, [pc, #532]	; (8001c84 <HAL_GPIO_Init+0x28c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d019      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
 8001a72:	4a85      	ldr	r2, [pc, #532]	; (8001c88 <HAL_GPIO_Init+0x290>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d016      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
 8001a78:	4a84      	ldr	r2, [pc, #528]	; (8001c8c <HAL_GPIO_Init+0x294>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
          break;
 8001a7e:	e02c      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	623b      	str	r3, [r7, #32]
          break;
 8001a86:	e028      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	623b      	str	r3, [r7, #32]
          break;
 8001a90:	e023      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	3308      	adds	r3, #8
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e01e      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	330c      	adds	r3, #12
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e019      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d102      	bne.n	8001ab4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	623b      	str	r3, [r7, #32]
          break;
 8001ab2:	e012      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001abc:	2308      	movs	r3, #8
 8001abe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	611a      	str	r2, [r3, #16]
          break;
 8001ac6:	e008      	b.n	8001ada <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac8:	2308      	movs	r3, #8
 8001aca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	615a      	str	r2, [r3, #20]
          break;
 8001ad2:	e002      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
          break;
 8001ad8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2bff      	cmp	r3, #255	; 0xff
 8001ade:	d801      	bhi.n	8001ae4 <HAL_GPIO_Init+0xec>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	e001      	b.n	8001ae8 <HAL_GPIO_Init+0xf0>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2bff      	cmp	r3, #255	; 0xff
 8001aee:	d802      	bhi.n	8001af6 <HAL_GPIO_Init+0xfe>
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_Init+0x104>
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	3b08      	subs	r3, #8
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	210f      	movs	r1, #15
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	6a39      	ldr	r1, [r7, #32]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	431a      	orrs	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8096 	beq.w	8001c56 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b2a:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <HAL_GPIO_Init+0x298>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <HAL_GPIO_Init+0x298>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6193      	str	r3, [r2, #24]
 8001b36:	4b56      	ldr	r3, [pc, #344]	; (8001c90 <HAL_GPIO_Init+0x298>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b42:	4a54      	ldr	r2, [pc, #336]	; (8001c94 <HAL_GPIO_Init+0x29c>)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4013      	ands	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4b      	ldr	r2, [pc, #300]	; (8001c98 <HAL_GPIO_Init+0x2a0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x19e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4a      	ldr	r2, [pc, #296]	; (8001c9c <HAL_GPIO_Init+0x2a4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x19a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a49      	ldr	r2, [pc, #292]	; (8001ca0 <HAL_GPIO_Init+0x2a8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x196>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a48      	ldr	r2, [pc, #288]	; (8001ca4 <HAL_GPIO_Init+0x2ac>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x192>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x1a0>
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	e004      	b.n	8001b98 <HAL_GPIO_Init+0x1a0>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e002      	b.n	8001b98 <HAL_GPIO_Init+0x1a0>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_GPIO_Init+0x1a0>
 8001b96:	2300      	movs	r3, #0
 8001b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9a:	f002 0203 	and.w	r2, r2, #3
 8001b9e:	0092      	lsls	r2, r2, #2
 8001ba0:	4093      	lsls	r3, r2
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ba8:	493a      	ldr	r1, [pc, #232]	; (8001c94 <HAL_GPIO_Init+0x29c>)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bc2:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4938      	ldr	r1, [pc, #224]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
 8001bce:	e006      	b.n	8001bde <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bd0:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	4933      	ldr	r1, [pc, #204]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bea:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	492e      	ldr	r1, [pc, #184]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
 8001bf6:	e006      	b.n	8001c06 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	4929      	ldr	r1, [pc, #164]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c12:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	4924      	ldr	r1, [pc, #144]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
 8001c1e:	e006      	b.n	8001c2e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	491f      	ldr	r1, [pc, #124]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	491a      	ldr	r1, [pc, #104]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60cb      	str	r3, [r1, #12]
 8001c46:	e006      	b.n	8001c56 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4915      	ldr	r1, [pc, #84]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	3301      	adds	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f47f aed0 	bne.w	8001a0c <HAL_GPIO_Init+0x14>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	372c      	adds	r7, #44	; 0x2c
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	10210000 	.word	0x10210000
 8001c7c:	10110000 	.word	0x10110000
 8001c80:	10120000 	.word	0x10120000
 8001c84:	10310000 	.word	0x10310000
 8001c88:	10320000 	.word	0x10320000
 8001c8c:	10220000 	.word	0x10220000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010000 	.word	0x40010000
 8001c98:	40010800 	.word	0x40010800
 8001c9c:	40010c00 	.word	0x40010c00
 8001ca0:	40011000 	.word	0x40011000
 8001ca4:	40011400 	.word	0x40011400
 8001ca8:	40010400 	.word	0x40010400

08001cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cbc:	787b      	ldrb	r3, [r7, #1]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cc8:	e003      	b.n	8001cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	041a      	lsls	r2, r3, #16
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cde:	b08b      	sub	sp, #44	; 0x2c
 8001ce0:	af06      	add	r7, sp, #24
 8001ce2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0d3      	b.n	8001e96 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f004 fdca 	bl	800689c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 f954 	bl	8003fc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	687e      	ldr	r6, [r7, #4]
 8001d22:	466d      	mov	r5, sp
 8001d24:	f106 0410 	add.w	r4, r6, #16
 8001d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	602b      	str	r3, [r5, #0]
 8001d30:	1d33      	adds	r3, r6, #4
 8001d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d34:	6838      	ldr	r0, [r7, #0]
 8001d36:	f002 f91d 	bl	8003f74 <USB_CoreInit>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0a4      	b.n	8001e96 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f002 f951 	bl	8003ffa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e035      	b.n	8001dca <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	015b      	lsls	r3, r3, #5
 8001d64:	4413      	add	r3, r2
 8001d66:	3329      	adds	r3, #41	; 0x29
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	015b      	lsls	r3, r3, #5
 8001d72:	4413      	add	r3, r2
 8001d74:	3328      	adds	r3, #40	; 0x28
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	b291      	uxth	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	015b      	lsls	r3, r3, #5
 8001d84:	4413      	add	r3, r2
 8001d86:	3336      	adds	r3, #54	; 0x36
 8001d88:	460a      	mov	r2, r1
 8001d8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	015b      	lsls	r3, r3, #5
 8001d92:	4413      	add	r3, r2
 8001d94:	332b      	adds	r3, #43	; 0x2b
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	015b      	lsls	r3, r3, #5
 8001da0:	4413      	add	r3, r2
 8001da2:	3338      	adds	r3, #56	; 0x38
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	015b      	lsls	r3, r3, #5
 8001dae:	4413      	add	r3, r2
 8001db0:	333c      	adds	r3, #60	; 0x3c
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	3302      	adds	r3, #2
 8001dbc:	015b      	lsls	r3, r3, #5
 8001dbe:	4413      	add	r3, r2
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3c4      	bcc.n	8001d5e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e031      	b.n	8001e3e <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	015b      	lsls	r3, r3, #5
 8001de0:	4413      	add	r3, r2
 8001de2:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	015b      	lsls	r3, r3, #5
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	015b      	lsls	r3, r3, #5
 8001e00:	4413      	add	r3, r2
 8001e02:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	015b      	lsls	r3, r3, #5
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	015b      	lsls	r3, r3, #5
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	330a      	adds	r3, #10
 8001e30:	015b      	lsls	r3, r3, #5
 8001e32:	4413      	add	r3, r2
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3c8      	bcc.n	8001dda <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	687e      	ldr	r6, [r7, #4]
 8001e50:	466d      	mov	r5, sp
 8001e52:	f106 0410 	add.w	r4, r6, #16
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	602b      	str	r3, [r5, #0]
 8001e5e:	1d33      	adds	r3, r6, #4
 8001e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e62:	6838      	ldr	r0, [r7, #0]
 8001e64:	f002 f8d5 	bl	8004012 <USB_DevInit>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2202      	movs	r2, #2
 8001e72:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00d      	b.n	8001e96 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 f913 	bl	80050ba <USB_DevDisconnect>

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_PCD_Start+0x16>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e016      	b.n	8001ee2 <HAL_PCD_Start+0x44>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f004 ff2d 	bl	8006d1e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 f8ec 	bl	80050a6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 f85e 	bl	8003f94 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 f8e9 	bl	80050ce <USB_ReadInterrupts>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f06:	d102      	bne.n	8001f0e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fadf 	bl	80024cc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 f8db 	bl	80050ce <USB_ReadInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d112      	bne.n	8001f4a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f36:	b292      	uxth	r2, r2
 8001f38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f004 fd22 	bl	8006986 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f42:	2100      	movs	r1, #0
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8de 	bl	8002106 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 f8bd 	bl	80050ce <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f5e:	d10b      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f72:	b292      	uxth	r2, r2
 8001f74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 f8a6 	bl	80050ce <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f003 f88f 	bl	80050ce <USB_ReadInterrupts>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fba:	d126      	bne.n	800200a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0204 	bic.w	r2, r2, #4
 8001fce:	b292      	uxth	r2, r2
 8001fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0208 	bic.w	r2, r2, #8
 8001fe6:	b292      	uxth	r2, r2
 8001fe8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f004 fd03 	bl	80069f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002004:	b292      	uxth	r2, r2
 8002006:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f003 f85d 	bl	80050ce <USB_ReadInterrupts>
 8002014:	4603      	mov	r3, r0
 8002016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800201e:	d13d      	bne.n	800209c <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002028:	b29a      	uxth	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0208 	orr.w	r2, r2, #8
 8002032:	b292      	uxth	r2, r2
 8002034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002040:	b29a      	uxth	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204a:	b292      	uxth	r2, r2
 800204c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0204 	orr.w	r2, r2, #4
 8002062:	b292      	uxth	r2, r2
 8002064:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f003 f82e 	bl	80050ce <USB_ReadInterrupts>
 8002072:	4603      	mov	r3, r0
 8002074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800207c:	d10b      	bne.n	8002096 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002086:	b29a      	uxth	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002090:	b292      	uxth	r2, r2
 8002092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f004 fc94 	bl	80069c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f003 f814 	bl	80050ce <USB_ReadInterrupts>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b0:	d10e      	bne.n	80020d0 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020c4:	b292      	uxth	r2, r2
 80020c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f004 fc4d 	bl	800696a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f002 fffa 	bl	80050ce <USB_ReadInterrupts>
 80020da:	4603      	mov	r3, r0
 80020dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e4:	d10b      	bne.n	80020fe <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020f8:	b292      	uxth	r2, r2
 80020fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_PCD_SetAddress+0x1a>
 800211c:	2302      	movs	r3, #2
 800211e:	e013      	b.n	8002148 <HAL_PCD_SetAddress+0x42>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f002 ffa1 	bl	8005080 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	4608      	mov	r0, r1
 800215a:	4611      	mov	r1, r2
 800215c:	461a      	mov	r2, r3
 800215e:	4603      	mov	r3, r0
 8002160:	70fb      	strb	r3, [r7, #3]
 8002162:	460b      	mov	r3, r1
 8002164:	803b      	strh	r3, [r7, #0]
 8002166:	4613      	mov	r3, r2
 8002168:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800216e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002172:	2b00      	cmp	r3, #0
 8002174:	da0b      	bge.n	800218e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	015b      	lsls	r3, r3, #5
 800217e:	3328      	adds	r3, #40	; 0x28
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	705a      	strb	r2, [r3, #1]
 800218c:	e00b      	b.n	80021a6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	015b      	lsls	r3, r3, #5
 8002196:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021b2:	883a      	ldrh	r2, [r7, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	78ba      	ldrb	r2, [r7, #2]
 80021bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	785b      	ldrb	r3, [r3, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021d0:	78bb      	ldrb	r3, [r7, #2]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d102      	bne.n	80021dc <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_PCD_EP_Open+0x9a>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e00e      	b.n	8002208 <HAL_PCD_EP_Open+0xb8>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68f9      	ldr	r1, [r7, #12]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 ff2f 	bl	800405c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002206:	7afb      	ldrb	r3, [r7, #11]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800221c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002220:	2b00      	cmp	r3, #0
 8002222:	da0b      	bge.n	800223c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	015b      	lsls	r3, r3, #5
 800222c:	3328      	adds	r3, #40	; 0x28
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	705a      	strb	r2, [r3, #1]
 800223a:	e00b      	b.n	8002254 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	015b      	lsls	r3, r3, #5
 8002244:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	b2da      	uxtb	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_PCD_EP_Close+0x5e>
 800226a:	2302      	movs	r3, #2
 800226c:	e00e      	b.n	800228c <HAL_PCD_EP_Close+0x7c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68f9      	ldr	r1, [r7, #12]
 800227c:	4618      	mov	r0, r3
 800227e:	f002 f9db 	bl	8004638 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	460b      	mov	r3, r1
 80022a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022a4:	7afb      	ldrb	r3, [r7, #11]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	015b      	lsls	r3, r3, #5
 80022ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2200      	movs	r2, #0
 80022c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2200      	movs	r2, #0
 80022cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ce:	7afb      	ldrb	r3, [r7, #11]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022da:	7afb      	ldrb	r3, [r7, #11]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d106      	bne.n	80022f2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6979      	ldr	r1, [r7, #20]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f002 fb3a 	bl	8004964 <USB_EPStartXfer>
 80022f0:	e005      	b.n	80022fe <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6979      	ldr	r1, [r7, #20]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 fb33 	bl	8004964 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	460b      	mov	r3, r1
 8002316:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002318:	7afb      	ldrb	r3, [r7, #11]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	015b      	lsls	r3, r3, #5
 8002320:	3328      	adds	r3, #40	; 0x28
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4413      	add	r3, r2
 8002326:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2201      	movs	r2, #1
 800233e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002340:	7afb      	ldrb	r3, [r7, #11]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	b2da      	uxtb	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800234c:	7afb      	ldrb	r3, [r7, #11]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6979      	ldr	r1, [r7, #20]
 800235c:	4618      	mov	r0, r3
 800235e:	f002 fb01 	bl	8004964 <USB_EPStartXfer>
 8002362:	e005      	b.n	8002370 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6979      	ldr	r1, [r7, #20]
 800236a:	4618      	mov	r0, r3
 800236c:	f002 fafa 	bl	8004964 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 0207 	and.w	r2, r3, #7
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	d901      	bls.n	8002398 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e046      	b.n	8002426 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da0b      	bge.n	80023b8 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	015b      	lsls	r3, r3, #5
 80023a8:	3328      	adds	r3, #40	; 0x28
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	705a      	strb	r2, [r3, #1]
 80023b6:	e009      	b.n	80023cc <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	015b      	lsls	r3, r3, #5
 80023bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_PCD_EP_SetStall+0x72>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e01c      	b.n	8002426 <HAL_PCD_EP_SetStall+0xac>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68f9      	ldr	r1, [r7, #12]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 fd6a 	bl	8004ed4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	2b00      	cmp	r3, #0
 8002408:	d108      	bne.n	800241c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002414:	4619      	mov	r1, r3
 8002416:	4610      	mov	r0, r2
 8002418:	f002 fe68 	bl	80050ec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 020f 	and.w	r2, r3, #15
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	d901      	bls.n	800244c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e03a      	b.n	80024c2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800244c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002450:	2b00      	cmp	r3, #0
 8002452:	da0b      	bge.n	800246c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	015b      	lsls	r3, r3, #5
 800245c:	3328      	adds	r3, #40	; 0x28
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	705a      	strb	r2, [r3, #1]
 800246a:	e00b      	b.n	8002484 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	015b      	lsls	r3, r3, #5
 8002474:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_PCD_EP_ClrStall+0x76>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e00e      	b.n	80024c2 <HAL_PCD_EP_ClrStall+0x94>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68f9      	ldr	r1, [r7, #12]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 fd50 	bl	8004f58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024d4:	e282      	b.n	80029dc <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024de:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024e0:	8afb      	ldrh	r3, [r7, #22]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80024ea:	7d7b      	ldrb	r3, [r7, #21]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f040 8142 	bne.w	8002776 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024f2:	8afb      	ldrh	r3, [r7, #22]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d151      	bne.n	80025a0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250c:	b29c      	uxth	r4, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800251a:	b29b      	uxth	r3, r3
 800251c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3328      	adds	r3, #40	; 0x28
 8002522:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252c:	b29b      	uxth	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	3302      	adds	r3, #2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	4413      	add	r3, r2
 8002542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	441a      	add	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800255e:	2100      	movs	r1, #0
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f004 f9eb 	bl	800693c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8234 	beq.w	80029dc <PCD_EP_ISR_Handler+0x510>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f040 822f 	bne.w	80029dc <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800258a:	b2da      	uxtb	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	b292      	uxth	r2, r2
 8002592:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800259e:	e21d      	b.n	80029dc <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025a6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80025b0:	8a7b      	ldrh	r3, [r7, #18]
 80025b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d033      	beq.n	8002622 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	3306      	adds	r3, #6
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f002 fdc6 	bl	800518a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29a      	uxth	r2, r3
 8002606:	f640 738f 	movw	r3, #3983	; 0xf8f
 800260a:	4013      	ands	r3, r2
 800260c:	b29c      	uxth	r4, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002616:	b292      	uxth	r2, r2
 8002618:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f004 f964 	bl	80068e8 <HAL_PCD_SetupStageCallback>
 8002620:	e1dc      	b.n	80029dc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002622:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f280 81d8 	bge.w	80029dc <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	b29a      	uxth	r2, r3
 8002634:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002638:	4013      	ands	r3, r2
 800263a:	b29c      	uxth	r4, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002644:	b292      	uxth	r2, r2
 8002646:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002650:	b29b      	uxth	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	3306      	adds	r3, #6
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	4413      	add	r3, r2
 8002666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d019      	beq.n	80026b0 <PCD_EP_ISR_Handler+0x1e4>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6959      	ldr	r1, [r3, #20]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002694:	b29b      	uxth	r3, r3
 8002696:	f002 fd78 	bl	800518a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	441a      	add	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026a8:	2100      	movs	r1, #0
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f004 f92e 	bl	800690c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461c      	mov	r4, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026be:	b29b      	uxth	r3, r3
 80026c0:	441c      	add	r4, r3
 80026c2:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80026c6:	461c      	mov	r4, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10e      	bne.n	80026ee <PCD_EP_ISR_Handler+0x222>
 80026d0:	8823      	ldrh	r3, [r4, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026d8:	b29b      	uxth	r3, r3
 80026da:	8023      	strh	r3, [r4, #0]
 80026dc:	8823      	ldrh	r3, [r4, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	8023      	strh	r3, [r4, #0]
 80026ec:	e02d      	b.n	800274a <PCD_EP_ISR_Handler+0x27e>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b3e      	cmp	r3, #62	; 0x3e
 80026f4:	d812      	bhi.n	800271c <PCD_EP_ISR_Handler+0x250>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <PCD_EP_ISR_Handler+0x244>
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	3301      	adds	r3, #1
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	b29b      	uxth	r3, r3
 8002714:	029b      	lsls	r3, r3, #10
 8002716:	b29b      	uxth	r3, r3
 8002718:	8023      	strh	r3, [r4, #0]
 800271a:	e016      	b.n	800274a <PCD_EP_ISR_Handler+0x27e>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	61bb      	str	r3, [r7, #24]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <PCD_EP_ISR_Handler+0x26a>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	3b01      	subs	r3, #1
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	b29b      	uxth	r3, r3
 800273a:	029b      	lsls	r3, r3, #10
 800273c:	b29b      	uxth	r3, r3
 800273e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002746:	b29b      	uxth	r3, r3
 8002748:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	b29c      	uxth	r4, r3
 800275c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002760:	b29c      	uxth	r4, r3
 8002762:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002766:	b29c      	uxth	r4, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4ba2      	ldr	r3, [pc, #648]	; (80029f8 <PCD_EP_ISR_Handler+0x52c>)
 800276e:	4323      	orrs	r3, r4
 8002770:	b29b      	uxth	r3, r3
 8002772:	8013      	strh	r3, [r2, #0]
 8002774:	e132      	b.n	80029dc <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	7d7b      	ldrb	r3, [r7, #21]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002786:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f280 80d1 	bge.w	8002932 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	7d7b      	ldrb	r3, [r7, #21]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027a4:	4013      	ands	r3, r2
 80027a6:	b29c      	uxth	r4, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	7d7b      	ldrb	r3, [r7, #21]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80027b8:	b292      	uxth	r2, r2
 80027ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027bc:	7d7b      	ldrb	r3, [r7, #21]
 80027be:	015b      	lsls	r3, r3, #5
 80027c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	7b1b      	ldrb	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d121      	bne.n	8002816 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	3306      	adds	r3, #6
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fa:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80027fc:	8bfb      	ldrh	r3, [r7, #30]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d072      	beq.n	80028e8 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6959      	ldr	r1, [r3, #20]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	88da      	ldrh	r2, [r3, #6]
 800280e:	8bfb      	ldrh	r3, [r7, #30]
 8002810:	f002 fcbb 	bl	800518a <USB_ReadPMA>
 8002814:	e068      	b.n	80028e8 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d021      	beq.n	8002874 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002838:	b29b      	uxth	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	3302      	adds	r3, #2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	4413      	add	r3, r2
 800284e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002858:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800285a:	8bfb      	ldrh	r3, [r7, #30]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d02a      	beq.n	80028b6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6959      	ldr	r1, [r3, #20]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	891a      	ldrh	r2, [r3, #8]
 800286c:	8bfb      	ldrh	r3, [r7, #30]
 800286e:	f002 fc8c 	bl	800518a <USB_ReadPMA>
 8002872:	e020      	b.n	80028b6 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800287c:	b29b      	uxth	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	3306      	adds	r3, #6
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800289c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800289e:	8bfb      	ldrh	r3, [r7, #30]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6959      	ldr	r1, [r3, #20]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	895a      	ldrh	r2, [r3, #10]
 80028b0:	8bfb      	ldrh	r3, [r7, #30]
 80028b2:	f002 fc6a 	bl	800518a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d0:	b29c      	uxth	r4, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	441a      	add	r2, r3
 80028e0:	4b46      	ldr	r3, [pc, #280]	; (80029fc <PCD_EP_ISR_Handler+0x530>)
 80028e2:	4323      	orrs	r3, r4
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	8bfb      	ldrh	r3, [r7, #30]
 80028ee:	441a      	add	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	8bfb      	ldrh	r3, [r7, #30]
 80028fa:	441a      	add	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d004      	beq.n	8002912 <PCD_EP_ISR_Handler+0x446>
 8002908:	8bfa      	ldrh	r2, [r7, #30]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	429a      	cmp	r2, r3
 8002910:	d206      	bcs.n	8002920 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f003 fff7 	bl	800690c <HAL_PCD_DataOutStageCallback>
 800291e:	e008      	b.n	8002932 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	7819      	ldrb	r1, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff fcb1 	bl	8002294 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002932:	8a7b      	ldrh	r3, [r7, #18]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	2b00      	cmp	r3, #0
 800293a:	d04f      	beq.n	80029dc <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 800293c:	7d7b      	ldrb	r3, [r7, #21]
 800293e:	015b      	lsls	r3, r3, #5
 8002940:	3328      	adds	r3, #40	; 0x28
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	7d7b      	ldrb	r3, [r7, #21]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800295c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002960:	b29c      	uxth	r4, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	7d7b      	ldrb	r3, [r7, #21]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	441a      	add	r2, r3
 800296e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002976:	b29b      	uxth	r3, r3
 8002978:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002982:	b29b      	uxth	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	3302      	adds	r3, #2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	441a      	add	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d106      	bne.n	80029ca <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f003 ffba 	bl	800693c <HAL_PCD_DataInStageCallback>
 80029c8:	e008      	b.n	80029dc <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	7819      	ldrb	r1, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff fc96 	bl	8002308 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	b21b      	sxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f6ff ad74 	blt.w	80024d6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3724      	adds	r7, #36	; 0x24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	ffff8080 	.word	0xffff8080
 80029fc:	ffff80c0 	.word	0xffff80c0

08002a00 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	817b      	strh	r3, [r7, #10]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a12:	897b      	ldrh	r3, [r7, #10]
 8002a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a1e:	897b      	ldrh	r3, [r7, #10]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	015b      	lsls	r3, r3, #5
 8002a26:	3328      	adds	r3, #40	; 0x28
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e006      	b.n	8002a3e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a30:	897b      	ldrh	r3, [r7, #10]
 8002a32:	015b      	lsls	r3, r3, #5
 8002a34:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a3e:	893b      	ldrh	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d107      	bne.n	8002a54 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2200      	movs	r2, #0
 8002a48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	80da      	strh	r2, [r3, #6]
 8002a52:	e00b      	b.n	8002a6c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2201      	movs	r2, #1
 8002a58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e26c      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8087 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a98:	4b92      	ldr	r3, [pc, #584]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d00c      	beq.n	8002abe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aa4:	4b8f      	ldr	r3, [pc, #572]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d112      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x5e>
 8002ab0:	4b8c      	ldr	r3, [pc, #560]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abc:	d10b      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abe:	4b89      	ldr	r3, [pc, #548]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d06c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x12c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d168      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e246      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x76>
 8002ae0:	4b80      	ldr	r3, [pc, #512]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a7f      	ldr	r2, [pc, #508]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	e02e      	b.n	8002b4c <HAL_RCC_OscConfig+0xd4>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x98>
 8002af6:	4b7b      	ldr	r3, [pc, #492]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7a      	ldr	r2, [pc, #488]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b78      	ldr	r3, [pc, #480]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a77      	ldr	r2, [pc, #476]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e01d      	b.n	8002b4c <HAL_RCC_OscConfig+0xd4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0xbc>
 8002b1a:	4b72      	ldr	r3, [pc, #456]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a71      	ldr	r2, [pc, #452]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b6f      	ldr	r3, [pc, #444]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a6e      	ldr	r2, [pc, #440]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0xd4>
 8002b34:	4b6b      	ldr	r3, [pc, #428]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a6a      	ldr	r2, [pc, #424]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a67      	ldr	r2, [pc, #412]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe fc28 	bl	80013a8 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7fe fc24 	bl	80013a8 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e1fa      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b5d      	ldr	r3, [pc, #372]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0xe4>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fc14 	bl	80013a8 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b84:	f7fe fc10 	bl	80013a8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e1e6      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	4b53      	ldr	r3, [pc, #332]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x10c>
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d063      	beq.n	8002c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb2:	4b4c      	ldr	r3, [pc, #304]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bbe:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d11c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x18c>
 8002bca:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d116      	bne.n	8002c04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd6:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_RCC_OscConfig+0x176>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e1ba      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bee:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4939      	ldr	r1, [pc, #228]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c02:	e03a      	b.n	8002c7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0c:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe fbc9 	bl	80013a8 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1a:	f7fe fbc5 	bl	80013a8 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e19b      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4927      	ldr	r1, [pc, #156]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
 8002c4c:	e015      	b.n	8002c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4e:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_RCC_OscConfig+0x270>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fe fba8 	bl	80013a8 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5c:	f7fe fba4 	bl	80013a8 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e17a      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d03a      	beq.n	8002cfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d019      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8e:	4b17      	ldr	r3, [pc, #92]	; (8002cec <HAL_RCC_OscConfig+0x274>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7fe fb88 	bl	80013a8 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9c:	f7fe fb84 	bl	80013a8 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e15a      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f000 faa8 	bl	8003210 <RCC_Delay>
 8002cc0:	e01c      	b.n	8002cfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_RCC_OscConfig+0x274>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fb6e 	bl	80013a8 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cce:	e00f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fb6a 	bl	80013a8 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d908      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e140      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	42420000 	.word	0x42420000
 8002cec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf0:	4b9e      	ldr	r3, [pc, #632]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e9      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80a6 	beq.w	8002e56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0e:	4b97      	ldr	r3, [pc, #604]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4b94      	ldr	r3, [pc, #592]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4a93      	ldr	r2, [pc, #588]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	61d3      	str	r3, [r2, #28]
 8002d26:	4b91      	ldr	r3, [pc, #580]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b8e      	ldr	r3, [pc, #568]	; (8002f70 <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b8b      	ldr	r3, [pc, #556]	; (8002f70 <HAL_RCC_OscConfig+0x4f8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a8a      	ldr	r2, [pc, #552]	; (8002f70 <HAL_RCC_OscConfig+0x4f8>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fb2b 	bl	80013a8 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7fe fb27 	bl	80013a8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b64      	cmp	r3, #100	; 0x64
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e0fd      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	4b81      	ldr	r3, [pc, #516]	; (8002f70 <HAL_RCC_OscConfig+0x4f8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x312>
 8002d7c:	4b7b      	ldr	r3, [pc, #492]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a7a      	ldr	r2, [pc, #488]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6213      	str	r3, [r2, #32]
 8002d88:	e02d      	b.n	8002de6 <HAL_RCC_OscConfig+0x36e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x334>
 8002d92:	4b76      	ldr	r3, [pc, #472]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a75      	ldr	r2, [pc, #468]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	6213      	str	r3, [r2, #32]
 8002d9e:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a72      	ldr	r2, [pc, #456]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	6213      	str	r3, [r2, #32]
 8002daa:	e01c      	b.n	8002de6 <HAL_RCC_OscConfig+0x36e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d10c      	bne.n	8002dce <HAL_RCC_OscConfig+0x356>
 8002db4:	4b6d      	ldr	r3, [pc, #436]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4a6c      	ldr	r2, [pc, #432]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002dba:	f043 0304 	orr.w	r3, r3, #4
 8002dbe:	6213      	str	r3, [r2, #32]
 8002dc0:	4b6a      	ldr	r3, [pc, #424]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4a69      	ldr	r2, [pc, #420]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6213      	str	r3, [r2, #32]
 8002dcc:	e00b      	b.n	8002de6 <HAL_RCC_OscConfig+0x36e>
 8002dce:	4b67      	ldr	r3, [pc, #412]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4a66      	ldr	r2, [pc, #408]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6213      	str	r3, [r2, #32]
 8002dda:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a63      	ldr	r2, [pc, #396]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d015      	beq.n	8002e1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dee:	f7fe fadb 	bl	80013a8 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7fe fad7 	bl	80013a8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0ab      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0c:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0ee      	beq.n	8002df6 <HAL_RCC_OscConfig+0x37e>
 8002e18:	e014      	b.n	8002e44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fac5 	bl	80013a8 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe fac1 	bl	80013a8 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e095      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e38:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ee      	bne.n	8002e22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d105      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4a:	4b48      	ldr	r3, [pc, #288]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	4a47      	ldr	r2, [pc, #284]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8081 	beq.w	8002f62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e60:	4b42      	ldr	r3, [pc, #264]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d061      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d146      	bne.n	8002f02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_RCC_OscConfig+0x4fc>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fa95 	bl	80013a8 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e82:	f7fe fa91 	bl	80013a8 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e067      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e94:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea8:	d108      	bne.n	8002ebc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eaa:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	492d      	ldr	r1, [pc, #180]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a19      	ldr	r1, [r3, #32]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	4927      	ldr	r1, [pc, #156]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <HAL_RCC_OscConfig+0x4fc>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eda:	f7fe fa65 	bl	80013a8 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee2:	f7fe fa61 	bl	80013a8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e037      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x46a>
 8002f00:	e02f      	b.n	8002f62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HAL_RCC_OscConfig+0x4fc>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe fa4e 	bl	80013a8 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fe fa4a 	bl	80013a8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e020      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x498>
 8002f2e:	e018      	b.n	8002f62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e013      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_OscConfig+0x4f4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40007000 	.word	0x40007000
 8002f74:	42420060 	.word	0x42420060

08002f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0d0      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d910      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b67      	ldr	r3, [pc, #412]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 0207 	bic.w	r2, r3, #7
 8002fa2:	4965      	ldr	r1, [pc, #404]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b63      	ldr	r3, [pc, #396]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0b8      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd4:	4b59      	ldr	r3, [pc, #356]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fec:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ff6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff8:	4b50      	ldr	r3, [pc, #320]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	494d      	ldr	r1, [pc, #308]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d040      	beq.n	8003098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d115      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e07f      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e073      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e06b      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f023 0203 	bic.w	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4936      	ldr	r1, [pc, #216]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003068:	f7fe f99e 	bl	80013a8 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	e00a      	b.n	8003086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003070:	f7fe f99a 	bl	80013a8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e053      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 020c 	and.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	429a      	cmp	r2, r3
 8003096:	d1eb      	bne.n	8003070 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d210      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 0207 	bic.w	r2, r3, #7
 80030ae:	4922      	ldr	r1, [pc, #136]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e032      	b.n	800312e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4916      	ldr	r1, [pc, #88]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	490e      	ldr	r1, [pc, #56]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003106:	f000 f821 	bl	800314c <HAL_RCC_GetSysClockFreq>
 800310a:	4601      	mov	r1, r0
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	fa21 f303 	lsr.w	r3, r1, r3
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1cc>)
 8003120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1d0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe f8fc 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40022000 	.word	0x40022000
 800313c:	40021000 	.word	0x40021000
 8003140:	08007eec 	.word	0x08007eec
 8003144:	20000000 	.word	0x20000000
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	b490      	push	{r4, r7}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003152:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003154:	1d3c      	adds	r4, r7, #4
 8003156:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003158:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCC_GetSysClockFreq+0xb4>)
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b04      	cmp	r3, #4
 8003184:	d002      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x40>
 8003186:	2b08      	cmp	r3, #8
 8003188:	d003      	beq.n	8003192 <HAL_RCC_GetSysClockFreq+0x46>
 800318a:	e02d      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800318c:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <HAL_RCC_GetSysClockFreq+0xbc>)
 800318e:	623b      	str	r3, [r7, #32]
      break;
 8003190:	e02d      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	0c9b      	lsrs	r3, r3, #18
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800319e:	4413      	add	r3, r2
 80031a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	0c5b      	lsrs	r3, r3, #17
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031be:	4413      	add	r3, r2
 80031c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	4a0f      	ldr	r2, [pc, #60]	; (8003208 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031ca:	fb02 f203 	mul.w	r2, r2, r3
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
 80031d6:	e004      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <HAL_RCC_GetSysClockFreq+0xc0>)
 80031dc:	fb02 f303 	mul.w	r3, r2, r3
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	623b      	str	r3, [r7, #32]
      break;
 80031e6:	e002      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4b07      	ldr	r3, [pc, #28]	; (8003208 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031ea:	623b      	str	r3, [r7, #32]
      break;
 80031ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ee:	6a3b      	ldr	r3, [r7, #32]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3728      	adds	r7, #40	; 0x28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc90      	pop	{r4, r7}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	08007e90 	.word	0x08007e90
 8003200:	08007ea0 	.word	0x08007ea0
 8003204:	40021000 	.word	0x40021000
 8003208:	007a1200 	.word	0x007a1200
 800320c:	003d0900 	.word	0x003d0900

08003210 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <RCC_Delay+0x34>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <RCC_Delay+0x38>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0a5b      	lsrs	r3, r3, #9
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	fb02 f303 	mul.w	r3, r2, r3
 800322a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800322c:	bf00      	nop
  }
  while (Delay --);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1e5a      	subs	r2, r3, #1
 8003232:	60fa      	str	r2, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f9      	bne.n	800322c <RCC_Delay+0x1c>
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000000 	.word	0x20000000
 8003248:	10624dd3 	.word	0x10624dd3

0800324c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d07d      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003268:	2300      	movs	r3, #0
 800326a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326c:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10d      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003278:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	4a4b      	ldr	r2, [pc, #300]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003282:	61d3      	str	r3, [r2, #28]
 8003284:	4b49      	ldr	r3, [pc, #292]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003290:	2301      	movs	r3, #1
 8003292:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d118      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a0:	4b43      	ldr	r3, [pc, #268]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a42      	ldr	r2, [pc, #264]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ac:	f7fe f87c 	bl	80013a8 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	e008      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b4:	f7fe f878 	bl	80013a8 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e06d      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c6:	4b3a      	ldr	r3, [pc, #232]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032d2:	4b36      	ldr	r3, [pc, #216]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d02e      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d027      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032f0:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032fa:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003300:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003306:	4a29      	ldr	r2, [pc, #164]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d014      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fe f847 	bl	80013a8 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	e00a      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fe f843 	bl	80013a8 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e036      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ee      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4917      	ldr	r1, [pc, #92]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334e:	4313      	orrs	r3, r2
 8003350:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d105      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003358:	4b14      	ldr	r3, [pc, #80]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	4a13      	ldr	r2, [pc, #76]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003362:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	490b      	ldr	r1, [pc, #44]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	4904      	ldr	r1, [pc, #16]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40007000 	.word	0x40007000
 80033b4:	42420440 	.word	0x42420440

080033b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e053      	b.n	8003472 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d106      	bne.n	80033ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7fd fd05 	bl	8000df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2202      	movs	r2, #2
 80033ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003400:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	ea42 0103 	orr.w	r1, r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	0c1a      	lsrs	r2, r3, #16
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f002 0204 	and.w	r2, r2, #4
 8003450:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003460:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	4613      	mov	r3, r2
 8003488:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_SPI_Transmit_DMA+0x20>
 8003498:	2302      	movs	r3, #2
 800349a:	e093      	b.n	80035c4 <HAL_SPI_Transmit_DMA+0x148>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d002      	beq.n	80034b6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80034b0:	2302      	movs	r3, #2
 80034b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034b4:	e081      	b.n	80035ba <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_SPI_Transmit_DMA+0x46>
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034c6:	e078      	b.n	80035ba <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2203      	movs	r2, #3
 80034cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	88fa      	ldrh	r2, [r7, #6]
 80034e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	88fa      	ldrh	r2, [r7, #6]
 80034e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800350e:	d107      	bne.n	8003520 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800351e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003524:	4a29      	ldr	r2, [pc, #164]	; (80035cc <HAL_SPI_Transmit_DMA+0x150>)
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352c:	4a28      	ldr	r2, [pc, #160]	; (80035d0 <HAL_SPI_Transmit_DMA+0x154>)
 800352e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003534:	4a27      	ldr	r2, [pc, #156]	; (80035d4 <HAL_SPI_Transmit_DMA+0x158>)
 8003536:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353c:	2200      	movs	r2, #0
 800353e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	4619      	mov	r1, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	330c      	adds	r3, #12
 8003550:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003556:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003558:	f7fe f8ba 	bl	80016d0 <HAL_DMA_Start_IT>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	f043 0210 	orr.w	r2, r3, #16
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800357a:	e01e      	b.n	80035ba <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d007      	beq.n	800359a <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003598:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0220 	orr.w	r2, r2, #32
 80035a8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0202 	orr.w	r2, r2, #2
 80035b8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	080036b5 	.word	0x080036b5
 80035d0:	0800360f 	.word	0x0800360f
 80035d4:	080036d1 	.word	0x080036d1

080035d8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr

080035ea <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr

0800360e <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800361c:	f7fd fec4 	bl	80013a8 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b20      	cmp	r3, #32
 800362e:	d03b      	beq.n	80036a8 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0220 	bic.w	r2, r2, #32
 800363e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0202 	bic.w	r2, r2, #2
 800364e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	2164      	movs	r1, #100	; 0x64
 8003654:	6978      	ldr	r0, [r7, #20]
 8003656:	f000 f8c5 	bl	80037e4 <SPI_EndRxTxTransaction>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2200      	movs	r2, #0
 800368e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80036a0:	6978      	ldr	r0, [r7, #20]
 80036a2:	f7ff ffab 	bl	80035fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80036a6:	e002      	b.n	80036ae <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80036a8:	6978      	ldr	r0, [r7, #20]
 80036aa:	f7ff ff95 	bl	80035d8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7ff ff91 	bl	80035ea <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0203 	bic.w	r2, r2, #3
 80036ec:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	f043 0210 	orr.w	r2, r3, #16
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f7ff ff7a 	bl	80035fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003708:	bf00      	nop
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003720:	e04c      	b.n	80037bc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003728:	d048      	beq.n	80037bc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800372a:	f7fd fe3d 	bl	80013a8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d902      	bls.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x30>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d13d      	bne.n	80037bc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800374e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003758:	d111      	bne.n	800377e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003762:	d004      	beq.n	800376e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376c:	d107      	bne.n	800377e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800377c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003786:	d10f      	bne.n	80037a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e00f      	b.n	80037dc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4013      	ands	r3, r2
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d1a3      	bne.n	8003722 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2200      	movs	r2, #0
 80037f8:	2180      	movs	r1, #128	; 0x80
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f7ff ff88 	bl	8003710 <SPI_WaitFlagStateUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e000      	b.n	8003818 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e01d      	b.n	800386e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd fb98 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 fa3a 	bl	8003cd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a1a      	ldr	r2, [r3, #32]
 800388c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <HAL_TIM_Base_Stop+0x40>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a1a      	ldr	r2, [r3, #32]
 800389c:	f240 4344 	movw	r3, #1092	; 0x444
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d107      	bne.n	80038b6 <HAL_TIM_Base_Stop+0x40>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	d007      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b02      	cmp	r3, #2
 8003924:	d122      	bne.n	800396c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b02      	cmp	r3, #2
 8003932:	d11b      	bne.n	800396c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0202 	mvn.w	r2, #2
 800393c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f9a4 	bl	8003ca0 <HAL_TIM_IC_CaptureCallback>
 8003958:	e005      	b.n	8003966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f997 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f9a6 	bl	8003cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b04      	cmp	r3, #4
 8003978:	d122      	bne.n	80039c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b04      	cmp	r3, #4
 8003986:	d11b      	bne.n	80039c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0204 	mvn.w	r2, #4
 8003990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f97a 	bl	8003ca0 <HAL_TIM_IC_CaptureCallback>
 80039ac:	e005      	b.n	80039ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f96d 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f97c 	bl	8003cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d122      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d11b      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0208 	mvn.w	r2, #8
 80039e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2204      	movs	r2, #4
 80039ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f950 	bl	8003ca0 <HAL_TIM_IC_CaptureCallback>
 8003a00:	e005      	b.n	8003a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f943 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f952 	bl	8003cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d122      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d11b      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0210 	mvn.w	r2, #16
 8003a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f926 	bl	8003ca0 <HAL_TIM_IC_CaptureCallback>
 8003a54:	e005      	b.n	8003a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f919 	bl	8003c8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f928 	bl	8003cb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d10e      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d107      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0201 	mvn.w	r2, #1
 8003a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fc fd60 	bl	8000554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b80      	cmp	r3, #128	; 0x80
 8003aa0:	d10e      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aac:	2b80      	cmp	r3, #128	; 0x80
 8003aae:	d107      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fa51 	bl	8003f62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d10e      	bne.n	8003aec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b40      	cmp	r3, #64	; 0x40
 8003ada:	d107      	bne.n	8003aec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f8ec 	bl	8003cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d10e      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d107      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0220 	mvn.w	r2, #32
 8003b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa1c 	bl	8003f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_TIM_ConfigClockSource+0x18>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e0a6      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x166>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	d067      	beq.n	8003c40 <HAL_TIM_ConfigClockSource+0x120>
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d80b      	bhi.n	8003b8c <HAL_TIM_ConfigClockSource+0x6c>
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d073      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x140>
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d802      	bhi.n	8003b82 <HAL_TIM_ConfigClockSource+0x62>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d06f      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b80:	e078      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d06c      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x140>
 8003b86:	2b30      	cmp	r3, #48	; 0x30
 8003b88:	d06a      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b8a:	e073      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b8c:	2b70      	cmp	r3, #112	; 0x70
 8003b8e:	d00d      	beq.n	8003bac <HAL_TIM_ConfigClockSource+0x8c>
 8003b90:	2b70      	cmp	r3, #112	; 0x70
 8003b92:	d804      	bhi.n	8003b9e <HAL_TIM_ConfigClockSource+0x7e>
 8003b94:	2b50      	cmp	r3, #80	; 0x50
 8003b96:	d033      	beq.n	8003c00 <HAL_TIM_ConfigClockSource+0xe0>
 8003b98:	2b60      	cmp	r3, #96	; 0x60
 8003b9a:	d041      	beq.n	8003c20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b9c:	e06a      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba2:	d066      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x152>
 8003ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba8:	d017      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003baa:	e063      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6899      	ldr	r1, [r3, #8]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f000 f965 	bl	8003e8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	609a      	str	r2, [r3, #8]
      break;
 8003bd8:	e04c      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f000 f94e 	bl	8003e8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bfc:	609a      	str	r2, [r3, #8]
      break;
 8003bfe:	e039      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f000 f8c5 	bl	8003d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2150      	movs	r1, #80	; 0x50
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f91c 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 8003c1e:	e029      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f000 f8e3 	bl	8003df8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2160      	movs	r1, #96	; 0x60
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 f90c 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 8003c3e:	e019      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f000 f8a5 	bl	8003d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2140      	movs	r1, #64	; 0x40
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 f8fc 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 8003c5e:	e009      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	f000 f8f3 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 8003c70:	e000      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
	...

08003cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a29      	ldr	r2, [pc, #164]	; (8003d90 <TIM_Base_SetConfig+0xb8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00b      	beq.n	8003d08 <TIM_Base_SetConfig+0x30>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf6:	d007      	beq.n	8003d08 <TIM_Base_SetConfig+0x30>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <TIM_Base_SetConfig+0xbc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d003      	beq.n	8003d08 <TIM_Base_SetConfig+0x30>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a25      	ldr	r2, [pc, #148]	; (8003d98 <TIM_Base_SetConfig+0xc0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d108      	bne.n	8003d1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <TIM_Base_SetConfig+0xb8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00b      	beq.n	8003d3a <TIM_Base_SetConfig+0x62>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d28:	d007      	beq.n	8003d3a <TIM_Base_SetConfig+0x62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a19      	ldr	r2, [pc, #100]	; (8003d94 <TIM_Base_SetConfig+0xbc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d003      	beq.n	8003d3a <TIM_Base_SetConfig+0x62>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <TIM_Base_SetConfig+0xc0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d108      	bne.n	8003d4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <TIM_Base_SetConfig+0xb8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d103      	bne.n	8003d80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	615a      	str	r2, [r3, #20]
}
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800

08003d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f023 0201 	bic.w	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f023 030a 	bic.w	r3, r3, #10
 8003dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr

08003df8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f023 0210 	bic.w	r2, r3, #16
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	031b      	lsls	r3, r3, #12
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	621a      	str	r2, [r3, #32]
}
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f043 0307 	orr.w	r3, r3, #7
 8003e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	609a      	str	r2, [r3, #8]
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr

08003e8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b087      	sub	sp, #28
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	021a      	lsls	r2, r3, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	609a      	str	r2, [r3, #8]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e032      	b.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f18:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr

08003f74 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f74:	b084      	sub	sp, #16
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	f107 0014 	add.w	r0, r7, #20
 8003f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	b004      	add	sp, #16
 8003f92:	4770      	bx	lr

08003f94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f9c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003fa0:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	89fb      	ldrh	r3, [r7, #14]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fca:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003fce:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	b21a      	sxth	r2, r3
 8003fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	b21b      	sxth	r3, r3
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	b21b      	sxth	r3, r3
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004012:	b084      	sub	sp, #16
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	f107 0014 	add.w	r0, r7, #20
 8004020:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ffa5 	bl	8003f94 <USB_EnableGlobalInt>

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004056:	b004      	add	sp, #16
 8004058:	4770      	bx	lr
	...

0800405c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800405c:	b490      	push	{r4, r7}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29b      	uxth	r3, r3
 8004078:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800407c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004080:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	78db      	ldrb	r3, [r3, #3]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d819      	bhi.n	80040be <USB_ActivateEndpoint+0x62>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <USB_ActivateEndpoint+0x34>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040b5 	.word	0x080040b5
 8004098:	080040c5 	.word	0x080040c5
 800409c:	080040ab 	.word	0x080040ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040a0:	89bb      	ldrh	r3, [r7, #12]
 80040a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a6:	81bb      	strh	r3, [r7, #12]
      break;
 80040a8:	e00d      	b.n	80040c6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040aa:	89bb      	ldrh	r3, [r7, #12]
 80040ac:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80040b0:	81bb      	strh	r3, [r7, #12]
      break;
 80040b2:	e008      	b.n	80040c6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80040b4:	89bb      	ldrh	r3, [r7, #12]
 80040b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ba:	81bb      	strh	r3, [r7, #12]
      break;
 80040bc:	e003      	b.n	80040c6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
      break;
 80040c2:	e000      	b.n	80040c6 <USB_ActivateEndpoint+0x6a>
      break;
 80040c4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	441a      	add	r2, r3
 80040d0:	89bb      	ldrh	r3, [r7, #12]
 80040d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	4313      	orrs	r3, r2
 8004106:	b29c      	uxth	r4, r3
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	441a      	add	r2, r3
 8004112:	4b8a      	ldr	r3, [pc, #552]	; (800433c <USB_ActivateEndpoint+0x2e0>)
 8004114:	4323      	orrs	r3, r4
 8004116:	b29b      	uxth	r3, r3
 8004118:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	7b1b      	ldrb	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 8112 	bne.w	8004348 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	785b      	ldrb	r3, [r3, #1]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d067      	beq.n	80041fc <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800412c:	687c      	ldr	r4, [r7, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004134:	b29b      	uxth	r3, r3
 8004136:	441c      	add	r4, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	4423      	add	r3, r4
 8004140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004144:	461c      	mov	r4, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	88db      	ldrh	r3, [r3, #6]
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	b29b      	uxth	r3, r3
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	b29b      	uxth	r3, r3
 8004152:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29c      	uxth	r4, r3
 8004162:	4623      	mov	r3, r4
 8004164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d014      	beq.n	8004196 <USB_ActivateEndpoint+0x13a>
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	b29c      	uxth	r4, r3
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	441a      	add	r2, r3
 800418e:	4b6c      	ldr	r3, [pc, #432]	; (8004340 <USB_ActivateEndpoint+0x2e4>)
 8004190:	4323      	orrs	r3, r4
 8004192:	b29b      	uxth	r3, r3
 8004194:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	78db      	ldrb	r3, [r3, #3]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d018      	beq.n	80041d0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b4:	b29c      	uxth	r4, r3
 80041b6:	f084 0320 	eor.w	r3, r4, #32
 80041ba:	b29c      	uxth	r4, r3
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	4b5d      	ldr	r3, [pc, #372]	; (800433c <USB_ActivateEndpoint+0x2e0>)
 80041c8:	4323      	orrs	r3, r4
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	8013      	strh	r3, [r2, #0]
 80041ce:	e22b      	b.n	8004628 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e6:	b29c      	uxth	r4, r3
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	4b52      	ldr	r3, [pc, #328]	; (800433c <USB_ActivateEndpoint+0x2e0>)
 80041f4:	4323      	orrs	r3, r4
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]
 80041fa:	e215      	b.n	8004628 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041fc:	687c      	ldr	r4, [r7, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004204:	b29b      	uxth	r3, r3
 8004206:	441c      	add	r4, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	4423      	add	r3, r4
 8004210:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004214:	461c      	mov	r4, r3
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	88db      	ldrh	r3, [r3, #6]
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	b29b      	uxth	r3, r3
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	b29b      	uxth	r3, r3
 8004222:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004224:	687c      	ldr	r4, [r7, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422c:	b29b      	uxth	r3, r3
 800422e:	441c      	add	r4, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	4423      	add	r3, r4
 8004238:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800423c:	461c      	mov	r4, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10e      	bne.n	8004264 <USB_ActivateEndpoint+0x208>
 8004246:	8823      	ldrh	r3, [r4, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800424e:	b29b      	uxth	r3, r3
 8004250:	8023      	strh	r3, [r4, #0]
 8004252:	8823      	ldrh	r3, [r4, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800425a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800425e:	b29b      	uxth	r3, r3
 8004260:	8023      	strh	r3, [r4, #0]
 8004262:	e02d      	b.n	80042c0 <USB_ActivateEndpoint+0x264>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	2b3e      	cmp	r3, #62	; 0x3e
 800426a:	d812      	bhi.n	8004292 <USB_ActivateEndpoint+0x236>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <USB_ActivateEndpoint+0x22a>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	3301      	adds	r3, #1
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	b29b      	uxth	r3, r3
 800428a:	029b      	lsls	r3, r3, #10
 800428c:	b29b      	uxth	r3, r3
 800428e:	8023      	strh	r3, [r4, #0]
 8004290:	e016      	b.n	80042c0 <USB_ActivateEndpoint+0x264>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <USB_ActivateEndpoint+0x250>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	029b      	lsls	r3, r3, #10
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042bc:	b29b      	uxth	r3, r3
 80042be:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29c      	uxth	r4, r3
 80042ce:	4623      	mov	r3, r4
 80042d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d014      	beq.n	8004302 <USB_ActivateEndpoint+0x2a6>
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	b29c      	uxth	r4, r3
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	441a      	add	r2, r3
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <USB_ActivateEndpoint+0x2e8>)
 80042fc:	4323      	orrs	r3, r4
 80042fe:	b29b      	uxth	r3, r3
 8004300:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004318:	b29c      	uxth	r4, r3
 800431a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800431e:	b29c      	uxth	r4, r3
 8004320:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004324:	b29c      	uxth	r4, r3
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	441a      	add	r2, r3
 8004330:	4b02      	ldr	r3, [pc, #8]	; (800433c <USB_ActivateEndpoint+0x2e0>)
 8004332:	4323      	orrs	r3, r4
 8004334:	b29b      	uxth	r3, r3
 8004336:	8013      	strh	r3, [r2, #0]
 8004338:	e176      	b.n	8004628 <USB_ActivateEndpoint+0x5cc>
 800433a:	bf00      	nop
 800433c:	ffff8080 	.word	0xffff8080
 8004340:	ffff80c0 	.word	0xffff80c0
 8004344:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	b29c      	uxth	r4, r3
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	441a      	add	r2, r3
 800436a:	4b96      	ldr	r3, [pc, #600]	; (80045c4 <USB_ActivateEndpoint+0x568>)
 800436c:	4323      	orrs	r3, r4
 800436e:	b29b      	uxth	r3, r3
 8004370:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004372:	687c      	ldr	r4, [r7, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437a:	b29b      	uxth	r3, r3
 800437c:	441c      	add	r4, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4423      	add	r3, r4
 8004386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800438a:	461c      	mov	r4, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	891b      	ldrh	r3, [r3, #8]
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	b29b      	uxth	r3, r3
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	b29b      	uxth	r3, r3
 8004398:	8023      	strh	r3, [r4, #0]
 800439a:	687c      	ldr	r4, [r7, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	441c      	add	r4, r3
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	4423      	add	r3, r4
 80043ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80043b2:	461c      	mov	r4, r3
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	895b      	ldrh	r3, [r3, #10]
 80043b8:	085b      	lsrs	r3, r3, #1
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	b29b      	uxth	r3, r3
 80043c0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	785b      	ldrb	r3, [r3, #1]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 8088 	bne.w	80044dc <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29c      	uxth	r4, r3
 80043da:	4623      	mov	r3, r4
 80043dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d014      	beq.n	800440e <USB_ActivateEndpoint+0x3b2>
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fa:	b29c      	uxth	r4, r3
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	441a      	add	r2, r3
 8004406:	4b70      	ldr	r3, [pc, #448]	; (80045c8 <USB_ActivateEndpoint+0x56c>)
 8004408:	4323      	orrs	r3, r4
 800440a:	b29b      	uxth	r3, r3
 800440c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29c      	uxth	r4, r3
 800441c:	4623      	mov	r3, r4
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d014      	beq.n	8004450 <USB_ActivateEndpoint+0x3f4>
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	b29b      	uxth	r3, r3
 8004434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	b29c      	uxth	r4, r3
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	441a      	add	r2, r3
 8004448:	4b60      	ldr	r3, [pc, #384]	; (80045cc <USB_ActivateEndpoint+0x570>)
 800444a:	4323      	orrs	r3, r4
 800444c:	b29b      	uxth	r3, r3
 800444e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004466:	b29c      	uxth	r4, r3
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	441a      	add	r2, r3
 8004472:	4b56      	ldr	r3, [pc, #344]	; (80045cc <USB_ActivateEndpoint+0x570>)
 8004474:	4323      	orrs	r3, r4
 8004476:	b29b      	uxth	r3, r3
 8004478:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	b29c      	uxth	r4, r3
 8004492:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004496:	b29c      	uxth	r4, r3
 8004498:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800449c:	b29c      	uxth	r4, r3
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	441a      	add	r2, r3
 80044a8:	4b49      	ldr	r3, [pc, #292]	; (80045d0 <USB_ActivateEndpoint+0x574>)
 80044aa:	4323      	orrs	r3, r4
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c6:	b29c      	uxth	r4, r3
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	441a      	add	r2, r3
 80044d2:	4b3f      	ldr	r3, [pc, #252]	; (80045d0 <USB_ActivateEndpoint+0x574>)
 80044d4:	4323      	orrs	r3, r4
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	8013      	strh	r3, [r2, #0]
 80044da:	e0a5      	b.n	8004628 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29c      	uxth	r4, r3
 80044ea:	4623      	mov	r3, r4
 80044ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d014      	beq.n	800451e <USB_ActivateEndpoint+0x4c2>
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	b29c      	uxth	r4, r3
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	441a      	add	r2, r3
 8004516:	4b2c      	ldr	r3, [pc, #176]	; (80045c8 <USB_ActivateEndpoint+0x56c>)
 8004518:	4323      	orrs	r3, r4
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29c      	uxth	r4, r3
 800452c:	4623      	mov	r3, r4
 800452e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d014      	beq.n	8004560 <USB_ActivateEndpoint+0x504>
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454c:	b29c      	uxth	r4, r3
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	441a      	add	r2, r3
 8004558:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <USB_ActivateEndpoint+0x570>)
 800455a:	4323      	orrs	r3, r4
 800455c:	b29b      	uxth	r3, r3
 800455e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	b29c      	uxth	r4, r3
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	441a      	add	r2, r3
 8004582:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <USB_ActivateEndpoint+0x56c>)
 8004584:	4323      	orrs	r3, r4
 8004586:	b29b      	uxth	r3, r3
 8004588:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	78db      	ldrb	r3, [r3, #3]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d020      	beq.n	80045d4 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a8:	b29c      	uxth	r4, r3
 80045aa:	f084 0320 	eor.w	r3, r4, #32
 80045ae:	b29c      	uxth	r4, r3
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <USB_ActivateEndpoint+0x574>)
 80045bc:	4323      	orrs	r3, r4
 80045be:	b29b      	uxth	r3, r3
 80045c0:	8013      	strh	r3, [r2, #0]
 80045c2:	e01c      	b.n	80045fe <USB_ActivateEndpoint+0x5a2>
 80045c4:	ffff8180 	.word	0xffff8180
 80045c8:	ffffc080 	.word	0xffffc080
 80045cc:	ffff80c0 	.word	0xffff80c0
 80045d0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ea:	b29c      	uxth	r4, r3
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	441a      	add	r2, r3
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <USB_ActivateEndpoint+0x5d8>)
 80045f8:	4323      	orrs	r3, r4
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004614:	b29c      	uxth	r4, r3
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	441a      	add	r2, r3
 8004620:	4b04      	ldr	r3, [pc, #16]	; (8004634 <USB_ActivateEndpoint+0x5d8>)
 8004622:	4323      	orrs	r3, r4
 8004624:	b29b      	uxth	r3, r3
 8004626:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004628:	7bfb      	ldrb	r3, [r7, #15]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bc90      	pop	{r4, r7}
 8004632:	4770      	bx	lr
 8004634:	ffff8080 	.word	0xffff8080

08004638 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004638:	b490      	push	{r4, r7}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	7b1b      	ldrb	r3, [r3, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d171      	bne.n	800472e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	785b      	ldrb	r3, [r3, #1]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d036      	beq.n	80046c0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29c      	uxth	r4, r3
 8004660:	4623      	mov	r3, r4
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d014      	beq.n	8004694 <USB_DeactivateEndpoint+0x5c>
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800467c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004680:	b29c      	uxth	r4, r3
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	4b6b      	ldr	r3, [pc, #428]	; (800483c <USB_DeactivateEndpoint+0x204>)
 800468e:	4323      	orrs	r3, r4
 8004690:	b29b      	uxth	r3, r3
 8004692:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046aa:	b29c      	uxth	r4, r3
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	441a      	add	r2, r3
 80046b6:	4b62      	ldr	r3, [pc, #392]	; (8004840 <USB_DeactivateEndpoint+0x208>)
 80046b8:	4323      	orrs	r3, r4
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	8013      	strh	r3, [r2, #0]
 80046be:	e144      	b.n	800494a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29c      	uxth	r4, r3
 80046ce:	4623      	mov	r3, r4
 80046d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d014      	beq.n	8004702 <USB_DeactivateEndpoint+0xca>
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ee:	b29c      	uxth	r4, r3
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	4b52      	ldr	r3, [pc, #328]	; (8004844 <USB_DeactivateEndpoint+0x20c>)
 80046fc:	4323      	orrs	r3, r4
 80046fe:	b29b      	uxth	r3, r3
 8004700:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	b29c      	uxth	r4, r3
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	4b46      	ldr	r3, [pc, #280]	; (8004840 <USB_DeactivateEndpoint+0x208>)
 8004726:	4323      	orrs	r3, r4
 8004728:	b29b      	uxth	r3, r3
 800472a:	8013      	strh	r3, [r2, #0]
 800472c:	e10d      	b.n	800494a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 8088 	bne.w	8004848 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29c      	uxth	r4, r3
 8004746:	4623      	mov	r3, r4
 8004748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d014      	beq.n	800477a <USB_DeactivateEndpoint+0x142>
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	b29c      	uxth	r4, r3
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	441a      	add	r2, r3
 8004772:	4b34      	ldr	r3, [pc, #208]	; (8004844 <USB_DeactivateEndpoint+0x20c>)
 8004774:	4323      	orrs	r3, r4
 8004776:	b29b      	uxth	r3, r3
 8004778:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	b29c      	uxth	r4, r3
 8004788:	4623      	mov	r3, r4
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d014      	beq.n	80047bc <USB_DeactivateEndpoint+0x184>
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a8:	b29c      	uxth	r4, r3
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	441a      	add	r2, r3
 80047b4:	4b21      	ldr	r3, [pc, #132]	; (800483c <USB_DeactivateEndpoint+0x204>)
 80047b6:	4323      	orrs	r3, r4
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d2:	b29c      	uxth	r4, r3
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	4b17      	ldr	r3, [pc, #92]	; (800483c <USB_DeactivateEndpoint+0x204>)
 80047e0:	4323      	orrs	r3, r4
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fc:	b29c      	uxth	r4, r3
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <USB_DeactivateEndpoint+0x208>)
 800480a:	4323      	orrs	r3, r4
 800480c:	b29b      	uxth	r3, r3
 800480e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004826:	b29c      	uxth	r4, r3
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	4b03      	ldr	r3, [pc, #12]	; (8004840 <USB_DeactivateEndpoint+0x208>)
 8004834:	4323      	orrs	r3, r4
 8004836:	b29b      	uxth	r3, r3
 8004838:	8013      	strh	r3, [r2, #0]
 800483a:	e086      	b.n	800494a <USB_DeactivateEndpoint+0x312>
 800483c:	ffff80c0 	.word	0xffff80c0
 8004840:	ffff8080 	.word	0xffff8080
 8004844:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29c      	uxth	r4, r3
 8004856:	4623      	mov	r3, r4
 8004858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d014      	beq.n	800488a <USB_DeactivateEndpoint+0x252>
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	b29c      	uxth	r4, r3
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	441a      	add	r2, r3
 8004882:	4b35      	ldr	r3, [pc, #212]	; (8004958 <USB_DeactivateEndpoint+0x320>)
 8004884:	4323      	orrs	r3, r4
 8004886:	b29b      	uxth	r3, r3
 8004888:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29c      	uxth	r4, r3
 8004898:	4623      	mov	r3, r4
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d014      	beq.n	80048cc <USB_DeactivateEndpoint+0x294>
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b8:	b29c      	uxth	r4, r3
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	4b25      	ldr	r3, [pc, #148]	; (800495c <USB_DeactivateEndpoint+0x324>)
 80048c6:	4323      	orrs	r3, r4
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	b29c      	uxth	r4, r3
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	441a      	add	r2, r3
 80048ee:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <USB_DeactivateEndpoint+0x320>)
 80048f0:	4323      	orrs	r3, r4
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490c:	b29c      	uxth	r4, r3
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	441a      	add	r2, r3
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <USB_DeactivateEndpoint+0x328>)
 800491a:	4323      	orrs	r3, r4
 800491c:	b29b      	uxth	r3, r3
 800491e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	b29c      	uxth	r4, r3
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	441a      	add	r2, r3
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <USB_DeactivateEndpoint+0x328>)
 8004944:	4323      	orrs	r3, r4
 8004946:	b29b      	uxth	r3, r3
 8004948:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bc90      	pop	{r4, r7}
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	ffffc080 	.word	0xffffc080
 800495c:	ffff80c0 	.word	0xffff80c0
 8004960:	ffff8080 	.word	0xffff8080

08004964 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b08d      	sub	sp, #52	; 0x34
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	785b      	ldrb	r3, [r3, #1]
 8004972:	2b01      	cmp	r3, #1
 8004974:	f040 8160 	bne.w	8004c38 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	429a      	cmp	r2, r3
 8004982:	d909      	bls.n	8004998 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	1ad2      	subs	r2, r2, r3
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	619a      	str	r2, [r3, #24]
 8004996:	e005      	b.n	80049a4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2200      	movs	r2, #0
 80049a2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	7b1b      	ldrb	r3, [r3, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d119      	bne.n	80049e0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6959      	ldr	r1, [r3, #20]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	88da      	ldrh	r2, [r3, #6]
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fba2 	bl	8005102 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80049be:	687c      	ldr	r4, [r7, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	441c      	add	r4, r3
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	4423      	add	r3, r4
 80049d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049d6:	461c      	mov	r4, r3
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	b29b      	uxth	r3, r3
 80049dc:	8023      	strh	r3, [r4, #0]
 80049de:	e10f      	b.n	8004c00 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d065      	beq.n	8004ac2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049f6:	687c      	ldr	r4, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d148      	bne.n	8004a92 <USB_EPStartXfer+0x12e>
 8004a00:	687c      	ldr	r4, [r7, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	441c      	add	r4, r3
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	4423      	add	r3, r4
 8004a14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a18:	461c      	mov	r4, r3
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10e      	bne.n	8004a3e <USB_EPStartXfer+0xda>
 8004a20:	8823      	ldrh	r3, [r4, #0]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	8023      	strh	r3, [r4, #0]
 8004a2c:	8823      	ldrh	r3, [r4, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	8023      	strh	r3, [r4, #0]
 8004a3c:	e03d      	b.n	8004aba <USB_EPStartXfer+0x156>
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	2b3e      	cmp	r3, #62	; 0x3e
 8004a42:	d810      	bhi.n	8004a66 <USB_EPStartXfer+0x102>
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <USB_EPStartXfer+0xf6>
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	3301      	adds	r3, #1
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	029b      	lsls	r3, r3, #10
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	8023      	strh	r3, [r4, #0]
 8004a64:	e029      	b.n	8004aba <USB_EPStartXfer+0x156>
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d102      	bne.n	8004a7c <USB_EPStartXfer+0x118>
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	8023      	strh	r3, [r4, #0]
 8004a90:	e013      	b.n	8004aba <USB_EPStartXfer+0x156>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	785b      	ldrb	r3, [r3, #1]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d10f      	bne.n	8004aba <USB_EPStartXfer+0x156>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	441c      	add	r4, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	4423      	add	r3, r4
 8004aac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	895b      	ldrh	r3, [r3, #10]
 8004abe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ac0:	e063      	b.n	8004b8a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d148      	bne.n	8004b5c <USB_EPStartXfer+0x1f8>
 8004aca:	687c      	ldr	r4, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	441c      	add	r4, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	4423      	add	r3, r4
 8004ade:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ae2:	461c      	mov	r4, r3
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10e      	bne.n	8004b08 <USB_EPStartXfer+0x1a4>
 8004aea:	8823      	ldrh	r3, [r4, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8023      	strh	r3, [r4, #0]
 8004af6:	8823      	ldrh	r3, [r4, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	8023      	strh	r3, [r4, #0]
 8004b06:	e03d      	b.n	8004b84 <USB_EPStartXfer+0x220>
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b0c:	d810      	bhi.n	8004b30 <USB_EPStartXfer+0x1cc>
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	623b      	str	r3, [r7, #32]
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <USB_EPStartXfer+0x1c0>
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	3301      	adds	r3, #1
 8004b22:	623b      	str	r3, [r7, #32]
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	029b      	lsls	r3, r3, #10
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	8023      	strh	r3, [r4, #0]
 8004b2e:	e029      	b.n	8004b84 <USB_EPStartXfer+0x220>
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	623b      	str	r3, [r7, #32]
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <USB_EPStartXfer+0x1e2>
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	029b      	lsls	r3, r3, #10
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	8023      	strh	r3, [r4, #0]
 8004b5a:	e013      	b.n	8004b84 <USB_EPStartXfer+0x220>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	785b      	ldrb	r3, [r3, #1]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10f      	bne.n	8004b84 <USB_EPStartXfer+0x220>
 8004b64:	687c      	ldr	r4, [r7, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	441c      	add	r4, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	4423      	add	r3, r4
 8004b78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b7c:	461c      	mov	r4, r3
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	891b      	ldrh	r3, [r3, #8]
 8004b88:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6959      	ldr	r1, [r3, #20]
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fab4 	bl	8005102 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	785b      	ldrb	r3, [r3, #1]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d115      	bne.n	8004bce <USB_EPStartXfer+0x26a>
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb8:	b29c      	uxth	r4, r3
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	441a      	add	r2, r3
 8004bc4:	4b9a      	ldr	r3, [pc, #616]	; (8004e30 <USB_EPStartXfer+0x4cc>)
 8004bc6:	4323      	orrs	r3, r4
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8013      	strh	r3, [r2, #0]
 8004bcc:	e018      	b.n	8004c00 <USB_EPStartXfer+0x29c>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	785b      	ldrb	r3, [r3, #1]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d114      	bne.n	8004c00 <USB_EPStartXfer+0x29c>
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	b29c      	uxth	r4, r3
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	441a      	add	r2, r3
 8004bf8:	4b8e      	ldr	r3, [pc, #568]	; (8004e34 <USB_EPStartXfer+0x4d0>)
 8004bfa:	4323      	orrs	r3, r4
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c16:	b29c      	uxth	r4, r3
 8004c18:	f084 0310 	eor.w	r3, r4, #16
 8004c1c:	b29c      	uxth	r4, r3
 8004c1e:	f084 0320 	eor.w	r3, r4, #32
 8004c22:	b29c      	uxth	r4, r3
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	4b82      	ldr	r3, [pc, #520]	; (8004e38 <USB_EPStartXfer+0x4d4>)
 8004c30:	4323      	orrs	r3, r4
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	8013      	strh	r3, [r2, #0]
 8004c36:	e146      	b.n	8004ec6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d909      	bls.n	8004c58 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c50:	1ad2      	subs	r2, r2, r3
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	619a      	str	r2, [r3, #24]
 8004c56:	e005      	b.n	8004c64 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2200      	movs	r2, #0
 8004c62:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	7b1b      	ldrb	r3, [r3, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d148      	bne.n	8004cfe <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004c6c:	687c      	ldr	r4, [r7, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	441c      	add	r4, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	4423      	add	r3, r4
 8004c80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c84:	461c      	mov	r4, r3
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10e      	bne.n	8004caa <USB_EPStartXfer+0x346>
 8004c8c:	8823      	ldrh	r3, [r4, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8023      	strh	r3, [r4, #0]
 8004c98:	8823      	ldrh	r3, [r4, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	8023      	strh	r3, [r4, #0]
 8004ca8:	e0f2      	b.n	8004e90 <USB_EPStartXfer+0x52c>
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	2b3e      	cmp	r3, #62	; 0x3e
 8004cae:	d810      	bhi.n	8004cd2 <USB_EPStartXfer+0x36e>
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	085b      	lsrs	r3, r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <USB_EPStartXfer+0x362>
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	029b      	lsls	r3, r3, #10
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	8023      	strh	r3, [r4, #0]
 8004cd0:	e0de      	b.n	8004e90 <USB_EPStartXfer+0x52c>
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <USB_EPStartXfer+0x384>
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	029b      	lsls	r3, r3, #10
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8023      	strh	r3, [r4, #0]
 8004cfc:	e0c8      	b.n	8004e90 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	785b      	ldrb	r3, [r3, #1]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d148      	bne.n	8004d98 <USB_EPStartXfer+0x434>
 8004d06:	687c      	ldr	r4, [r7, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	441c      	add	r4, r3
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	4423      	add	r3, r4
 8004d1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d1e:	461c      	mov	r4, r3
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10e      	bne.n	8004d44 <USB_EPStartXfer+0x3e0>
 8004d26:	8823      	ldrh	r3, [r4, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	8023      	strh	r3, [r4, #0]
 8004d32:	8823      	ldrh	r3, [r4, #0]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8023      	strh	r3, [r4, #0]
 8004d42:	e03d      	b.n	8004dc0 <USB_EPStartXfer+0x45c>
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	2b3e      	cmp	r3, #62	; 0x3e
 8004d48:	d810      	bhi.n	8004d6c <USB_EPStartXfer+0x408>
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <USB_EPStartXfer+0x3fc>
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	61bb      	str	r3, [r7, #24]
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	029b      	lsls	r3, r3, #10
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	8023      	strh	r3, [r4, #0]
 8004d6a:	e029      	b.n	8004dc0 <USB_EPStartXfer+0x45c>
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <USB_EPStartXfer+0x41e>
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	029b      	lsls	r3, r3, #10
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	8023      	strh	r3, [r4, #0]
 8004d96:	e013      	b.n	8004dc0 <USB_EPStartXfer+0x45c>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	785b      	ldrb	r3, [r3, #1]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10f      	bne.n	8004dc0 <USB_EPStartXfer+0x45c>
 8004da0:	687c      	ldr	r4, [r7, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	441c      	add	r4, r3
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	4423      	add	r3, r4
 8004db4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004db8:	461c      	mov	r4, r3
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8023      	strh	r3, [r4, #0]
 8004dc0:	687c      	ldr	r4, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d14e      	bne.n	8004e68 <USB_EPStartXfer+0x504>
 8004dca:	687c      	ldr	r4, [r7, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	441c      	add	r4, r3
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	4423      	add	r3, r4
 8004dde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004de2:	461c      	mov	r4, r3
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10e      	bne.n	8004e08 <USB_EPStartXfer+0x4a4>
 8004dea:	8823      	ldrh	r3, [r4, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	8023      	strh	r3, [r4, #0]
 8004df6:	8823      	ldrh	r3, [r4, #0]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	8023      	strh	r3, [r4, #0]
 8004e06:	e043      	b.n	8004e90 <USB_EPStartXfer+0x52c>
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e0c:	d816      	bhi.n	8004e3c <USB_EPStartXfer+0x4d8>
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <USB_EPStartXfer+0x4c0>
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	3301      	adds	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	029b      	lsls	r3, r3, #10
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8023      	strh	r3, [r4, #0]
 8004e2e:	e02f      	b.n	8004e90 <USB_EPStartXfer+0x52c>
 8004e30:	ffff80c0 	.word	0xffff80c0
 8004e34:	ffffc080 	.word	0xffffc080
 8004e38:	ffff8080 	.word	0xffff8080
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <USB_EPStartXfer+0x4ee>
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	029b      	lsls	r3, r3, #10
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8023      	strh	r3, [r4, #0]
 8004e66:	e013      	b.n	8004e90 <USB_EPStartXfer+0x52c>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d10f      	bne.n	8004e90 <USB_EPStartXfer+0x52c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	441c      	add	r4, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	4423      	add	r3, r4
 8004e82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	b29c      	uxth	r4, r3
 8004ea8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004eac:	b29c      	uxth	r4, r3
 8004eae:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004eb2:	b29c      	uxth	r4, r3
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	441a      	add	r2, r3
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <USB_EPStartXfer+0x56c>)
 8004ec0:	4323      	orrs	r3, r4
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3734      	adds	r7, #52	; 0x34
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd90      	pop	{r4, r7, pc}
 8004ed0:	ffff8080 	.word	0xffff8080

08004ed4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ed4:	b490      	push	{r4, r7}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	785b      	ldrb	r3, [r3, #1]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d018      	beq.n	8004f18 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efc:	b29c      	uxth	r4, r3
 8004efe:	f084 0310 	eor.w	r3, r4, #16
 8004f02:	b29c      	uxth	r4, r3
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	441a      	add	r2, r3
 8004f0e:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <USB_EPSetStall+0x80>)
 8004f10:	4323      	orrs	r3, r4
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	8013      	strh	r3, [r2, #0]
 8004f16:	e017      	b.n	8004f48 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	b29c      	uxth	r4, r3
 8004f30:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f34:	b29c      	uxth	r4, r3
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	441a      	add	r2, r3
 8004f40:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <USB_EPSetStall+0x80>)
 8004f42:	4323      	orrs	r3, r4
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc90      	pop	{r4, r7}
 8004f52:	4770      	bx	lr
 8004f54:	ffff8080 	.word	0xffff8080

08004f58 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f58:	b490      	push	{r4, r7}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	7b1b      	ldrb	r3, [r3, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d17d      	bne.n	8005066 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	785b      	ldrb	r3, [r3, #1]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d03d      	beq.n	8004fee <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29c      	uxth	r4, r3
 8004f80:	4623      	mov	r3, r4
 8004f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d014      	beq.n	8004fb4 <USB_EPClearStall+0x5c>
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa0:	b29c      	uxth	r4, r3
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	4b31      	ldr	r3, [pc, #196]	; (8005074 <USB_EPClearStall+0x11c>)
 8004fae:	4323      	orrs	r3, r4
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	78db      	ldrb	r3, [r3, #3]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d054      	beq.n	8005066 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd2:	b29c      	uxth	r4, r3
 8004fd4:	f084 0320 	eor.w	r3, r4, #32
 8004fd8:	b29c      	uxth	r4, r3
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	441a      	add	r2, r3
 8004fe4:	4b24      	ldr	r3, [pc, #144]	; (8005078 <USB_EPClearStall+0x120>)
 8004fe6:	4323      	orrs	r3, r4
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	8013      	strh	r3, [r2, #0]
 8004fec:	e03b      	b.n	8005066 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29c      	uxth	r4, r3
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d014      	beq.n	8005030 <USB_EPClearStall+0xd8>
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501c:	b29c      	uxth	r4, r3
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	4b14      	ldr	r3, [pc, #80]	; (800507c <USB_EPClearStall+0x124>)
 800502a:	4323      	orrs	r3, r4
 800502c:	b29b      	uxth	r3, r3
 800502e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005046:	b29c      	uxth	r4, r3
 8005048:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800504c:	b29c      	uxth	r4, r3
 800504e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005052:	b29c      	uxth	r4, r3
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	4b06      	ldr	r3, [pc, #24]	; (8005078 <USB_EPClearStall+0x120>)
 8005060:	4323      	orrs	r3, r4
 8005062:	b29b      	uxth	r3, r3
 8005064:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bc90      	pop	{r4, r7}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	ffff80c0 	.word	0xffff80c0
 8005078:	ffff8080 	.word	0xffff8080
 800507c:	ffffc080 	.word	0xffffc080

08005080 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2280      	movs	r2, #128	; 0x80
 8005096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bc80      	pop	{r7}
 80050b8:	4770      	bx	lr

080050ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr

080050ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b085      	sub	sp, #20
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050dc:	b29b      	uxth	r3, r3
 80050de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80050e0:	68fb      	ldr	r3, [r7, #12]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr

080050ec <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005102:	b480      	push	{r7}
 8005104:	b08d      	sub	sp, #52	; 0x34
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	4611      	mov	r1, r2
 800510e:	461a      	mov	r2, r3
 8005110:	460b      	mov	r3, r1
 8005112:	80fb      	strh	r3, [r7, #6]
 8005114:	4613      	mov	r3, r2
 8005116:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005118:	88bb      	ldrh	r3, [r7, #4]
 800511a:	3301      	adds	r3, #1
 800511c:	085b      	lsrs	r3, r3, #1
 800511e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	005a      	lsls	r2, r3, #1
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513a:	e01e      	b.n	800517a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	3301      	adds	r3, #1
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	b29b      	uxth	r3, r3
 8005152:	461a      	mov	r2, r3
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	b29a      	uxth	r2, r3
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	3302      	adds	r3, #2
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	3302      	adds	r3, #2
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	3301      	adds	r3, #1
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	3b01      	subs	r3, #1
 8005178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1dd      	bne.n	800513c <USB_WritePMA+0x3a>
  }
}
 8005180:	bf00      	nop
 8005182:	3734      	adds	r7, #52	; 0x34
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr

0800518a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800518a:	b480      	push	{r7}
 800518c:	b08b      	sub	sp, #44	; 0x2c
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	4611      	mov	r1, r2
 8005196:	461a      	mov	r2, r3
 8005198:	460b      	mov	r3, r1
 800519a:	80fb      	strh	r3, [r7, #6]
 800519c:	4613      	mov	r3, r2
 800519e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80051a0:	88bb      	ldrh	r3, [r7, #4]
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80051b0:	88fb      	ldrh	r3, [r7, #6]
 80051b2:	005a      	lsls	r2, r3, #1
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051bc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
 80051c2:	e01b      	b.n	80051fc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	3302      	adds	r3, #2
 80051d0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3301      	adds	r3, #1
 80051de:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	3301      	adds	r3, #1
 80051ee:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	3302      	adds	r3, #2
 80051f4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	3b01      	subs	r3, #1
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e0      	bne.n	80051c4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005202:	88bb      	ldrh	r3, [r7, #4]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	701a      	strb	r2, [r3, #0]
  }
}
 800521e:	bf00      	nop
 8005220:	372c      	adds	r7, #44	; 0x2c
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr

08005228 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005234:	2304      	movs	r3, #4
 8005236:	2203      	movs	r2, #3
 8005238:	2181      	movs	r1, #129	; 0x81
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 fc4d 	bl	8006ada <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005246:	2010      	movs	r0, #16
 8005248:	f001 fd54 	bl	8006cf4 <USBD_static_malloc>
 800524c:	4602      	mov	r2, r0
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800525e:	2302      	movs	r3, #2
 8005260:	e005      	b.n	800526e <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005268:	2200      	movs	r2, #0
 800526a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	460b      	mov	r3, r1
 8005280:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005282:	2181      	movs	r1, #129	; 0x81
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f001 fc4e 	bl	8006b26 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 fd33 	bl	8006d0c <USBD_static_free>
    pdev->pClassData = NULL;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d045      	beq.n	8005372 <USBD_HID_Setup+0xba>
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	f040 80d3 	bne.w	8005492 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	3b02      	subs	r3, #2
 80052f2:	2b09      	cmp	r3, #9
 80052f4:	d835      	bhi.n	8005362 <USBD_HID_Setup+0xaa>
 80052f6:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <USBD_HID_Setup+0x44>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	08005353 	.word	0x08005353
 8005300:	08005333 	.word	0x08005333
 8005304:	08005363 	.word	0x08005363
 8005308:	08005363 	.word	0x08005363
 800530c:	08005363 	.word	0x08005363
 8005310:	08005363 	.word	0x08005363
 8005314:	08005363 	.word	0x08005363
 8005318:	08005363 	.word	0x08005363
 800531c:	08005341 	.word	0x08005341
 8005320:	08005325 	.word	0x08005325
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	885b      	ldrh	r3, [r3, #2]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	601a      	str	r2, [r3, #0]
          break;
 8005330:	e01e      	b.n	8005370 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2201      	movs	r2, #1
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 f915 	bl	8006568 <USBD_CtlSendData>
          break;
 800533e:	e017      	b.n	8005370 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	885b      	ldrh	r3, [r3, #2]
 8005344:	0a1b      	lsrs	r3, r3, #8
 8005346:	b29b      	uxth	r3, r3
 8005348:	b2db      	uxtb	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	605a      	str	r2, [r3, #4]
          break;
 8005350:	e00e      	b.n	8005370 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	3304      	adds	r3, #4
 8005356:	2201      	movs	r2, #1
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f001 f904 	bl	8006568 <USBD_CtlSendData>
          break;
 8005360:	e006      	b.n	8005370 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005362:	6839      	ldr	r1, [r7, #0]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 f895 	bl	8006494 <USBD_CtlError>
          ret = USBD_FAIL;
 800536a:	2302      	movs	r3, #2
 800536c:	75fb      	strb	r3, [r7, #23]
          break;
 800536e:	bf00      	nop
      }
      break;
 8005370:	e096      	b.n	80054a0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	2b0b      	cmp	r3, #11
 8005378:	f200 8083 	bhi.w	8005482 <USBD_HID_Setup+0x1ca>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <USBD_HID_Setup+0xcc>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	080053b5 	.word	0x080053b5
 8005388:	08005483 	.word	0x08005483
 800538c:	08005483 	.word	0x08005483
 8005390:	08005483 	.word	0x08005483
 8005394:	08005483 	.word	0x08005483
 8005398:	08005483 	.word	0x08005483
 800539c:	080053dd 	.word	0x080053dd
 80053a0:	08005483 	.word	0x08005483
 80053a4:	08005483 	.word	0x08005483
 80053a8:	08005483 	.word	0x08005483
 80053ac:	08005435 	.word	0x08005435
 80053b0:	0800545d 	.word	0x0800545d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d107      	bne.n	80053ce <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80053be:	f107 030e 	add.w	r3, r7, #14
 80053c2:	2202      	movs	r2, #2
 80053c4:	4619      	mov	r1, r3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f001 f8ce 	bl	8006568 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053cc:	e060      	b.n	8005490 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f001 f85f 	bl	8006494 <USBD_CtlError>
            ret = USBD_FAIL;
 80053d6:	2302      	movs	r3, #2
 80053d8:	75fb      	strb	r3, [r7, #23]
          break;
 80053da:	e059      	b.n	8005490 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	885b      	ldrh	r3, [r3, #2]
 80053e0:	0a1b      	lsrs	r3, r3, #8
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b22      	cmp	r3, #34	; 0x22
 80053e6:	d108      	bne.n	80053fa <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	88db      	ldrh	r3, [r3, #6]
 80053ec:	2b4a      	cmp	r3, #74	; 0x4a
 80053ee:	bf28      	it	cs
 80053f0:	234a      	movcs	r3, #74	; 0x4a
 80053f2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80053f4:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <USBD_HID_Setup+0x1f4>)
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	e015      	b.n	8005426 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	885b      	ldrh	r3, [r3, #2]
 80053fe:	0a1b      	lsrs	r3, r3, #8
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b21      	cmp	r3, #33	; 0x21
 8005404:	d108      	bne.n	8005418 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8005406:	4b2a      	ldr	r3, [pc, #168]	; (80054b0 <USBD_HID_Setup+0x1f8>)
 8005408:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	88db      	ldrh	r3, [r3, #6]
 800540e:	2b09      	cmp	r3, #9
 8005410:	bf28      	it	cs
 8005412:	2309      	movcs	r3, #9
 8005414:	83fb      	strh	r3, [r7, #30]
 8005416:	e006      	b.n	8005426 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f001 f83a 	bl	8006494 <USBD_CtlError>
            ret = USBD_FAIL;
 8005420:	2302      	movs	r3, #2
 8005422:	75fb      	strb	r3, [r7, #23]
            break;
 8005424:	e034      	b.n	8005490 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005426:	8bfb      	ldrh	r3, [r7, #30]
 8005428:	461a      	mov	r2, r3
 800542a:	69b9      	ldr	r1, [r7, #24]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 f89b 	bl	8006568 <USBD_CtlSendData>
          break;
 8005432:	e02d      	b.n	8005490 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800543a:	2b03      	cmp	r3, #3
 800543c:	d107      	bne.n	800544e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	3308      	adds	r3, #8
 8005442:	2201      	movs	r2, #1
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f001 f88e 	bl	8006568 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800544c:	e020      	b.n	8005490 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 f81f 	bl	8006494 <USBD_CtlError>
            ret = USBD_FAIL;
 8005456:	2302      	movs	r3, #2
 8005458:	75fb      	strb	r3, [r7, #23]
          break;
 800545a:	e019      	b.n	8005490 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005462:	2b03      	cmp	r3, #3
 8005464:	d106      	bne.n	8005474 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	885b      	ldrh	r3, [r3, #2]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005472:	e00d      	b.n	8005490 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f001 f80c 	bl	8006494 <USBD_CtlError>
            ret = USBD_FAIL;
 800547c:	2302      	movs	r3, #2
 800547e:	75fb      	strb	r3, [r7, #23]
          break;
 8005480:	e006      	b.n	8005490 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f001 f805 	bl	8006494 <USBD_CtlError>
          ret = USBD_FAIL;
 800548a:	2302      	movs	r3, #2
 800548c:	75fb      	strb	r3, [r7, #23]
          break;
 800548e:	bf00      	nop
      }
      break;
 8005490:	e006      	b.n	80054a0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fffd 	bl	8006494 <USBD_CtlError>
      ret = USBD_FAIL;
 800549a:	2302      	movs	r3, #2
 800549c:	75fb      	strb	r3, [r7, #23]
      break;
 800549e:	bf00      	nop
  }

  return ret;
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	200000c8 	.word	0x200000c8
 80054b0:	200000b0 	.word	0x200000b0

080054b4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2222      	movs	r2, #34	; 0x22
 80054c0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80054c2:	4b03      	ldr	r3, [pc, #12]	; (80054d0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20000044 	.word	0x20000044

080054d4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2222      	movs	r2, #34	; 0x22
 80054e0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80054e2:	4b03      	ldr	r3, [pc, #12]	; (80054f0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20000068 	.word	0x20000068

080054f4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2222      	movs	r2, #34	; 0x22
 8005500:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005502:	4b03      	ldr	r3, [pc, #12]	; (8005510 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	2000008c 	.word	0x2000008c

08005514 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005526:	2200      	movs	r2, #0
 8005528:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr
	...

08005538 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	220a      	movs	r2, #10
 8005544:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005546:	4b03      	ldr	r3, [pc, #12]	; (8005554 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	200000bc 	.word	0x200000bc

08005558 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	4613      	mov	r3, r2
 8005564:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800556c:	2302      	movs	r3, #2
 800556e:	e01a      	b.n	80055a6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	79fa      	ldrb	r2, [r7, #7]
 800559c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f001 fa38 	bl	8006a14 <USBD_LL_Init>

  return USBD_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d006      	beq.n	80055d0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	73fb      	strb	r3, [r7, #15]
 80055ce:	e001      	b.n	80055d4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80055d0:	2302      	movs	r3, #2
 80055d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr

080055e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f001 fa5b 	bl	8006aa4 <USBD_LL_Start>

  return USBD_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005618:	2302      	movs	r3, #2
 800561a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00c      	beq.n	8005640 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	4611      	mov	r1, r2
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	4798      	blx	r3
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	460b      	mov	r3, r1
 8005654:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	78fa      	ldrb	r2, [r7, #3]
 8005660:	4611      	mov	r1, r2
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3

  return USBD_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 feca 	bl	800641c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005696:	461a      	mov	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d00c      	beq.n	80056c6 <USBD_LL_SetupStage+0x56>
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d302      	bcc.n	80056b6 <USBD_LL_SetupStage+0x46>
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d010      	beq.n	80056d6 <USBD_LL_SetupStage+0x66>
 80056b4:	e017      	b.n	80056e6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f9ca 	bl	8005a58 <USBD_StdDevReq>
      break;
 80056c4:	e01a      	b.n	80056fc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fa2c 	bl	8005b2c <USBD_StdItfReq>
      break;
 80056d4:	e012      	b.n	80056fc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fa6a 	bl	8005bb8 <USBD_StdEPReq>
      break;
 80056e4:	e00a      	b.n	80056fc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	4619      	mov	r1, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 fa35 	bl	8006b64 <USBD_LL_StallEP>
      break;
 80056fa:	bf00      	nop
  }

  return USBD_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b086      	sub	sp, #24
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	460b      	mov	r3, r1
 8005710:	607a      	str	r2, [r7, #4]
 8005712:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005714:	7afb      	ldrb	r3, [r7, #11]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d14b      	bne.n	80057b2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005720:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005728:	2b03      	cmp	r3, #3
 800572a:	d134      	bne.n	8005796 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	429a      	cmp	r2, r3
 8005736:	d919      	bls.n	800576c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	1ad2      	subs	r2, r2, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800574e:	429a      	cmp	r2, r3
 8005750:	d203      	bcs.n	800575a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005756:	b29b      	uxth	r3, r3
 8005758:	e002      	b.n	8005760 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800575e:	b29b      	uxth	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 ff2d 	bl	80065c4 <USBD_CtlContinueRx>
 800576a:	e038      	b.n	80057de <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800577e:	2b03      	cmp	r3, #3
 8005780:	d105      	bne.n	800578e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 ff2a 	bl	80065e8 <USBD_CtlSendStatus>
 8005794:	e023      	b.n	80057de <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800579c:	2b05      	cmp	r3, #5
 800579e:	d11e      	bne.n	80057de <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80057a8:	2100      	movs	r1, #0
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f001 f9da 	bl	8006b64 <USBD_LL_StallEP>
 80057b0:	e015      	b.n	80057de <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00d      	beq.n	80057da <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d108      	bne.n	80057da <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	7afa      	ldrb	r2, [r7, #11]
 80057d2:	4611      	mov	r1, r2
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	4798      	blx	r3
 80057d8:	e001      	b.n	80057de <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80057da:	2302      	movs	r3, #2
 80057dc:	e000      	b.n	80057e0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	460b      	mov	r3, r1
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80057f6:	7afb      	ldrb	r3, [r7, #11]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d17f      	bne.n	80058fc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3314      	adds	r3, #20
 8005800:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005808:	2b02      	cmp	r3, #2
 800580a:	d15c      	bne.n	80058c6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	429a      	cmp	r2, r3
 8005816:	d915      	bls.n	8005844 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	1ad2      	subs	r2, r2, r3
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	b29b      	uxth	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 feb5 	bl	80065a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005836:	2300      	movs	r3, #0
 8005838:	2200      	movs	r2, #0
 800583a:	2100      	movs	r1, #0
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f001 fa36 	bl	8006cae <USBD_LL_PrepareReceive>
 8005842:	e04e      	b.n	80058e2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	6912      	ldr	r2, [r2, #16]
 800584c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005850:	fb02 f201 	mul.w	r2, r2, r1
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d11c      	bne.n	8005894 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005862:	429a      	cmp	r2, r3
 8005864:	d316      	bcc.n	8005894 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005870:	429a      	cmp	r2, r3
 8005872:	d20f      	bcs.n	8005894 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005874:	2200      	movs	r2, #0
 8005876:	2100      	movs	r1, #0
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fe91 	bl	80065a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005886:	2300      	movs	r3, #0
 8005888:	2200      	movs	r2, #0
 800588a:	2100      	movs	r1, #0
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f001 fa0e 	bl	8006cae <USBD_LL_PrepareReceive>
 8005892:	e026      	b.n	80058e2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d105      	bne.n	80058b6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80058b6:	2180      	movs	r1, #128	; 0x80
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f001 f953 	bl	8006b64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fea5 	bl	800660e <USBD_CtlReceiveStatus>
 80058c4:	e00d      	b.n	80058e2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d004      	beq.n	80058da <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80058da:	2180      	movs	r1, #128	; 0x80
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f001 f941 	bl	8006b64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d11d      	bne.n	8005928 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7ff fe83 	bl	80055f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80058fa:	e015      	b.n	8005928 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00d      	beq.n	8005924 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800590e:	2b03      	cmp	r3, #3
 8005910:	d108      	bne.n	8005924 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	7afa      	ldrb	r2, [r7, #11]
 800591c:	4611      	mov	r1, r2
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	4798      	blx	r3
 8005922:	e001      	b.n	8005928 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005924:	2302      	movs	r3, #2
 8005926:	e000      	b.n	800592a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800593a:	2340      	movs	r3, #64	; 0x40
 800593c:	2200      	movs	r2, #0
 800593e:	2100      	movs	r1, #0
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 f8ca 	bl	8006ada <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2240      	movs	r2, #64	; 0x40
 8005952:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005956:	2340      	movs	r3, #64	; 0x40
 8005958:	2200      	movs	r2, #0
 800595a:	2180      	movs	r1, #128	; 0x80
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f001 f8bc 	bl	8006ada <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2240      	movs	r2, #64	; 0x40
 800596c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d009      	beq.n	80059aa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6852      	ldr	r2, [r2, #4]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	4611      	mov	r1, r2
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	4798      	blx	r3
  }

  return USBD_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2204      	movs	r2, #4
 80059ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d105      	bne.n	8005a18 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d10b      	bne.n	8005a4e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d004      	beq.n	8005a7c <USBD_StdDevReq+0x24>
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d002      	beq.n	8005a7c <USBD_StdDevReq+0x24>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d008      	beq.n	8005a8c <USBD_StdDevReq+0x34>
 8005a7a:	e04c      	b.n	8005b16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4798      	blx	r3
      break;
 8005a8a:	e049      	b.n	8005b20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b09      	cmp	r3, #9
 8005a92:	d83a      	bhi.n	8005b0a <USBD_StdDevReq+0xb2>
 8005a94:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <USBD_StdDevReq+0x44>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005aed 	.word	0x08005aed
 8005aa0:	08005b01 	.word	0x08005b01
 8005aa4:	08005b0b 	.word	0x08005b0b
 8005aa8:	08005af7 	.word	0x08005af7
 8005aac:	08005b0b 	.word	0x08005b0b
 8005ab0:	08005acf 	.word	0x08005acf
 8005ab4:	08005ac5 	.word	0x08005ac5
 8005ab8:	08005b0b 	.word	0x08005b0b
 8005abc:	08005ae3 	.word	0x08005ae3
 8005ac0:	08005ad9 	.word	0x08005ad9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f9d4 	bl	8005e74 <USBD_GetDescriptor>
          break;
 8005acc:	e022      	b.n	8005b14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fb37 	bl	8006144 <USBD_SetAddress>
          break;
 8005ad6:	e01d      	b.n	8005b14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fb74 	bl	80061c8 <USBD_SetConfig>
          break;
 8005ae0:	e018      	b.n	8005b14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fbfd 	bl	80062e4 <USBD_GetConfig>
          break;
 8005aea:	e013      	b.n	8005b14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fc2c 	bl	800634c <USBD_GetStatus>
          break;
 8005af4:	e00e      	b.n	8005b14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005af6:	6839      	ldr	r1, [r7, #0]
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fc5a 	bl	80063b2 <USBD_SetFeature>
          break;
 8005afe:	e009      	b.n	8005b14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fc69 	bl	80063da <USBD_ClrFeature>
          break;
 8005b08:	e004      	b.n	8005b14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fcc1 	bl	8006494 <USBD_CtlError>
          break;
 8005b12:	bf00      	nop
      }
      break;
 8005b14:	e004      	b.n	8005b20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fcbb 	bl	8006494 <USBD_CtlError>
      break;
 8005b1e:	bf00      	nop
  }

  return ret;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop

08005b2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d003      	beq.n	8005b4e <USBD_StdItfReq+0x22>
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d001      	beq.n	8005b4e <USBD_StdItfReq+0x22>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d12a      	bne.n	8005ba4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b54:	3b01      	subs	r3, #1
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d81d      	bhi.n	8005b96 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	889b      	ldrh	r3, [r3, #4]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d813      	bhi.n	8005b8c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	88db      	ldrh	r3, [r3, #6]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d110      	bne.n	8005ba0 <USBD_StdItfReq+0x74>
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10d      	bne.n	8005ba0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fd2f 	bl	80065e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b8a:	e009      	b.n	8005ba0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005b8c:	6839      	ldr	r1, [r7, #0]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fc80 	bl	8006494 <USBD_CtlError>
          break;
 8005b94:	e004      	b.n	8005ba0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fc7b 	bl	8006494 <USBD_CtlError>
          break;
 8005b9e:	e000      	b.n	8005ba2 <USBD_StdItfReq+0x76>
          break;
 8005ba0:	bf00      	nop
      }
      break;
 8005ba2:	e004      	b.n	8005bae <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fc74 	bl	8006494 <USBD_CtlError>
      break;
 8005bac:	bf00      	nop
  }

  return USBD_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	889b      	ldrh	r3, [r3, #4]
 8005bca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d004      	beq.n	8005be2 <USBD_StdEPReq+0x2a>
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	d002      	beq.n	8005be2 <USBD_StdEPReq+0x2a>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <USBD_StdEPReq+0x3a>
 8005be0:	e13d      	b.n	8005e5e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4798      	blx	r3
      break;
 8005bf0:	e13a      	b.n	8005e68 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d10a      	bne.n	8005c14 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	4798      	blx	r3
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	e12a      	b.n	8005e6a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d03e      	beq.n	8005c9a <USBD_StdEPReq+0xe2>
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d002      	beq.n	8005c26 <USBD_StdEPReq+0x6e>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d070      	beq.n	8005d06 <USBD_StdEPReq+0x14e>
 8005c24:	e115      	b.n	8005e52 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d002      	beq.n	8005c36 <USBD_StdEPReq+0x7e>
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d015      	beq.n	8005c60 <USBD_StdEPReq+0xa8>
 8005c34:	e02b      	b.n	8005c8e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c36:	7bbb      	ldrb	r3, [r7, #14]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00c      	beq.n	8005c56 <USBD_StdEPReq+0x9e>
 8005c3c:	7bbb      	ldrb	r3, [r7, #14]
 8005c3e:	2b80      	cmp	r3, #128	; 0x80
 8005c40:	d009      	beq.n	8005c56 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005c42:	7bbb      	ldrb	r3, [r7, #14]
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 ff8c 	bl	8006b64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005c4c:	2180      	movs	r1, #128	; 0x80
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 ff88 	bl	8006b64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c54:	e020      	b.n	8005c98 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fc1b 	bl	8006494 <USBD_CtlError>
              break;
 8005c5e:	e01b      	b.n	8005c98 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	885b      	ldrh	r3, [r3, #2]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10e      	bne.n	8005c86 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005c68:	7bbb      	ldrb	r3, [r7, #14]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00b      	beq.n	8005c86 <USBD_StdEPReq+0xce>
 8005c6e:	7bbb      	ldrb	r3, [r7, #14]
 8005c70:	2b80      	cmp	r3, #128	; 0x80
 8005c72:	d008      	beq.n	8005c86 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	88db      	ldrh	r3, [r3, #6]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d104      	bne.n	8005c86 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005c7c:	7bbb      	ldrb	r3, [r7, #14]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 ff6f 	bl	8006b64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fcae 	bl	80065e8 <USBD_CtlSendStatus>

              break;
 8005c8c:	e004      	b.n	8005c98 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fbff 	bl	8006494 <USBD_CtlError>
              break;
 8005c96:	bf00      	nop
          }
          break;
 8005c98:	e0e0      	b.n	8005e5c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d002      	beq.n	8005caa <USBD_StdEPReq+0xf2>
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d015      	beq.n	8005cd4 <USBD_StdEPReq+0x11c>
 8005ca8:	e026      	b.n	8005cf8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <USBD_StdEPReq+0x112>
 8005cb0:	7bbb      	ldrb	r3, [r7, #14]
 8005cb2:	2b80      	cmp	r3, #128	; 0x80
 8005cb4:	d009      	beq.n	8005cca <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005cb6:	7bbb      	ldrb	r3, [r7, #14]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 ff52 	bl	8006b64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005cc0:	2180      	movs	r1, #128	; 0x80
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 ff4e 	bl	8006b64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005cc8:	e01c      	b.n	8005d04 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fbe1 	bl	8006494 <USBD_CtlError>
              break;
 8005cd2:	e017      	b.n	8005d04 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	885b      	ldrh	r3, [r3, #2]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d112      	bne.n	8005d02 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
 8005cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ce6:	7bbb      	ldrb	r3, [r7, #14]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 ff59 	bl	8006ba2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fc79 	bl	80065e8 <USBD_CtlSendStatus>
              }
              break;
 8005cf6:	e004      	b.n	8005d02 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fbca 	bl	8006494 <USBD_CtlError>
              break;
 8005d00:	e000      	b.n	8005d04 <USBD_StdEPReq+0x14c>
              break;
 8005d02:	bf00      	nop
          }
          break;
 8005d04:	e0aa      	b.n	8005e5c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d002      	beq.n	8005d16 <USBD_StdEPReq+0x15e>
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d032      	beq.n	8005d7a <USBD_StdEPReq+0x1c2>
 8005d14:	e097      	b.n	8005e46 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d16:	7bbb      	ldrb	r3, [r7, #14]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d007      	beq.n	8005d2c <USBD_StdEPReq+0x174>
 8005d1c:	7bbb      	ldrb	r3, [r7, #14]
 8005d1e:	2b80      	cmp	r3, #128	; 0x80
 8005d20:	d004      	beq.n	8005d2c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fbb5 	bl	8006494 <USBD_CtlError>
                break;
 8005d2a:	e091      	b.n	8005e50 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	da0b      	bge.n	8005d4c <USBD_StdEPReq+0x194>
 8005d34:	7bbb      	ldrb	r3, [r7, #14]
 8005d36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	3310      	adds	r3, #16
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	4413      	add	r3, r2
 8005d48:	3304      	adds	r3, #4
 8005d4a:	e00b      	b.n	8005d64 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d4c:	7bbb      	ldrb	r3, [r7, #14]
 8005d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	4413      	add	r3, r2
 8005d62:	3304      	adds	r3, #4
 8005d64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	4619      	mov	r1, r3
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fbf8 	bl	8006568 <USBD_CtlSendData>
              break;
 8005d78:	e06a      	b.n	8005e50 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005d7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	da11      	bge.n	8005da6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	f003 020f 	and.w	r2, r3, #15
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	3318      	adds	r3, #24
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d117      	bne.n	8005dcc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fb78 	bl	8006494 <USBD_CtlError>
                  break;
 8005da4:	e054      	b.n	8005e50 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	f003 020f 	and.w	r2, r3, #15
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d104      	bne.n	8005dcc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fb65 	bl	8006494 <USBD_CtlError>
                  break;
 8005dca:	e041      	b.n	8005e50 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	da0b      	bge.n	8005dec <USBD_StdEPReq+0x234>
 8005dd4:	7bbb      	ldrb	r3, [r7, #14]
 8005dd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	3310      	adds	r3, #16
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	4413      	add	r3, r2
 8005de8:	3304      	adds	r3, #4
 8005dea:	e00b      	b.n	8005e04 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005dec:	7bbb      	ldrb	r3, [r7, #14]
 8005dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4413      	add	r3, r2
 8005e02:	3304      	adds	r3, #4
 8005e04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e06:	7bbb      	ldrb	r3, [r7, #14]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <USBD_StdEPReq+0x25a>
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	2b80      	cmp	r3, #128	; 0x80
 8005e10:	d103      	bne.n	8005e1a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	e00e      	b.n	8005e38 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005e1a:	7bbb      	ldrb	r3, [r7, #14]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fede 	bl	8006be0 <USBD_LL_IsStallEP>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	e002      	b.n	8005e38 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fb92 	bl	8006568 <USBD_CtlSendData>
              break;
 8005e44:	e004      	b.n	8005e50 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fb23 	bl	8006494 <USBD_CtlError>
              break;
 8005e4e:	bf00      	nop
          }
          break;
 8005e50:	e004      	b.n	8005e5c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fb1d 	bl	8006494 <USBD_CtlError>
          break;
 8005e5a:	bf00      	nop
      }
      break;
 8005e5c:	e004      	b.n	8005e68 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fb17 	bl	8006494 <USBD_CtlError>
      break;
 8005e66:	bf00      	nop
  }

  return ret;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	885b      	ldrh	r3, [r3, #2]
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	2b06      	cmp	r3, #6
 8005e96:	f200 8128 	bhi.w	80060ea <USBD_GetDescriptor+0x276>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <USBD_GetDescriptor+0x2c>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005ebd 	.word	0x08005ebd
 8005ea4:	08005ed5 	.word	0x08005ed5
 8005ea8:	08005f15 	.word	0x08005f15
 8005eac:	080060eb 	.word	0x080060eb
 8005eb0:	080060eb 	.word	0x080060eb
 8005eb4:	0800608b 	.word	0x0800608b
 8005eb8:	080060b7 	.word	0x080060b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	7c12      	ldrb	r2, [r2, #16]
 8005ec8:	f107 0108 	add.w	r1, r7, #8
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4798      	blx	r3
 8005ed0:	60f8      	str	r0, [r7, #12]
      break;
 8005ed2:	e112      	b.n	80060fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	7c1b      	ldrb	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10d      	bne.n	8005ef8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	f107 0208 	add.w	r2, r7, #8
 8005ee8:	4610      	mov	r0, r2
 8005eea:	4798      	blx	r3
 8005eec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005ef6:	e100      	b.n	80060fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	f107 0208 	add.w	r2, r7, #8
 8005f04:	4610      	mov	r0, r2
 8005f06:	4798      	blx	r3
 8005f08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	2202      	movs	r2, #2
 8005f10:	701a      	strb	r2, [r3, #0]
      break;
 8005f12:	e0f2      	b.n	80060fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	885b      	ldrh	r3, [r3, #2]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b05      	cmp	r3, #5
 8005f1c:	f200 80ac 	bhi.w	8006078 <USBD_GetDescriptor+0x204>
 8005f20:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <USBD_GetDescriptor+0xb4>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005f41 	.word	0x08005f41
 8005f2c:	08005f75 	.word	0x08005f75
 8005f30:	08005fa9 	.word	0x08005fa9
 8005f34:	08005fdd 	.word	0x08005fdd
 8005f38:	08006011 	.word	0x08006011
 8005f3c:	08006045 	.word	0x08006045
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	7c12      	ldrb	r2, [r2, #16]
 8005f58:	f107 0108 	add.w	r1, r7, #8
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4798      	blx	r3
 8005f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f62:	e091      	b.n	8006088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa94 	bl	8006494 <USBD_CtlError>
            err++;
 8005f6c:	7afb      	ldrb	r3, [r7, #11]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	72fb      	strb	r3, [r7, #11]
          break;
 8005f72:	e089      	b.n	8006088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	7c12      	ldrb	r2, [r2, #16]
 8005f8c:	f107 0108 	add.w	r1, r7, #8
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
 8005f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f96:	e077      	b.n	8006088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa7a 	bl	8006494 <USBD_CtlError>
            err++;
 8005fa0:	7afb      	ldrb	r3, [r7, #11]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8005fa6:	e06f      	b.n	8006088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	7c12      	ldrb	r2, [r2, #16]
 8005fc0:	f107 0108 	add.w	r1, r7, #8
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	4798      	blx	r3
 8005fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fca:	e05d      	b.n	8006088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa60 	bl	8006494 <USBD_CtlError>
            err++;
 8005fd4:	7afb      	ldrb	r3, [r7, #11]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8005fda:	e055      	b.n	8006088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00b      	beq.n	8006000 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	7c12      	ldrb	r2, [r2, #16]
 8005ff4:	f107 0108 	add.w	r1, r7, #8
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4798      	blx	r3
 8005ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ffe:	e043      	b.n	8006088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa46 	bl	8006494 <USBD_CtlError>
            err++;
 8006008:	7afb      	ldrb	r3, [r7, #11]
 800600a:	3301      	adds	r3, #1
 800600c:	72fb      	strb	r3, [r7, #11]
          break;
 800600e:	e03b      	b.n	8006088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	7c12      	ldrb	r2, [r2, #16]
 8006028:	f107 0108 	add.w	r1, r7, #8
 800602c:	4610      	mov	r0, r2
 800602e:	4798      	blx	r3
 8006030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006032:	e029      	b.n	8006088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa2c 	bl	8006494 <USBD_CtlError>
            err++;
 800603c:	7afb      	ldrb	r3, [r7, #11]
 800603e:	3301      	adds	r3, #1
 8006040:	72fb      	strb	r3, [r7, #11]
          break;
 8006042:	e021      	b.n	8006088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00b      	beq.n	8006068 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	7c12      	ldrb	r2, [r2, #16]
 800605c:	f107 0108 	add.w	r1, r7, #8
 8006060:	4610      	mov	r0, r2
 8006062:	4798      	blx	r3
 8006064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006066:	e00f      	b.n	8006088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa12 	bl	8006494 <USBD_CtlError>
            err++;
 8006070:	7afb      	ldrb	r3, [r7, #11]
 8006072:	3301      	adds	r3, #1
 8006074:	72fb      	strb	r3, [r7, #11]
          break;
 8006076:	e007      	b.n	8006088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa0a 	bl	8006494 <USBD_CtlError>
          err++;
 8006080:	7afb      	ldrb	r3, [r7, #11]
 8006082:	3301      	adds	r3, #1
 8006084:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006086:	e038      	b.n	80060fa <USBD_GetDescriptor+0x286>
 8006088:	e037      	b.n	80060fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7c1b      	ldrb	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609a:	f107 0208 	add.w	r2, r7, #8
 800609e:	4610      	mov	r0, r2
 80060a0:	4798      	blx	r3
 80060a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060a4:	e029      	b.n	80060fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f9f3 	bl	8006494 <USBD_CtlError>
        err++;
 80060ae:	7afb      	ldrb	r3, [r7, #11]
 80060b0:	3301      	adds	r3, #1
 80060b2:	72fb      	strb	r3, [r7, #11]
      break;
 80060b4:	e021      	b.n	80060fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	7c1b      	ldrb	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10d      	bne.n	80060da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	f107 0208 	add.w	r2, r7, #8
 80060ca:	4610      	mov	r0, r2
 80060cc:	4798      	blx	r3
 80060ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	2207      	movs	r2, #7
 80060d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060d8:	e00f      	b.n	80060fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f9d9 	bl	8006494 <USBD_CtlError>
        err++;
 80060e2:	7afb      	ldrb	r3, [r7, #11]
 80060e4:	3301      	adds	r3, #1
 80060e6:	72fb      	strb	r3, [r7, #11]
      break;
 80060e8:	e007      	b.n	80060fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f9d1 	bl	8006494 <USBD_CtlError>
      err++;
 80060f2:	7afb      	ldrb	r3, [r7, #11]
 80060f4:	3301      	adds	r3, #1
 80060f6:	72fb      	strb	r3, [r7, #11]
      break;
 80060f8:	bf00      	nop
  }

  if (err != 0U)
 80060fa:	7afb      	ldrb	r3, [r7, #11]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d11c      	bne.n	800613a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006100:	893b      	ldrh	r3, [r7, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d011      	beq.n	800612a <USBD_GetDescriptor+0x2b6>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	88db      	ldrh	r3, [r3, #6]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00d      	beq.n	800612a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	88da      	ldrh	r2, [r3, #6]
 8006112:	893b      	ldrh	r3, [r7, #8]
 8006114:	4293      	cmp	r3, r2
 8006116:	bf28      	it	cs
 8006118:	4613      	movcs	r3, r2
 800611a:	b29b      	uxth	r3, r3
 800611c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800611e:	893b      	ldrh	r3, [r7, #8]
 8006120:	461a      	mov	r2, r3
 8006122:	68f9      	ldr	r1, [r7, #12]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fa1f 	bl	8006568 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	88db      	ldrh	r3, [r3, #6]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa58 	bl	80065e8 <USBD_CtlSendStatus>
 8006138:	e000      	b.n	800613c <USBD_GetDescriptor+0x2c8>
    return;
 800613a:	bf00      	nop
    }
  }
}
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop

08006144 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	889b      	ldrh	r3, [r3, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d130      	bne.n	80061b8 <USBD_SetAddress+0x74>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	88db      	ldrh	r3, [r3, #6]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d12c      	bne.n	80061b8 <USBD_SetAddress+0x74>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	885b      	ldrh	r3, [r3, #2]
 8006162:	2b7f      	cmp	r3, #127	; 0x7f
 8006164:	d828      	bhi.n	80061b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	885b      	ldrh	r3, [r3, #2]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006170:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006178:	2b03      	cmp	r3, #3
 800617a:	d104      	bne.n	8006186 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f988 	bl	8006494 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006184:	e01c      	b.n	80061c0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	7bfa      	ldrb	r2, [r7, #15]
 800618a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fd49 	bl	8006c2a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fa25 	bl	80065e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d004      	beq.n	80061ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ac:	e008      	b.n	80061c0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b6:	e003      	b.n	80061c0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f96a 	bl	8006494 <USBD_CtlError>
  }
}
 80061c0:	bf00      	nop
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	885b      	ldrh	r3, [r3, #2]
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	4b41      	ldr	r3, [pc, #260]	; (80062e0 <USBD_SetConfig+0x118>)
 80061da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80061dc:	4b40      	ldr	r3, [pc, #256]	; (80062e0 <USBD_SetConfig+0x118>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d904      	bls.n	80061ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f954 	bl	8006494 <USBD_CtlError>
 80061ec:	e075      	b.n	80062da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d002      	beq.n	80061fe <USBD_SetConfig+0x36>
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d023      	beq.n	8006244 <USBD_SetConfig+0x7c>
 80061fc:	e062      	b.n	80062c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80061fe:	4b38      	ldr	r3, [pc, #224]	; (80062e0 <USBD_SetConfig+0x118>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01a      	beq.n	800623c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006206:	4b36      	ldr	r3, [pc, #216]	; (80062e0 <USBD_SetConfig+0x118>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2203      	movs	r2, #3
 8006214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006218:	4b31      	ldr	r3, [pc, #196]	; (80062e0 <USBD_SetConfig+0x118>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff f9f4 	bl	800560c <USBD_SetClassConfig>
 8006224:	4603      	mov	r3, r0
 8006226:	2b02      	cmp	r3, #2
 8006228:	d104      	bne.n	8006234 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f931 	bl	8006494 <USBD_CtlError>
            return;
 8006232:	e052      	b.n	80062da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f9d7 	bl	80065e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800623a:	e04e      	b.n	80062da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f9d3 	bl	80065e8 <USBD_CtlSendStatus>
        break;
 8006242:	e04a      	b.n	80062da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006244:	4b26      	ldr	r3, [pc, #152]	; (80062e0 <USBD_SetConfig+0x118>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d112      	bne.n	8006272 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006254:	4b22      	ldr	r3, [pc, #136]	; (80062e0 <USBD_SetConfig+0x118>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	461a      	mov	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800625e:	4b20      	ldr	r3, [pc, #128]	; (80062e0 <USBD_SetConfig+0x118>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff f9f0 	bl	800564a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9bc 	bl	80065e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006270:	e033      	b.n	80062da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006272:	4b1b      	ldr	r3, [pc, #108]	; (80062e0 <USBD_SetConfig+0x118>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d01d      	beq.n	80062bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff f9de 	bl	800564a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800628e:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <USBD_SetConfig+0x118>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006298:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <USBD_SetConfig+0x118>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff f9b4 	bl	800560c <USBD_SetClassConfig>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d104      	bne.n	80062b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8f1 	bl	8006494 <USBD_CtlError>
            return;
 80062b2:	e012      	b.n	80062da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f997 	bl	80065e8 <USBD_CtlSendStatus>
        break;
 80062ba:	e00e      	b.n	80062da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f993 	bl	80065e8 <USBD_CtlSendStatus>
        break;
 80062c2:	e00a      	b.n	80062da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80062c4:	6839      	ldr	r1, [r7, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f8e4 	bl	8006494 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80062cc:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <USBD_SetConfig+0x118>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff f9b9 	bl	800564a <USBD_ClrClassConfig>
        break;
 80062d8:	bf00      	nop
    }
  }
}
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	200001e8 	.word	0x200001e8

080062e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	88db      	ldrh	r3, [r3, #6]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d004      	beq.n	8006300 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f8cb 	bl	8006494 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80062fe:	e021      	b.n	8006344 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006306:	2b01      	cmp	r3, #1
 8006308:	db17      	blt.n	800633a <USBD_GetConfig+0x56>
 800630a:	2b02      	cmp	r3, #2
 800630c:	dd02      	ble.n	8006314 <USBD_GetConfig+0x30>
 800630e:	2b03      	cmp	r3, #3
 8006310:	d00b      	beq.n	800632a <USBD_GetConfig+0x46>
 8006312:	e012      	b.n	800633a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3308      	adds	r3, #8
 800631e:	2201      	movs	r2, #1
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f920 	bl	8006568 <USBD_CtlSendData>
        break;
 8006328:	e00c      	b.n	8006344 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3304      	adds	r3, #4
 800632e:	2201      	movs	r2, #1
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f918 	bl	8006568 <USBD_CtlSendData>
        break;
 8006338:	e004      	b.n	8006344 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f8a9 	bl	8006494 <USBD_CtlError>
        break;
 8006342:	bf00      	nop
}
 8006344:	bf00      	nop
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800635c:	3b01      	subs	r3, #1
 800635e:	2b02      	cmp	r3, #2
 8006360:	d81e      	bhi.n	80063a0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	88db      	ldrh	r3, [r3, #6]
 8006366:	2b02      	cmp	r3, #2
 8006368:	d004      	beq.n	8006374 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f891 	bl	8006494 <USBD_CtlError>
        break;
 8006372:	e01a      	b.n	80063aa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f043 0202 	orr.w	r2, r3, #2
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	330c      	adds	r3, #12
 8006394:	2202      	movs	r2, #2
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f8e5 	bl	8006568 <USBD_CtlSendData>
      break;
 800639e:	e004      	b.n	80063aa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f876 	bl	8006494 <USBD_CtlError>
      break;
 80063a8:	bf00      	nop
  }
}
 80063aa:	bf00      	nop
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	885b      	ldrh	r3, [r3, #2]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d106      	bne.n	80063d2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f90b 	bl	80065e8 <USBD_CtlSendStatus>
  }
}
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ea:	3b01      	subs	r3, #1
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d80b      	bhi.n	8006408 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	885b      	ldrh	r3, [r3, #2]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d10c      	bne.n	8006412 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f8f1 	bl	80065e8 <USBD_CtlSendStatus>
      }
      break;
 8006406:	e004      	b.n	8006412 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f842 	bl	8006494 <USBD_CtlError>
      break;
 8006410:	e000      	b.n	8006414 <USBD_ClrFeature+0x3a>
      break;
 8006412:	bf00      	nop
  }
}
 8006414:	bf00      	nop
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781a      	ldrb	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	785a      	ldrb	r2, [r3, #1]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	3302      	adds	r3, #2
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	b29a      	uxth	r2, r3
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	3303      	adds	r3, #3
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	021b      	lsls	r3, r3, #8
 8006448:	b29b      	uxth	r3, r3
 800644a:	4413      	add	r3, r2
 800644c:	b29a      	uxth	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	3304      	adds	r3, #4
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	b29a      	uxth	r2, r3
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	3305      	adds	r3, #5
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	b29b      	uxth	r3, r3
 8006466:	4413      	add	r3, r2
 8006468:	b29a      	uxth	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	3306      	adds	r3, #6
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	b29a      	uxth	r2, r3
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	3307      	adds	r3, #7
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	021b      	lsls	r3, r3, #8
 8006480:	b29b      	uxth	r3, r3
 8006482:	4413      	add	r3, r2
 8006484:	b29a      	uxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	80da      	strh	r2, [r3, #6]

}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr

08006494 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800649e:	2180      	movs	r1, #128	; 0x80
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fb5f 	bl	8006b64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80064a6:	2100      	movs	r1, #0
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fb5b 	bl	8006b64 <USBD_LL_StallEP>
}
 80064ae:	bf00      	nop
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b086      	sub	sp, #24
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d032      	beq.n	8006532 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f834 	bl	800653a <USBD_GetLen>
 80064d2:	4603      	mov	r3, r0
 80064d4:	3301      	adds	r3, #1
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	75fa      	strb	r2, [r7, #23]
 80064e6:	461a      	mov	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4413      	add	r3, r2
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	75fa      	strb	r2, [r7, #23]
 80064f8:	461a      	mov	r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4413      	add	r3, r2
 80064fe:	2203      	movs	r2, #3
 8006500:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006502:	e012      	b.n	800652a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	60fa      	str	r2, [r7, #12]
 800650a:	7dfa      	ldrb	r2, [r7, #23]
 800650c:	1c51      	adds	r1, r2, #1
 800650e:	75f9      	strb	r1, [r7, #23]
 8006510:	4611      	mov	r1, r2
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	440a      	add	r2, r1
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800651a:	7dfb      	ldrb	r3, [r7, #23]
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	75fa      	strb	r2, [r7, #23]
 8006520:	461a      	mov	r2, r3
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4413      	add	r3, r2
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e8      	bne.n	8006504 <USBD_GetString+0x4e>
    }
  }
}
 8006532:	bf00      	nop
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006546:	e005      	b.n	8006554 <USBD_GetLen+0x1a>
  {
    len++;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	3301      	adds	r3, #1
 800654c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3301      	adds	r3, #1
 8006552:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f5      	bne.n	8006548 <USBD_GetLen+0xe>
  }

  return len;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr

08006568 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	4613      	mov	r3, r2
 8006574:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2202      	movs	r2, #2
 800657a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800657e:	88fa      	ldrh	r2, [r7, #6]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006584:	88fa      	ldrh	r2, [r7, #6]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	2100      	movs	r1, #0
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 fb69 	bl	8006c68 <USBD_LL_Transmit>

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	4613      	mov	r3, r2
 80065ac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	2100      	movs	r1, #0
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fb57 	bl	8006c68 <USBD_LL_Transmit>

  return USBD_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	4613      	mov	r3, r2
 80065d0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	2100      	movs	r1, #0
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fb68 	bl	8006cae <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2204      	movs	r2, #4
 80065f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80065f8:	2300      	movs	r3, #0
 80065fa:	2200      	movs	r2, #0
 80065fc:	2100      	movs	r1, #0
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fb32 	bl	8006c68 <USBD_LL_Transmit>

  return USBD_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b082      	sub	sp, #8
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2205      	movs	r2, #5
 800661a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800661e:	2300      	movs	r3, #0
 8006620:	2200      	movs	r2, #0
 8006622:	2100      	movs	r1, #0
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fb42 	bl	8006cae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006638:	2200      	movs	r2, #0
 800663a:	490e      	ldr	r1, [pc, #56]	; (8006674 <MX_USB_DEVICE_Init+0x40>)
 800663c:	480e      	ldr	r0, [pc, #56]	; (8006678 <MX_USB_DEVICE_Init+0x44>)
 800663e:	f7fe ff8b 	bl	8005558 <USBD_Init>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006648:	f7fa fa8e 	bl	8000b68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800664c:	490b      	ldr	r1, [pc, #44]	; (800667c <MX_USB_DEVICE_Init+0x48>)
 800664e:	480a      	ldr	r0, [pc, #40]	; (8006678 <MX_USB_DEVICE_Init+0x44>)
 8006650:	f7fe ffad 	bl	80055ae <USBD_RegisterClass>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800665a:	f7fa fa85 	bl	8000b68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800665e:	4806      	ldr	r0, [pc, #24]	; (8006678 <MX_USB_DEVICE_Init+0x44>)
 8006660:	f7fe ffbe 	bl	80055e0 <USBD_Start>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800666a:	f7fa fa7d 	bl	8000b68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800666e:	bf00      	nop
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000114 	.word	0x20000114
 8006678:	200004f4 	.word	0x200004f4
 800667c:	2000000c 	.word	0x2000000c

08006680 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	6039      	str	r1, [r7, #0]
 800668a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2212      	movs	r2, #18
 8006690:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006692:	4b03      	ldr	r3, [pc, #12]	; (80066a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	20000130 	.word	0x20000130

080066a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	6039      	str	r1, [r7, #0]
 80066ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2204      	movs	r2, #4
 80066b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80066b6:	4b03      	ldr	r3, [pc, #12]	; (80066c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	bc80      	pop	{r7}
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	20000144 	.word	0x20000144

080066c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	6039      	str	r1, [r7, #0]
 80066d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	4907      	ldr	r1, [pc, #28]	; (80066fc <USBD_FS_ProductStrDescriptor+0x34>)
 80066de:	4808      	ldr	r0, [pc, #32]	; (8006700 <USBD_FS_ProductStrDescriptor+0x38>)
 80066e0:	f7ff fee9 	bl	80064b6 <USBD_GetString>
 80066e4:	e004      	b.n	80066f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	4904      	ldr	r1, [pc, #16]	; (80066fc <USBD_FS_ProductStrDescriptor+0x34>)
 80066ea:	4805      	ldr	r0, [pc, #20]	; (8006700 <USBD_FS_ProductStrDescriptor+0x38>)
 80066ec:	f7ff fee3 	bl	80064b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066f0:	4b02      	ldr	r3, [pc, #8]	; (80066fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	200007b8 	.word	0x200007b8
 8006700:	08007ea4 	.word	0x08007ea4

08006704 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	6039      	str	r1, [r7, #0]
 800670e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	4904      	ldr	r1, [pc, #16]	; (8006724 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006714:	4804      	ldr	r0, [pc, #16]	; (8006728 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006716:	f7ff fece 	bl	80064b6 <USBD_GetString>
  return USBD_StrDesc;
 800671a:	4b02      	ldr	r3, [pc, #8]	; (8006724 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	200007b8 	.word	0x200007b8
 8006728:	08007ebc 	.word	0x08007ebc

0800672c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	4603      	mov	r3, r0
 8006734:	6039      	str	r1, [r7, #0]
 8006736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	221a      	movs	r2, #26
 800673c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800673e:	f000 f843 	bl	80067c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006742:	4b02      	ldr	r3, [pc, #8]	; (800674c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20000148 	.word	0x20000148

08006750 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	6039      	str	r1, [r7, #0]
 800675a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d105      	bne.n	800676e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	4907      	ldr	r1, [pc, #28]	; (8006784 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006766:	4808      	ldr	r0, [pc, #32]	; (8006788 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006768:	f7ff fea5 	bl	80064b6 <USBD_GetString>
 800676c:	e004      	b.n	8006778 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	4904      	ldr	r1, [pc, #16]	; (8006784 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006772:	4805      	ldr	r0, [pc, #20]	; (8006788 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006774:	f7ff fe9f 	bl	80064b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006778:	4b02      	ldr	r3, [pc, #8]	; (8006784 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	200007b8 	.word	0x200007b8
 8006788:	08007ed0 	.word	0x08007ed0

0800678c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	4603      	mov	r3, r0
 8006794:	6039      	str	r1, [r7, #0]
 8006796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d105      	bne.n	80067aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	4907      	ldr	r1, [pc, #28]	; (80067c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80067a2:	4808      	ldr	r0, [pc, #32]	; (80067c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80067a4:	f7ff fe87 	bl	80064b6 <USBD_GetString>
 80067a8:	e004      	b.n	80067b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	4904      	ldr	r1, [pc, #16]	; (80067c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80067ae:	4805      	ldr	r0, [pc, #20]	; (80067c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80067b0:	f7ff fe81 	bl	80064b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067b4:	4b02      	ldr	r3, [pc, #8]	; (80067c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	200007b8 	.word	0x200007b8
 80067c4:	08007edc 	.word	0x08007edc

080067c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067ce:	4b0f      	ldr	r3, [pc, #60]	; (800680c <Get_SerialNum+0x44>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067d4:	4b0e      	ldr	r3, [pc, #56]	; (8006810 <Get_SerialNum+0x48>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067da:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <Get_SerialNum+0x4c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4413      	add	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d009      	beq.n	8006802 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067ee:	2208      	movs	r2, #8
 80067f0:	4909      	ldr	r1, [pc, #36]	; (8006818 <Get_SerialNum+0x50>)
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f814 	bl	8006820 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067f8:	2204      	movs	r2, #4
 80067fa:	4908      	ldr	r1, [pc, #32]	; (800681c <Get_SerialNum+0x54>)
 80067fc:	68b8      	ldr	r0, [r7, #8]
 80067fe:	f000 f80f 	bl	8006820 <IntToUnicode>
  }
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	1ffff7e8 	.word	0x1ffff7e8
 8006810:	1ffff7ec 	.word	0x1ffff7ec
 8006814:	1ffff7f0 	.word	0x1ffff7f0
 8006818:	2000014a 	.word	0x2000014a
 800681c:	2000015a 	.word	0x2000015a

08006820 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006832:	2300      	movs	r3, #0
 8006834:	75fb      	strb	r3, [r7, #23]
 8006836:	e027      	b.n	8006888 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	0f1b      	lsrs	r3, r3, #28
 800683c:	2b09      	cmp	r3, #9
 800683e:	d80b      	bhi.n	8006858 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	0f1b      	lsrs	r3, r3, #28
 8006844:	b2da      	uxtb	r2, r3
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	4619      	mov	r1, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	440b      	add	r3, r1
 8006850:	3230      	adds	r2, #48	; 0x30
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	e00a      	b.n	800686e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	0f1b      	lsrs	r3, r3, #28
 800685c:	b2da      	uxtb	r2, r3
 800685e:	7dfb      	ldrb	r3, [r7, #23]
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	4619      	mov	r1, r3
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	440b      	add	r3, r1
 8006868:	3237      	adds	r2, #55	; 0x37
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	3301      	adds	r3, #1
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	4413      	add	r3, r2
 800687e:	2200      	movs	r2, #0
 8006880:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	3301      	adds	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
 8006888:	7dfa      	ldrb	r2, [r7, #23]
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	429a      	cmp	r2, r3
 800688e:	d3d3      	bcc.n	8006838 <IntToUnicode+0x18>
  }
}
 8006890:	bf00      	nop
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr
	...

0800689c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a0d      	ldr	r2, [pc, #52]	; (80068e0 <HAL_PCD_MspInit+0x44>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d113      	bne.n	80068d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80068ae:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <HAL_PCD_MspInit+0x48>)
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	4a0c      	ldr	r2, [pc, #48]	; (80068e4 <HAL_PCD_MspInit+0x48>)
 80068b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068b8:	61d3      	str	r3, [r2, #28]
 80068ba:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <HAL_PCD_MspInit+0x48>)
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80068c6:	2200      	movs	r2, #0
 80068c8:	2100      	movs	r1, #0
 80068ca:	2014      	movs	r0, #20
 80068cc:	f7fa fe6f 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80068d0:	2014      	movs	r0, #20
 80068d2:	f7fa fe88 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	40005c00 	.word	0x40005c00
 80068e4:	40021000 	.word	0x40021000

080068e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80068fc:	4619      	mov	r1, r3
 80068fe:	4610      	mov	r0, r2
 8006900:	f7fe feb6 	bl	8005670 <USBD_LL_SetupStage>
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	015b      	lsls	r3, r3, #5
 8006924:	4413      	add	r3, r2
 8006926:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	4619      	mov	r1, r3
 8006930:	f7fe fee9 	bl	8005706 <USBD_LL_DataOutStage>
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	015b      	lsls	r3, r3, #5
 8006954:	4413      	add	r3, r2
 8006956:	333c      	adds	r3, #60	; 0x3c
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	78fb      	ldrb	r3, [r7, #3]
 800695c:	4619      	mov	r1, r3
 800695e:	f7fe ff43 	bl	80057e8 <USBD_LL_DataInStage>
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff f853 	bl	8005a24 <USBD_LL_SOF>
}
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800698e:	2301      	movs	r3, #1
 8006990:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b02      	cmp	r3, #2
 8006998:	d001      	beq.n	800699e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800699a:	f7fa f8e5 	bl	8000b68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80069a4:	7bfa      	ldrb	r2, [r7, #15]
 80069a6:	4611      	mov	r1, r2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff f803 	bl	80059b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe ffbc 	bl	8005932 <USBD_LL_Reset>
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe fffd 	bl	80059d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80069e0:	4b04      	ldr	r3, [pc, #16]	; (80069f4 <HAL_PCD_SuspendCallback+0x30>)
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	4a03      	ldr	r2, [pc, #12]	; (80069f4 <HAL_PCD_SuspendCallback+0x30>)
 80069e6:	f043 0306 	orr.w	r3, r3, #6
 80069ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	e000ed00 	.word	0xe000ed00

080069f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe fff7 	bl	80059fa <USBD_LL_Resume>
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006a1c:	4a1f      	ldr	r2, [pc, #124]	; (8006a9c <USBD_LL_Init+0x88>)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a1d      	ldr	r2, [pc, #116]	; (8006a9c <USBD_LL_Init+0x88>)
 8006a28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006a2c:	4b1b      	ldr	r3, [pc, #108]	; (8006a9c <USBD_LL_Init+0x88>)
 8006a2e:	4a1c      	ldr	r2, [pc, #112]	; (8006aa0 <USBD_LL_Init+0x8c>)
 8006a30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006a32:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <USBD_LL_Init+0x88>)
 8006a34:	2208      	movs	r2, #8
 8006a36:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006a38:	4b18      	ldr	r3, [pc, #96]	; (8006a9c <USBD_LL_Init+0x88>)
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006a3e:	4b17      	ldr	r3, [pc, #92]	; (8006a9c <USBD_LL_Init+0x88>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006a44:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <USBD_LL_Init+0x88>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006a4a:	4b14      	ldr	r3, [pc, #80]	; (8006a9c <USBD_LL_Init+0x88>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006a50:	4812      	ldr	r0, [pc, #72]	; (8006a9c <USBD_LL_Init+0x88>)
 8006a52:	f7fb f943 	bl	8001cdc <HAL_PCD_Init>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006a5c:	f7fa f884 	bl	8000b68 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a66:	2318      	movs	r3, #24
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	f7fb ffc8 	bl	8002a00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a76:	2358      	movs	r3, #88	; 0x58
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2180      	movs	r1, #128	; 0x80
 8006a7c:	f7fb ffc0 	bl	8002a00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2181      	movs	r1, #129	; 0x81
 8006a8e:	f7fb ffb7 	bl	8002a00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	200009b8 	.word	0x200009b8
 8006aa0:	40005c00 	.word	0x40005c00

08006aa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fb f9ef 	bl	8001e9e <HAL_PCD_Start>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 f934 	bl	8006d34 <USBD_Get_USB_Status>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	4608      	mov	r0, r1
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4603      	mov	r3, r0
 8006aea:	70fb      	strb	r3, [r7, #3]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70bb      	strb	r3, [r7, #2]
 8006af0:	4613      	mov	r3, r2
 8006af2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b02:	78bb      	ldrb	r3, [r7, #2]
 8006b04:	883a      	ldrh	r2, [r7, #0]
 8006b06:	78f9      	ldrb	r1, [r7, #3]
 8006b08:	f7fb fb22 	bl	8002150 <HAL_PCD_EP_Open>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 f90e 	bl	8006d34 <USBD_Get_USB_Status>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b40:	78fa      	ldrb	r2, [r7, #3]
 8006b42:	4611      	mov	r1, r2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7fb fb63 	bl	8002210 <HAL_PCD_EP_Close>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 f8ef 	bl	8006d34 <USBD_Get_USB_Status>
 8006b56:	4603      	mov	r3, r0
 8006b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b7e:	78fa      	ldrb	r2, [r7, #3]
 8006b80:	4611      	mov	r1, r2
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fb fbf9 	bl	800237a <HAL_PCD_EP_SetStall>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 f8d0 	bl	8006d34 <USBD_Get_USB_Status>
 8006b94:	4603      	mov	r3, r0
 8006b96:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	460b      	mov	r3, r1
 8006bac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bbc:	78fa      	ldrb	r2, [r7, #3]
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fb fc34 	bl	800242e <HAL_PCD_EP_ClrStall>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 f8b1 	bl	8006d34 <USBD_Get_USB_Status>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bf2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da08      	bge.n	8006c0e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	015b      	lsls	r3, r3, #5
 8006c06:	4413      	add	r3, r2
 8006c08:	332a      	adds	r3, #42	; 0x2a
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	e008      	b.n	8006c20 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	015b      	lsls	r3, r3, #5
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006c1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr

08006c2a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c44:	78fa      	ldrb	r2, [r7, #3]
 8006c46:	4611      	mov	r1, r2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fb fa5c 	bl	8002106 <HAL_PCD_SetAddress>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 f86d 	bl	8006d34 <USBD_Get_USB_Status>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	607a      	str	r2, [r7, #4]
 8006c72:	461a      	mov	r2, r3
 8006c74:	460b      	mov	r3, r1
 8006c76:	72fb      	strb	r3, [r7, #11]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c8a:	893b      	ldrh	r3, [r7, #8]
 8006c8c:	7af9      	ldrb	r1, [r7, #11]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	f7fb fb3a 	bl	8002308 <HAL_PCD_EP_Transmit>
 8006c94:	4603      	mov	r3, r0
 8006c96:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 f84a 	bl	8006d34 <USBD_Get_USB_Status>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006ca4:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b086      	sub	sp, #24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	460b      	mov	r3, r1
 8006cbc:	72fb      	strb	r3, [r7, #11]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006cd0:	893b      	ldrh	r3, [r7, #8]
 8006cd2:	7af9      	ldrb	r1, [r7, #11]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	f7fb fadd 	bl	8002294 <HAL_PCD_EP_Receive>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 f827 	bl	8006d34 <USBD_Get_USB_Status>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006cea:	7dbb      	ldrb	r3, [r7, #22]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006cfc:	4b02      	ldr	r3, [pc, #8]	; (8006d08 <USBD_static_malloc+0x14>)
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr
 8006d08:	200001ec 	.word	0x200001ec

08006d0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]

}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bc80      	pop	{r7}
 8006d1c:	4770      	bx	lr

08006d1e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr

08006d34 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d817      	bhi.n	8006d78 <USBD_Get_USB_Status+0x44>
 8006d48:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <USBD_Get_USB_Status+0x1c>)
 8006d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4e:	bf00      	nop
 8006d50:	08006d61 	.word	0x08006d61
 8006d54:	08006d67 	.word	0x08006d67
 8006d58:	08006d6d 	.word	0x08006d6d
 8006d5c:	08006d73 	.word	0x08006d73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
    break;
 8006d64:	e00b      	b.n	8006d7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d66:	2302      	movs	r3, #2
 8006d68:	73fb      	strb	r3, [r7, #15]
    break;
 8006d6a:	e008      	b.n	8006d7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d70:	e005      	b.n	8006d7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d72:	2302      	movs	r3, #2
 8006d74:	73fb      	strb	r3, [r7, #15]
    break;
 8006d76:	e002      	b.n	8006d7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d7c:	bf00      	nop
  }
  return usb_status;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop

08006d8c <__errno>:
 8006d8c:	4b01      	ldr	r3, [pc, #4]	; (8006d94 <__errno+0x8>)
 8006d8e:	6818      	ldr	r0, [r3, #0]
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20000164 	.word	0x20000164

08006d98 <__libc_init_array>:
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	2500      	movs	r5, #0
 8006d9c:	4e0c      	ldr	r6, [pc, #48]	; (8006dd0 <__libc_init_array+0x38>)
 8006d9e:	4c0d      	ldr	r4, [pc, #52]	; (8006dd4 <__libc_init_array+0x3c>)
 8006da0:	1ba4      	subs	r4, r4, r6
 8006da2:	10a4      	asrs	r4, r4, #2
 8006da4:	42a5      	cmp	r5, r4
 8006da6:	d109      	bne.n	8006dbc <__libc_init_array+0x24>
 8006da8:	f000 ff8c 	bl	8007cc4 <_init>
 8006dac:	2500      	movs	r5, #0
 8006dae:	4e0a      	ldr	r6, [pc, #40]	; (8006dd8 <__libc_init_array+0x40>)
 8006db0:	4c0a      	ldr	r4, [pc, #40]	; (8006ddc <__libc_init_array+0x44>)
 8006db2:	1ba4      	subs	r4, r4, r6
 8006db4:	10a4      	asrs	r4, r4, #2
 8006db6:	42a5      	cmp	r5, r4
 8006db8:	d105      	bne.n	8006dc6 <__libc_init_array+0x2e>
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dc0:	4798      	blx	r3
 8006dc2:	3501      	adds	r5, #1
 8006dc4:	e7ee      	b.n	8006da4 <__libc_init_array+0xc>
 8006dc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dca:	4798      	blx	r3
 8006dcc:	3501      	adds	r5, #1
 8006dce:	e7f2      	b.n	8006db6 <__libc_init_array+0x1e>
 8006dd0:	08007f94 	.word	0x08007f94
 8006dd4:	08007f94 	.word	0x08007f94
 8006dd8:	08007f94 	.word	0x08007f94
 8006ddc:	08007f98 	.word	0x08007f98

08006de0 <malloc>:
 8006de0:	4b02      	ldr	r3, [pc, #8]	; (8006dec <malloc+0xc>)
 8006de2:	4601      	mov	r1, r0
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	f000 b86b 	b.w	8006ec0 <_malloc_r>
 8006dea:	bf00      	nop
 8006dec:	20000164 	.word	0x20000164

08006df0 <free>:
 8006df0:	4b02      	ldr	r3, [pc, #8]	; (8006dfc <free+0xc>)
 8006df2:	4601      	mov	r1, r0
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	f000 b817 	b.w	8006e28 <_free_r>
 8006dfa:	bf00      	nop
 8006dfc:	20000164 	.word	0x20000164

08006e00 <memcpy>:
 8006e00:	b510      	push	{r4, lr}
 8006e02:	1e43      	subs	r3, r0, #1
 8006e04:	440a      	add	r2, r1
 8006e06:	4291      	cmp	r1, r2
 8006e08:	d100      	bne.n	8006e0c <memcpy+0xc>
 8006e0a:	bd10      	pop	{r4, pc}
 8006e0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e14:	e7f7      	b.n	8006e06 <memcpy+0x6>

08006e16 <memset>:
 8006e16:	4603      	mov	r3, r0
 8006e18:	4402      	add	r2, r0
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d100      	bne.n	8006e20 <memset+0xa>
 8006e1e:	4770      	bx	lr
 8006e20:	f803 1b01 	strb.w	r1, [r3], #1
 8006e24:	e7f9      	b.n	8006e1a <memset+0x4>
	...

08006e28 <_free_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	2900      	cmp	r1, #0
 8006e2e:	d043      	beq.n	8006eb8 <_free_r+0x90>
 8006e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e34:	1f0c      	subs	r4, r1, #4
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	bfb8      	it	lt
 8006e3a:	18e4      	addlt	r4, r4, r3
 8006e3c:	f000 f9b6 	bl	80071ac <__malloc_lock>
 8006e40:	4a1e      	ldr	r2, [pc, #120]	; (8006ebc <_free_r+0x94>)
 8006e42:	6813      	ldr	r3, [r2, #0]
 8006e44:	4610      	mov	r0, r2
 8006e46:	b933      	cbnz	r3, 8006e56 <_free_r+0x2e>
 8006e48:	6063      	str	r3, [r4, #4]
 8006e4a:	6014      	str	r4, [r2, #0]
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e52:	f000 b9ac 	b.w	80071ae <__malloc_unlock>
 8006e56:	42a3      	cmp	r3, r4
 8006e58:	d90b      	bls.n	8006e72 <_free_r+0x4a>
 8006e5a:	6821      	ldr	r1, [r4, #0]
 8006e5c:	1862      	adds	r2, r4, r1
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	bf01      	itttt	eq
 8006e62:	681a      	ldreq	r2, [r3, #0]
 8006e64:	685b      	ldreq	r3, [r3, #4]
 8006e66:	1852      	addeq	r2, r2, r1
 8006e68:	6022      	streq	r2, [r4, #0]
 8006e6a:	6063      	str	r3, [r4, #4]
 8006e6c:	6004      	str	r4, [r0, #0]
 8006e6e:	e7ed      	b.n	8006e4c <_free_r+0x24>
 8006e70:	4613      	mov	r3, r2
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	b10a      	cbz	r2, 8006e7a <_free_r+0x52>
 8006e76:	42a2      	cmp	r2, r4
 8006e78:	d9fa      	bls.n	8006e70 <_free_r+0x48>
 8006e7a:	6819      	ldr	r1, [r3, #0]
 8006e7c:	1858      	adds	r0, r3, r1
 8006e7e:	42a0      	cmp	r0, r4
 8006e80:	d10b      	bne.n	8006e9a <_free_r+0x72>
 8006e82:	6820      	ldr	r0, [r4, #0]
 8006e84:	4401      	add	r1, r0
 8006e86:	1858      	adds	r0, r3, r1
 8006e88:	4282      	cmp	r2, r0
 8006e8a:	6019      	str	r1, [r3, #0]
 8006e8c:	d1de      	bne.n	8006e4c <_free_r+0x24>
 8006e8e:	6810      	ldr	r0, [r2, #0]
 8006e90:	6852      	ldr	r2, [r2, #4]
 8006e92:	4401      	add	r1, r0
 8006e94:	6019      	str	r1, [r3, #0]
 8006e96:	605a      	str	r2, [r3, #4]
 8006e98:	e7d8      	b.n	8006e4c <_free_r+0x24>
 8006e9a:	d902      	bls.n	8006ea2 <_free_r+0x7a>
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	e7d4      	b.n	8006e4c <_free_r+0x24>
 8006ea2:	6820      	ldr	r0, [r4, #0]
 8006ea4:	1821      	adds	r1, r4, r0
 8006ea6:	428a      	cmp	r2, r1
 8006ea8:	bf01      	itttt	eq
 8006eaa:	6811      	ldreq	r1, [r2, #0]
 8006eac:	6852      	ldreq	r2, [r2, #4]
 8006eae:	1809      	addeq	r1, r1, r0
 8006eb0:	6021      	streq	r1, [r4, #0]
 8006eb2:	6062      	str	r2, [r4, #4]
 8006eb4:	605c      	str	r4, [r3, #4]
 8006eb6:	e7c9      	b.n	8006e4c <_free_r+0x24>
 8006eb8:	bd38      	pop	{r3, r4, r5, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000200 	.word	0x20000200

08006ec0 <_malloc_r>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	1ccd      	adds	r5, r1, #3
 8006ec4:	f025 0503 	bic.w	r5, r5, #3
 8006ec8:	3508      	adds	r5, #8
 8006eca:	2d0c      	cmp	r5, #12
 8006ecc:	bf38      	it	cc
 8006ece:	250c      	movcc	r5, #12
 8006ed0:	2d00      	cmp	r5, #0
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	db01      	blt.n	8006eda <_malloc_r+0x1a>
 8006ed6:	42a9      	cmp	r1, r5
 8006ed8:	d903      	bls.n	8006ee2 <_malloc_r+0x22>
 8006eda:	230c      	movs	r3, #12
 8006edc:	6033      	str	r3, [r6, #0]
 8006ede:	2000      	movs	r0, #0
 8006ee0:	bd70      	pop	{r4, r5, r6, pc}
 8006ee2:	f000 f963 	bl	80071ac <__malloc_lock>
 8006ee6:	4a21      	ldr	r2, [pc, #132]	; (8006f6c <_malloc_r+0xac>)
 8006ee8:	6814      	ldr	r4, [r2, #0]
 8006eea:	4621      	mov	r1, r4
 8006eec:	b991      	cbnz	r1, 8006f14 <_malloc_r+0x54>
 8006eee:	4c20      	ldr	r4, [pc, #128]	; (8006f70 <_malloc_r+0xb0>)
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	b91b      	cbnz	r3, 8006efc <_malloc_r+0x3c>
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f000 f869 	bl	8006fcc <_sbrk_r>
 8006efa:	6020      	str	r0, [r4, #0]
 8006efc:	4629      	mov	r1, r5
 8006efe:	4630      	mov	r0, r6
 8006f00:	f000 f864 	bl	8006fcc <_sbrk_r>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d124      	bne.n	8006f52 <_malloc_r+0x92>
 8006f08:	230c      	movs	r3, #12
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	6033      	str	r3, [r6, #0]
 8006f0e:	f000 f94e 	bl	80071ae <__malloc_unlock>
 8006f12:	e7e4      	b.n	8006ede <_malloc_r+0x1e>
 8006f14:	680b      	ldr	r3, [r1, #0]
 8006f16:	1b5b      	subs	r3, r3, r5
 8006f18:	d418      	bmi.n	8006f4c <_malloc_r+0x8c>
 8006f1a:	2b0b      	cmp	r3, #11
 8006f1c:	d90f      	bls.n	8006f3e <_malloc_r+0x7e>
 8006f1e:	600b      	str	r3, [r1, #0]
 8006f20:	18cc      	adds	r4, r1, r3
 8006f22:	50cd      	str	r5, [r1, r3]
 8006f24:	4630      	mov	r0, r6
 8006f26:	f000 f942 	bl	80071ae <__malloc_unlock>
 8006f2a:	f104 000b 	add.w	r0, r4, #11
 8006f2e:	1d23      	adds	r3, r4, #4
 8006f30:	f020 0007 	bic.w	r0, r0, #7
 8006f34:	1ac3      	subs	r3, r0, r3
 8006f36:	d0d3      	beq.n	8006ee0 <_malloc_r+0x20>
 8006f38:	425a      	negs	r2, r3
 8006f3a:	50e2      	str	r2, [r4, r3]
 8006f3c:	e7d0      	b.n	8006ee0 <_malloc_r+0x20>
 8006f3e:	684b      	ldr	r3, [r1, #4]
 8006f40:	428c      	cmp	r4, r1
 8006f42:	bf16      	itet	ne
 8006f44:	6063      	strne	r3, [r4, #4]
 8006f46:	6013      	streq	r3, [r2, #0]
 8006f48:	460c      	movne	r4, r1
 8006f4a:	e7eb      	b.n	8006f24 <_malloc_r+0x64>
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	6849      	ldr	r1, [r1, #4]
 8006f50:	e7cc      	b.n	8006eec <_malloc_r+0x2c>
 8006f52:	1cc4      	adds	r4, r0, #3
 8006f54:	f024 0403 	bic.w	r4, r4, #3
 8006f58:	42a0      	cmp	r0, r4
 8006f5a:	d005      	beq.n	8006f68 <_malloc_r+0xa8>
 8006f5c:	1a21      	subs	r1, r4, r0
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f000 f834 	bl	8006fcc <_sbrk_r>
 8006f64:	3001      	adds	r0, #1
 8006f66:	d0cf      	beq.n	8006f08 <_malloc_r+0x48>
 8006f68:	6025      	str	r5, [r4, #0]
 8006f6a:	e7db      	b.n	8006f24 <_malloc_r+0x64>
 8006f6c:	20000200 	.word	0x20000200
 8006f70:	20000204 	.word	0x20000204

08006f74 <iprintf>:
 8006f74:	b40f      	push	{r0, r1, r2, r3}
 8006f76:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <iprintf+0x2c>)
 8006f78:	b513      	push	{r0, r1, r4, lr}
 8006f7a:	681c      	ldr	r4, [r3, #0]
 8006f7c:	b124      	cbz	r4, 8006f88 <iprintf+0x14>
 8006f7e:	69a3      	ldr	r3, [r4, #24]
 8006f80:	b913      	cbnz	r3, 8006f88 <iprintf+0x14>
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f888 	bl	8007098 <__sinit>
 8006f88:	ab05      	add	r3, sp, #20
 8006f8a:	9a04      	ldr	r2, [sp, #16]
 8006f8c:	68a1      	ldr	r1, [r4, #8]
 8006f8e:	4620      	mov	r0, r4
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	f000 f935 	bl	8007200 <_vfiprintf_r>
 8006f96:	b002      	add	sp, #8
 8006f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f9c:	b004      	add	sp, #16
 8006f9e:	4770      	bx	lr
 8006fa0:	20000164 	.word	0x20000164

08006fa4 <putchar>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4b08      	ldr	r3, [pc, #32]	; (8006fc8 <putchar+0x24>)
 8006fa8:	4605      	mov	r5, r0
 8006faa:	681c      	ldr	r4, [r3, #0]
 8006fac:	b124      	cbz	r4, 8006fb8 <putchar+0x14>
 8006fae:	69a3      	ldr	r3, [r4, #24]
 8006fb0:	b913      	cbnz	r3, 8006fb8 <putchar+0x14>
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 f870 	bl	8007098 <__sinit>
 8006fb8:	68a2      	ldr	r2, [r4, #8]
 8006fba:	4629      	mov	r1, r5
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fc2:	f000 bbbb 	b.w	800773c <_putc_r>
 8006fc6:	bf00      	nop
 8006fc8:	20000164 	.word	0x20000164

08006fcc <_sbrk_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	2300      	movs	r3, #0
 8006fd0:	4c05      	ldr	r4, [pc, #20]	; (8006fe8 <_sbrk_r+0x1c>)
 8006fd2:	4605      	mov	r5, r0
 8006fd4:	4608      	mov	r0, r1
 8006fd6:	6023      	str	r3, [r4, #0]
 8006fd8:	f7fa f908 	bl	80011ec <_sbrk>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_sbrk_r+0x1a>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_sbrk_r+0x1a>
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20000c24 	.word	0x20000c24

08006fec <viprintf>:
 8006fec:	4b09      	ldr	r3, [pc, #36]	; (8007014 <viprintf+0x28>)
 8006fee:	b570      	push	{r4, r5, r6, lr}
 8006ff0:	681c      	ldr	r4, [r3, #0]
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	460e      	mov	r6, r1
 8006ff6:	b124      	cbz	r4, 8007002 <viprintf+0x16>
 8006ff8:	69a3      	ldr	r3, [r4, #24]
 8006ffa:	b913      	cbnz	r3, 8007002 <viprintf+0x16>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f000 f84b 	bl	8007098 <__sinit>
 8007002:	4633      	mov	r3, r6
 8007004:	462a      	mov	r2, r5
 8007006:	68a1      	ldr	r1, [r4, #8]
 8007008:	4620      	mov	r0, r4
 800700a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800700e:	f000 b8f7 	b.w	8007200 <_vfiprintf_r>
 8007012:	bf00      	nop
 8007014:	20000164 	.word	0x20000164

08007018 <std>:
 8007018:	2300      	movs	r3, #0
 800701a:	b510      	push	{r4, lr}
 800701c:	4604      	mov	r4, r0
 800701e:	e9c0 3300 	strd	r3, r3, [r0]
 8007022:	6083      	str	r3, [r0, #8]
 8007024:	8181      	strh	r1, [r0, #12]
 8007026:	6643      	str	r3, [r0, #100]	; 0x64
 8007028:	81c2      	strh	r2, [r0, #14]
 800702a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800702e:	6183      	str	r3, [r0, #24]
 8007030:	4619      	mov	r1, r3
 8007032:	2208      	movs	r2, #8
 8007034:	305c      	adds	r0, #92	; 0x5c
 8007036:	f7ff feee 	bl	8006e16 <memset>
 800703a:	4b05      	ldr	r3, [pc, #20]	; (8007050 <std+0x38>)
 800703c:	6224      	str	r4, [r4, #32]
 800703e:	6263      	str	r3, [r4, #36]	; 0x24
 8007040:	4b04      	ldr	r3, [pc, #16]	; (8007054 <std+0x3c>)
 8007042:	62a3      	str	r3, [r4, #40]	; 0x28
 8007044:	4b04      	ldr	r3, [pc, #16]	; (8007058 <std+0x40>)
 8007046:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007048:	4b04      	ldr	r3, [pc, #16]	; (800705c <std+0x44>)
 800704a:	6323      	str	r3, [r4, #48]	; 0x30
 800704c:	bd10      	pop	{r4, pc}
 800704e:	bf00      	nop
 8007050:	080077a9 	.word	0x080077a9
 8007054:	080077cb 	.word	0x080077cb
 8007058:	08007803 	.word	0x08007803
 800705c:	08007827 	.word	0x08007827

08007060 <_cleanup_r>:
 8007060:	4901      	ldr	r1, [pc, #4]	; (8007068 <_cleanup_r+0x8>)
 8007062:	f000 b885 	b.w	8007170 <_fwalk_reent>
 8007066:	bf00      	nop
 8007068:	08007b01 	.word	0x08007b01

0800706c <__sfmoreglue>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	2568      	movs	r5, #104	; 0x68
 8007070:	1e4a      	subs	r2, r1, #1
 8007072:	4355      	muls	r5, r2
 8007074:	460e      	mov	r6, r1
 8007076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800707a:	f7ff ff21 	bl	8006ec0 <_malloc_r>
 800707e:	4604      	mov	r4, r0
 8007080:	b140      	cbz	r0, 8007094 <__sfmoreglue+0x28>
 8007082:	2100      	movs	r1, #0
 8007084:	e9c0 1600 	strd	r1, r6, [r0]
 8007088:	300c      	adds	r0, #12
 800708a:	60a0      	str	r0, [r4, #8]
 800708c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007090:	f7ff fec1 	bl	8006e16 <memset>
 8007094:	4620      	mov	r0, r4
 8007096:	bd70      	pop	{r4, r5, r6, pc}

08007098 <__sinit>:
 8007098:	6983      	ldr	r3, [r0, #24]
 800709a:	b510      	push	{r4, lr}
 800709c:	4604      	mov	r4, r0
 800709e:	bb33      	cbnz	r3, 80070ee <__sinit+0x56>
 80070a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80070a4:	6503      	str	r3, [r0, #80]	; 0x50
 80070a6:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <__sinit+0x58>)
 80070a8:	4a12      	ldr	r2, [pc, #72]	; (80070f4 <__sinit+0x5c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6282      	str	r2, [r0, #40]	; 0x28
 80070ae:	4298      	cmp	r0, r3
 80070b0:	bf04      	itt	eq
 80070b2:	2301      	moveq	r3, #1
 80070b4:	6183      	streq	r3, [r0, #24]
 80070b6:	f000 f81f 	bl	80070f8 <__sfp>
 80070ba:	6060      	str	r0, [r4, #4]
 80070bc:	4620      	mov	r0, r4
 80070be:	f000 f81b 	bl	80070f8 <__sfp>
 80070c2:	60a0      	str	r0, [r4, #8]
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 f817 	bl	80070f8 <__sfp>
 80070ca:	2200      	movs	r2, #0
 80070cc:	60e0      	str	r0, [r4, #12]
 80070ce:	2104      	movs	r1, #4
 80070d0:	6860      	ldr	r0, [r4, #4]
 80070d2:	f7ff ffa1 	bl	8007018 <std>
 80070d6:	2201      	movs	r2, #1
 80070d8:	2109      	movs	r1, #9
 80070da:	68a0      	ldr	r0, [r4, #8]
 80070dc:	f7ff ff9c 	bl	8007018 <std>
 80070e0:	2202      	movs	r2, #2
 80070e2:	2112      	movs	r1, #18
 80070e4:	68e0      	ldr	r0, [r4, #12]
 80070e6:	f7ff ff97 	bl	8007018 <std>
 80070ea:	2301      	movs	r3, #1
 80070ec:	61a3      	str	r3, [r4, #24]
 80070ee:	bd10      	pop	{r4, pc}
 80070f0:	08007efc 	.word	0x08007efc
 80070f4:	08007061 	.word	0x08007061

080070f8 <__sfp>:
 80070f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fa:	4b1b      	ldr	r3, [pc, #108]	; (8007168 <__sfp+0x70>)
 80070fc:	4607      	mov	r7, r0
 80070fe:	681e      	ldr	r6, [r3, #0]
 8007100:	69b3      	ldr	r3, [r6, #24]
 8007102:	b913      	cbnz	r3, 800710a <__sfp+0x12>
 8007104:	4630      	mov	r0, r6
 8007106:	f7ff ffc7 	bl	8007098 <__sinit>
 800710a:	3648      	adds	r6, #72	; 0x48
 800710c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007110:	3b01      	subs	r3, #1
 8007112:	d503      	bpl.n	800711c <__sfp+0x24>
 8007114:	6833      	ldr	r3, [r6, #0]
 8007116:	b133      	cbz	r3, 8007126 <__sfp+0x2e>
 8007118:	6836      	ldr	r6, [r6, #0]
 800711a:	e7f7      	b.n	800710c <__sfp+0x14>
 800711c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007120:	b16d      	cbz	r5, 800713e <__sfp+0x46>
 8007122:	3468      	adds	r4, #104	; 0x68
 8007124:	e7f4      	b.n	8007110 <__sfp+0x18>
 8007126:	2104      	movs	r1, #4
 8007128:	4638      	mov	r0, r7
 800712a:	f7ff ff9f 	bl	800706c <__sfmoreglue>
 800712e:	6030      	str	r0, [r6, #0]
 8007130:	2800      	cmp	r0, #0
 8007132:	d1f1      	bne.n	8007118 <__sfp+0x20>
 8007134:	230c      	movs	r3, #12
 8007136:	4604      	mov	r4, r0
 8007138:	603b      	str	r3, [r7, #0]
 800713a:	4620      	mov	r0, r4
 800713c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800713e:	4b0b      	ldr	r3, [pc, #44]	; (800716c <__sfp+0x74>)
 8007140:	6665      	str	r5, [r4, #100]	; 0x64
 8007142:	e9c4 5500 	strd	r5, r5, [r4]
 8007146:	60a5      	str	r5, [r4, #8]
 8007148:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800714c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007150:	2208      	movs	r2, #8
 8007152:	4629      	mov	r1, r5
 8007154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007158:	f7ff fe5d 	bl	8006e16 <memset>
 800715c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007164:	e7e9      	b.n	800713a <__sfp+0x42>
 8007166:	bf00      	nop
 8007168:	08007efc 	.word	0x08007efc
 800716c:	ffff0001 	.word	0xffff0001

08007170 <_fwalk_reent>:
 8007170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007174:	4680      	mov	r8, r0
 8007176:	4689      	mov	r9, r1
 8007178:	2600      	movs	r6, #0
 800717a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800717e:	b914      	cbnz	r4, 8007186 <_fwalk_reent+0x16>
 8007180:	4630      	mov	r0, r6
 8007182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007186:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800718a:	3f01      	subs	r7, #1
 800718c:	d501      	bpl.n	8007192 <_fwalk_reent+0x22>
 800718e:	6824      	ldr	r4, [r4, #0]
 8007190:	e7f5      	b.n	800717e <_fwalk_reent+0xe>
 8007192:	89ab      	ldrh	r3, [r5, #12]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d907      	bls.n	80071a8 <_fwalk_reent+0x38>
 8007198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800719c:	3301      	adds	r3, #1
 800719e:	d003      	beq.n	80071a8 <_fwalk_reent+0x38>
 80071a0:	4629      	mov	r1, r5
 80071a2:	4640      	mov	r0, r8
 80071a4:	47c8      	blx	r9
 80071a6:	4306      	orrs	r6, r0
 80071a8:	3568      	adds	r5, #104	; 0x68
 80071aa:	e7ee      	b.n	800718a <_fwalk_reent+0x1a>

080071ac <__malloc_lock>:
 80071ac:	4770      	bx	lr

080071ae <__malloc_unlock>:
 80071ae:	4770      	bx	lr

080071b0 <__sfputc_r>:
 80071b0:	6893      	ldr	r3, [r2, #8]
 80071b2:	b410      	push	{r4}
 80071b4:	3b01      	subs	r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	6093      	str	r3, [r2, #8]
 80071ba:	da07      	bge.n	80071cc <__sfputc_r+0x1c>
 80071bc:	6994      	ldr	r4, [r2, #24]
 80071be:	42a3      	cmp	r3, r4
 80071c0:	db01      	blt.n	80071c6 <__sfputc_r+0x16>
 80071c2:	290a      	cmp	r1, #10
 80071c4:	d102      	bne.n	80071cc <__sfputc_r+0x1c>
 80071c6:	bc10      	pop	{r4}
 80071c8:	f000 bb32 	b.w	8007830 <__swbuf_r>
 80071cc:	6813      	ldr	r3, [r2, #0]
 80071ce:	1c58      	adds	r0, r3, #1
 80071d0:	6010      	str	r0, [r2, #0]
 80071d2:	7019      	strb	r1, [r3, #0]
 80071d4:	4608      	mov	r0, r1
 80071d6:	bc10      	pop	{r4}
 80071d8:	4770      	bx	lr

080071da <__sfputs_r>:
 80071da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071dc:	4606      	mov	r6, r0
 80071de:	460f      	mov	r7, r1
 80071e0:	4614      	mov	r4, r2
 80071e2:	18d5      	adds	r5, r2, r3
 80071e4:	42ac      	cmp	r4, r5
 80071e6:	d101      	bne.n	80071ec <__sfputs_r+0x12>
 80071e8:	2000      	movs	r0, #0
 80071ea:	e007      	b.n	80071fc <__sfputs_r+0x22>
 80071ec:	463a      	mov	r2, r7
 80071ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7ff ffdc 	bl	80071b0 <__sfputc_r>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d1f3      	bne.n	80071e4 <__sfputs_r+0xa>
 80071fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007200 <_vfiprintf_r>:
 8007200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	460c      	mov	r4, r1
 8007206:	b09d      	sub	sp, #116	; 0x74
 8007208:	4617      	mov	r7, r2
 800720a:	461d      	mov	r5, r3
 800720c:	4606      	mov	r6, r0
 800720e:	b118      	cbz	r0, 8007218 <_vfiprintf_r+0x18>
 8007210:	6983      	ldr	r3, [r0, #24]
 8007212:	b90b      	cbnz	r3, 8007218 <_vfiprintf_r+0x18>
 8007214:	f7ff ff40 	bl	8007098 <__sinit>
 8007218:	4b7c      	ldr	r3, [pc, #496]	; (800740c <_vfiprintf_r+0x20c>)
 800721a:	429c      	cmp	r4, r3
 800721c:	d158      	bne.n	80072d0 <_vfiprintf_r+0xd0>
 800721e:	6874      	ldr	r4, [r6, #4]
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	0718      	lsls	r0, r3, #28
 8007224:	d55e      	bpl.n	80072e4 <_vfiprintf_r+0xe4>
 8007226:	6923      	ldr	r3, [r4, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d05b      	beq.n	80072e4 <_vfiprintf_r+0xe4>
 800722c:	2300      	movs	r3, #0
 800722e:	9309      	str	r3, [sp, #36]	; 0x24
 8007230:	2320      	movs	r3, #32
 8007232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007236:	2330      	movs	r3, #48	; 0x30
 8007238:	f04f 0b01 	mov.w	fp, #1
 800723c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007240:	9503      	str	r5, [sp, #12]
 8007242:	46b8      	mov	r8, r7
 8007244:	4645      	mov	r5, r8
 8007246:	f815 3b01 	ldrb.w	r3, [r5], #1
 800724a:	b10b      	cbz	r3, 8007250 <_vfiprintf_r+0x50>
 800724c:	2b25      	cmp	r3, #37	; 0x25
 800724e:	d154      	bne.n	80072fa <_vfiprintf_r+0xfa>
 8007250:	ebb8 0a07 	subs.w	sl, r8, r7
 8007254:	d00b      	beq.n	800726e <_vfiprintf_r+0x6e>
 8007256:	4653      	mov	r3, sl
 8007258:	463a      	mov	r2, r7
 800725a:	4621      	mov	r1, r4
 800725c:	4630      	mov	r0, r6
 800725e:	f7ff ffbc 	bl	80071da <__sfputs_r>
 8007262:	3001      	adds	r0, #1
 8007264:	f000 80c2 	beq.w	80073ec <_vfiprintf_r+0x1ec>
 8007268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726a:	4453      	add	r3, sl
 800726c:	9309      	str	r3, [sp, #36]	; 0x24
 800726e:	f898 3000 	ldrb.w	r3, [r8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80ba 	beq.w	80073ec <_vfiprintf_r+0x1ec>
 8007278:	2300      	movs	r3, #0
 800727a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800727e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007282:	9304      	str	r3, [sp, #16]
 8007284:	9307      	str	r3, [sp, #28]
 8007286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800728a:	931a      	str	r3, [sp, #104]	; 0x68
 800728c:	46a8      	mov	r8, r5
 800728e:	2205      	movs	r2, #5
 8007290:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007294:	485e      	ldr	r0, [pc, #376]	; (8007410 <_vfiprintf_r+0x210>)
 8007296:	f000 fcd3 	bl	8007c40 <memchr>
 800729a:	9b04      	ldr	r3, [sp, #16]
 800729c:	bb78      	cbnz	r0, 80072fe <_vfiprintf_r+0xfe>
 800729e:	06d9      	lsls	r1, r3, #27
 80072a0:	bf44      	itt	mi
 80072a2:	2220      	movmi	r2, #32
 80072a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80072a8:	071a      	lsls	r2, r3, #28
 80072aa:	bf44      	itt	mi
 80072ac:	222b      	movmi	r2, #43	; 0x2b
 80072ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80072b2:	782a      	ldrb	r2, [r5, #0]
 80072b4:	2a2a      	cmp	r2, #42	; 0x2a
 80072b6:	d02a      	beq.n	800730e <_vfiprintf_r+0x10e>
 80072b8:	46a8      	mov	r8, r5
 80072ba:	2000      	movs	r0, #0
 80072bc:	250a      	movs	r5, #10
 80072be:	9a07      	ldr	r2, [sp, #28]
 80072c0:	4641      	mov	r1, r8
 80072c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072c6:	3b30      	subs	r3, #48	; 0x30
 80072c8:	2b09      	cmp	r3, #9
 80072ca:	d969      	bls.n	80073a0 <_vfiprintf_r+0x1a0>
 80072cc:	b360      	cbz	r0, 8007328 <_vfiprintf_r+0x128>
 80072ce:	e024      	b.n	800731a <_vfiprintf_r+0x11a>
 80072d0:	4b50      	ldr	r3, [pc, #320]	; (8007414 <_vfiprintf_r+0x214>)
 80072d2:	429c      	cmp	r4, r3
 80072d4:	d101      	bne.n	80072da <_vfiprintf_r+0xda>
 80072d6:	68b4      	ldr	r4, [r6, #8]
 80072d8:	e7a2      	b.n	8007220 <_vfiprintf_r+0x20>
 80072da:	4b4f      	ldr	r3, [pc, #316]	; (8007418 <_vfiprintf_r+0x218>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	bf08      	it	eq
 80072e0:	68f4      	ldreq	r4, [r6, #12]
 80072e2:	e79d      	b.n	8007220 <_vfiprintf_r+0x20>
 80072e4:	4621      	mov	r1, r4
 80072e6:	4630      	mov	r0, r6
 80072e8:	f000 fb06 	bl	80078f8 <__swsetup_r>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d09d      	beq.n	800722c <_vfiprintf_r+0x2c>
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f4:	b01d      	add	sp, #116	; 0x74
 80072f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fa:	46a8      	mov	r8, r5
 80072fc:	e7a2      	b.n	8007244 <_vfiprintf_r+0x44>
 80072fe:	4a44      	ldr	r2, [pc, #272]	; (8007410 <_vfiprintf_r+0x210>)
 8007300:	4645      	mov	r5, r8
 8007302:	1a80      	subs	r0, r0, r2
 8007304:	fa0b f000 	lsl.w	r0, fp, r0
 8007308:	4318      	orrs	r0, r3
 800730a:	9004      	str	r0, [sp, #16]
 800730c:	e7be      	b.n	800728c <_vfiprintf_r+0x8c>
 800730e:	9a03      	ldr	r2, [sp, #12]
 8007310:	1d11      	adds	r1, r2, #4
 8007312:	6812      	ldr	r2, [r2, #0]
 8007314:	9103      	str	r1, [sp, #12]
 8007316:	2a00      	cmp	r2, #0
 8007318:	db01      	blt.n	800731e <_vfiprintf_r+0x11e>
 800731a:	9207      	str	r2, [sp, #28]
 800731c:	e004      	b.n	8007328 <_vfiprintf_r+0x128>
 800731e:	4252      	negs	r2, r2
 8007320:	f043 0302 	orr.w	r3, r3, #2
 8007324:	9207      	str	r2, [sp, #28]
 8007326:	9304      	str	r3, [sp, #16]
 8007328:	f898 3000 	ldrb.w	r3, [r8]
 800732c:	2b2e      	cmp	r3, #46	; 0x2e
 800732e:	d10e      	bne.n	800734e <_vfiprintf_r+0x14e>
 8007330:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007334:	2b2a      	cmp	r3, #42	; 0x2a
 8007336:	d138      	bne.n	80073aa <_vfiprintf_r+0x1aa>
 8007338:	9b03      	ldr	r3, [sp, #12]
 800733a:	f108 0802 	add.w	r8, r8, #2
 800733e:	1d1a      	adds	r2, r3, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	9203      	str	r2, [sp, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfb8      	it	lt
 8007348:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800734c:	9305      	str	r3, [sp, #20]
 800734e:	4d33      	ldr	r5, [pc, #204]	; (800741c <_vfiprintf_r+0x21c>)
 8007350:	2203      	movs	r2, #3
 8007352:	f898 1000 	ldrb.w	r1, [r8]
 8007356:	4628      	mov	r0, r5
 8007358:	f000 fc72 	bl	8007c40 <memchr>
 800735c:	b140      	cbz	r0, 8007370 <_vfiprintf_r+0x170>
 800735e:	2340      	movs	r3, #64	; 0x40
 8007360:	1b40      	subs	r0, r0, r5
 8007362:	fa03 f000 	lsl.w	r0, r3, r0
 8007366:	9b04      	ldr	r3, [sp, #16]
 8007368:	f108 0801 	add.w	r8, r8, #1
 800736c:	4303      	orrs	r3, r0
 800736e:	9304      	str	r3, [sp, #16]
 8007370:	f898 1000 	ldrb.w	r1, [r8]
 8007374:	2206      	movs	r2, #6
 8007376:	482a      	ldr	r0, [pc, #168]	; (8007420 <_vfiprintf_r+0x220>)
 8007378:	f108 0701 	add.w	r7, r8, #1
 800737c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007380:	f000 fc5e 	bl	8007c40 <memchr>
 8007384:	2800      	cmp	r0, #0
 8007386:	d037      	beq.n	80073f8 <_vfiprintf_r+0x1f8>
 8007388:	4b26      	ldr	r3, [pc, #152]	; (8007424 <_vfiprintf_r+0x224>)
 800738a:	bb1b      	cbnz	r3, 80073d4 <_vfiprintf_r+0x1d4>
 800738c:	9b03      	ldr	r3, [sp, #12]
 800738e:	3307      	adds	r3, #7
 8007390:	f023 0307 	bic.w	r3, r3, #7
 8007394:	3308      	adds	r3, #8
 8007396:	9303      	str	r3, [sp, #12]
 8007398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739a:	444b      	add	r3, r9
 800739c:	9309      	str	r3, [sp, #36]	; 0x24
 800739e:	e750      	b.n	8007242 <_vfiprintf_r+0x42>
 80073a0:	fb05 3202 	mla	r2, r5, r2, r3
 80073a4:	2001      	movs	r0, #1
 80073a6:	4688      	mov	r8, r1
 80073a8:	e78a      	b.n	80072c0 <_vfiprintf_r+0xc0>
 80073aa:	2300      	movs	r3, #0
 80073ac:	250a      	movs	r5, #10
 80073ae:	4619      	mov	r1, r3
 80073b0:	f108 0801 	add.w	r8, r8, #1
 80073b4:	9305      	str	r3, [sp, #20]
 80073b6:	4640      	mov	r0, r8
 80073b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073bc:	3a30      	subs	r2, #48	; 0x30
 80073be:	2a09      	cmp	r2, #9
 80073c0:	d903      	bls.n	80073ca <_vfiprintf_r+0x1ca>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0c3      	beq.n	800734e <_vfiprintf_r+0x14e>
 80073c6:	9105      	str	r1, [sp, #20]
 80073c8:	e7c1      	b.n	800734e <_vfiprintf_r+0x14e>
 80073ca:	fb05 2101 	mla	r1, r5, r1, r2
 80073ce:	2301      	movs	r3, #1
 80073d0:	4680      	mov	r8, r0
 80073d2:	e7f0      	b.n	80073b6 <_vfiprintf_r+0x1b6>
 80073d4:	ab03      	add	r3, sp, #12
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	4622      	mov	r2, r4
 80073da:	4b13      	ldr	r3, [pc, #76]	; (8007428 <_vfiprintf_r+0x228>)
 80073dc:	a904      	add	r1, sp, #16
 80073de:	4630      	mov	r0, r6
 80073e0:	f3af 8000 	nop.w
 80073e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80073e8:	4681      	mov	r9, r0
 80073ea:	d1d5      	bne.n	8007398 <_vfiprintf_r+0x198>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	065b      	lsls	r3, r3, #25
 80073f0:	f53f af7e 	bmi.w	80072f0 <_vfiprintf_r+0xf0>
 80073f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073f6:	e77d      	b.n	80072f4 <_vfiprintf_r+0xf4>
 80073f8:	ab03      	add	r3, sp, #12
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	4622      	mov	r2, r4
 80073fe:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <_vfiprintf_r+0x228>)
 8007400:	a904      	add	r1, sp, #16
 8007402:	4630      	mov	r0, r6
 8007404:	f000 f888 	bl	8007518 <_printf_i>
 8007408:	e7ec      	b.n	80073e4 <_vfiprintf_r+0x1e4>
 800740a:	bf00      	nop
 800740c:	08007f20 	.word	0x08007f20
 8007410:	08007f60 	.word	0x08007f60
 8007414:	08007f40 	.word	0x08007f40
 8007418:	08007f00 	.word	0x08007f00
 800741c:	08007f66 	.word	0x08007f66
 8007420:	08007f6a 	.word	0x08007f6a
 8007424:	00000000 	.word	0x00000000
 8007428:	080071db 	.word	0x080071db

0800742c <_printf_common>:
 800742c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007430:	4691      	mov	r9, r2
 8007432:	461f      	mov	r7, r3
 8007434:	688a      	ldr	r2, [r1, #8]
 8007436:	690b      	ldr	r3, [r1, #16]
 8007438:	4606      	mov	r6, r0
 800743a:	4293      	cmp	r3, r2
 800743c:	bfb8      	it	lt
 800743e:	4613      	movlt	r3, r2
 8007440:	f8c9 3000 	str.w	r3, [r9]
 8007444:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007448:	460c      	mov	r4, r1
 800744a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800744e:	b112      	cbz	r2, 8007456 <_printf_common+0x2a>
 8007450:	3301      	adds	r3, #1
 8007452:	f8c9 3000 	str.w	r3, [r9]
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	0699      	lsls	r1, r3, #26
 800745a:	bf42      	ittt	mi
 800745c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007460:	3302      	addmi	r3, #2
 8007462:	f8c9 3000 	strmi.w	r3, [r9]
 8007466:	6825      	ldr	r5, [r4, #0]
 8007468:	f015 0506 	ands.w	r5, r5, #6
 800746c:	d107      	bne.n	800747e <_printf_common+0x52>
 800746e:	f104 0a19 	add.w	sl, r4, #25
 8007472:	68e3      	ldr	r3, [r4, #12]
 8007474:	f8d9 2000 	ldr.w	r2, [r9]
 8007478:	1a9b      	subs	r3, r3, r2
 800747a:	42ab      	cmp	r3, r5
 800747c:	dc29      	bgt.n	80074d2 <_printf_common+0xa6>
 800747e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007482:	6822      	ldr	r2, [r4, #0]
 8007484:	3300      	adds	r3, #0
 8007486:	bf18      	it	ne
 8007488:	2301      	movne	r3, #1
 800748a:	0692      	lsls	r2, r2, #26
 800748c:	d42e      	bmi.n	80074ec <_printf_common+0xc0>
 800748e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007492:	4639      	mov	r1, r7
 8007494:	4630      	mov	r0, r6
 8007496:	47c0      	blx	r8
 8007498:	3001      	adds	r0, #1
 800749a:	d021      	beq.n	80074e0 <_printf_common+0xb4>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	68e5      	ldr	r5, [r4, #12]
 80074a0:	f003 0306 	and.w	r3, r3, #6
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	bf18      	it	ne
 80074a8:	2500      	movne	r5, #0
 80074aa:	f8d9 2000 	ldr.w	r2, [r9]
 80074ae:	f04f 0900 	mov.w	r9, #0
 80074b2:	bf08      	it	eq
 80074b4:	1aad      	subeq	r5, r5, r2
 80074b6:	68a3      	ldr	r3, [r4, #8]
 80074b8:	6922      	ldr	r2, [r4, #16]
 80074ba:	bf08      	it	eq
 80074bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074c0:	4293      	cmp	r3, r2
 80074c2:	bfc4      	itt	gt
 80074c4:	1a9b      	subgt	r3, r3, r2
 80074c6:	18ed      	addgt	r5, r5, r3
 80074c8:	341a      	adds	r4, #26
 80074ca:	454d      	cmp	r5, r9
 80074cc:	d11a      	bne.n	8007504 <_printf_common+0xd8>
 80074ce:	2000      	movs	r0, #0
 80074d0:	e008      	b.n	80074e4 <_printf_common+0xb8>
 80074d2:	2301      	movs	r3, #1
 80074d4:	4652      	mov	r2, sl
 80074d6:	4639      	mov	r1, r7
 80074d8:	4630      	mov	r0, r6
 80074da:	47c0      	blx	r8
 80074dc:	3001      	adds	r0, #1
 80074de:	d103      	bne.n	80074e8 <_printf_common+0xbc>
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e8:	3501      	adds	r5, #1
 80074ea:	e7c2      	b.n	8007472 <_printf_common+0x46>
 80074ec:	2030      	movs	r0, #48	; 0x30
 80074ee:	18e1      	adds	r1, r4, r3
 80074f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074fa:	4422      	add	r2, r4
 80074fc:	3302      	adds	r3, #2
 80074fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007502:	e7c4      	b.n	800748e <_printf_common+0x62>
 8007504:	2301      	movs	r3, #1
 8007506:	4622      	mov	r2, r4
 8007508:	4639      	mov	r1, r7
 800750a:	4630      	mov	r0, r6
 800750c:	47c0      	blx	r8
 800750e:	3001      	adds	r0, #1
 8007510:	d0e6      	beq.n	80074e0 <_printf_common+0xb4>
 8007512:	f109 0901 	add.w	r9, r9, #1
 8007516:	e7d8      	b.n	80074ca <_printf_common+0x9e>

08007518 <_printf_i>:
 8007518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800751c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007520:	460c      	mov	r4, r1
 8007522:	7e09      	ldrb	r1, [r1, #24]
 8007524:	b085      	sub	sp, #20
 8007526:	296e      	cmp	r1, #110	; 0x6e
 8007528:	4617      	mov	r7, r2
 800752a:	4606      	mov	r6, r0
 800752c:	4698      	mov	r8, r3
 800752e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007530:	f000 80b3 	beq.w	800769a <_printf_i+0x182>
 8007534:	d822      	bhi.n	800757c <_printf_i+0x64>
 8007536:	2963      	cmp	r1, #99	; 0x63
 8007538:	d036      	beq.n	80075a8 <_printf_i+0x90>
 800753a:	d80a      	bhi.n	8007552 <_printf_i+0x3a>
 800753c:	2900      	cmp	r1, #0
 800753e:	f000 80b9 	beq.w	80076b4 <_printf_i+0x19c>
 8007542:	2958      	cmp	r1, #88	; 0x58
 8007544:	f000 8083 	beq.w	800764e <_printf_i+0x136>
 8007548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800754c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007550:	e032      	b.n	80075b8 <_printf_i+0xa0>
 8007552:	2964      	cmp	r1, #100	; 0x64
 8007554:	d001      	beq.n	800755a <_printf_i+0x42>
 8007556:	2969      	cmp	r1, #105	; 0x69
 8007558:	d1f6      	bne.n	8007548 <_printf_i+0x30>
 800755a:	6820      	ldr	r0, [r4, #0]
 800755c:	6813      	ldr	r3, [r2, #0]
 800755e:	0605      	lsls	r5, r0, #24
 8007560:	f103 0104 	add.w	r1, r3, #4
 8007564:	d52a      	bpl.n	80075bc <_printf_i+0xa4>
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6011      	str	r1, [r2, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	da03      	bge.n	8007576 <_printf_i+0x5e>
 800756e:	222d      	movs	r2, #45	; 0x2d
 8007570:	425b      	negs	r3, r3
 8007572:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007576:	486f      	ldr	r0, [pc, #444]	; (8007734 <_printf_i+0x21c>)
 8007578:	220a      	movs	r2, #10
 800757a:	e039      	b.n	80075f0 <_printf_i+0xd8>
 800757c:	2973      	cmp	r1, #115	; 0x73
 800757e:	f000 809d 	beq.w	80076bc <_printf_i+0x1a4>
 8007582:	d808      	bhi.n	8007596 <_printf_i+0x7e>
 8007584:	296f      	cmp	r1, #111	; 0x6f
 8007586:	d020      	beq.n	80075ca <_printf_i+0xb2>
 8007588:	2970      	cmp	r1, #112	; 0x70
 800758a:	d1dd      	bne.n	8007548 <_printf_i+0x30>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	f043 0320 	orr.w	r3, r3, #32
 8007592:	6023      	str	r3, [r4, #0]
 8007594:	e003      	b.n	800759e <_printf_i+0x86>
 8007596:	2975      	cmp	r1, #117	; 0x75
 8007598:	d017      	beq.n	80075ca <_printf_i+0xb2>
 800759a:	2978      	cmp	r1, #120	; 0x78
 800759c:	d1d4      	bne.n	8007548 <_printf_i+0x30>
 800759e:	2378      	movs	r3, #120	; 0x78
 80075a0:	4865      	ldr	r0, [pc, #404]	; (8007738 <_printf_i+0x220>)
 80075a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075a6:	e055      	b.n	8007654 <_printf_i+0x13c>
 80075a8:	6813      	ldr	r3, [r2, #0]
 80075aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075ae:	1d19      	adds	r1, r3, #4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6011      	str	r1, [r2, #0]
 80075b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075b8:	2301      	movs	r3, #1
 80075ba:	e08c      	b.n	80076d6 <_printf_i+0x1be>
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075c2:	6011      	str	r1, [r2, #0]
 80075c4:	bf18      	it	ne
 80075c6:	b21b      	sxthne	r3, r3
 80075c8:	e7cf      	b.n	800756a <_printf_i+0x52>
 80075ca:	6813      	ldr	r3, [r2, #0]
 80075cc:	6825      	ldr	r5, [r4, #0]
 80075ce:	1d18      	adds	r0, r3, #4
 80075d0:	6010      	str	r0, [r2, #0]
 80075d2:	0628      	lsls	r0, r5, #24
 80075d4:	d501      	bpl.n	80075da <_printf_i+0xc2>
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	e002      	b.n	80075e0 <_printf_i+0xc8>
 80075da:	0668      	lsls	r0, r5, #25
 80075dc:	d5fb      	bpl.n	80075d6 <_printf_i+0xbe>
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	296f      	cmp	r1, #111	; 0x6f
 80075e2:	bf14      	ite	ne
 80075e4:	220a      	movne	r2, #10
 80075e6:	2208      	moveq	r2, #8
 80075e8:	4852      	ldr	r0, [pc, #328]	; (8007734 <_printf_i+0x21c>)
 80075ea:	2100      	movs	r1, #0
 80075ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075f0:	6865      	ldr	r5, [r4, #4]
 80075f2:	2d00      	cmp	r5, #0
 80075f4:	60a5      	str	r5, [r4, #8]
 80075f6:	f2c0 8095 	blt.w	8007724 <_printf_i+0x20c>
 80075fa:	6821      	ldr	r1, [r4, #0]
 80075fc:	f021 0104 	bic.w	r1, r1, #4
 8007600:	6021      	str	r1, [r4, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d13d      	bne.n	8007682 <_printf_i+0x16a>
 8007606:	2d00      	cmp	r5, #0
 8007608:	f040 808e 	bne.w	8007728 <_printf_i+0x210>
 800760c:	4665      	mov	r5, ip
 800760e:	2a08      	cmp	r2, #8
 8007610:	d10b      	bne.n	800762a <_printf_i+0x112>
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	07db      	lsls	r3, r3, #31
 8007616:	d508      	bpl.n	800762a <_printf_i+0x112>
 8007618:	6923      	ldr	r3, [r4, #16]
 800761a:	6862      	ldr	r2, [r4, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	bfde      	ittt	le
 8007620:	2330      	movle	r3, #48	; 0x30
 8007622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007626:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800762a:	ebac 0305 	sub.w	r3, ip, r5
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	f8cd 8000 	str.w	r8, [sp]
 8007634:	463b      	mov	r3, r7
 8007636:	aa03      	add	r2, sp, #12
 8007638:	4621      	mov	r1, r4
 800763a:	4630      	mov	r0, r6
 800763c:	f7ff fef6 	bl	800742c <_printf_common>
 8007640:	3001      	adds	r0, #1
 8007642:	d14d      	bne.n	80076e0 <_printf_i+0x1c8>
 8007644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007648:	b005      	add	sp, #20
 800764a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800764e:	4839      	ldr	r0, [pc, #228]	; (8007734 <_printf_i+0x21c>)
 8007650:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007654:	6813      	ldr	r3, [r2, #0]
 8007656:	6821      	ldr	r1, [r4, #0]
 8007658:	1d1d      	adds	r5, r3, #4
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6015      	str	r5, [r2, #0]
 800765e:	060a      	lsls	r2, r1, #24
 8007660:	d50b      	bpl.n	800767a <_printf_i+0x162>
 8007662:	07ca      	lsls	r2, r1, #31
 8007664:	bf44      	itt	mi
 8007666:	f041 0120 	orrmi.w	r1, r1, #32
 800766a:	6021      	strmi	r1, [r4, #0]
 800766c:	b91b      	cbnz	r3, 8007676 <_printf_i+0x15e>
 800766e:	6822      	ldr	r2, [r4, #0]
 8007670:	f022 0220 	bic.w	r2, r2, #32
 8007674:	6022      	str	r2, [r4, #0]
 8007676:	2210      	movs	r2, #16
 8007678:	e7b7      	b.n	80075ea <_printf_i+0xd2>
 800767a:	064d      	lsls	r5, r1, #25
 800767c:	bf48      	it	mi
 800767e:	b29b      	uxthmi	r3, r3
 8007680:	e7ef      	b.n	8007662 <_printf_i+0x14a>
 8007682:	4665      	mov	r5, ip
 8007684:	fbb3 f1f2 	udiv	r1, r3, r2
 8007688:	fb02 3311 	mls	r3, r2, r1, r3
 800768c:	5cc3      	ldrb	r3, [r0, r3]
 800768e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007692:	460b      	mov	r3, r1
 8007694:	2900      	cmp	r1, #0
 8007696:	d1f5      	bne.n	8007684 <_printf_i+0x16c>
 8007698:	e7b9      	b.n	800760e <_printf_i+0xf6>
 800769a:	6813      	ldr	r3, [r2, #0]
 800769c:	6825      	ldr	r5, [r4, #0]
 800769e:	1d18      	adds	r0, r3, #4
 80076a0:	6961      	ldr	r1, [r4, #20]
 80076a2:	6010      	str	r0, [r2, #0]
 80076a4:	0628      	lsls	r0, r5, #24
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	d501      	bpl.n	80076ae <_printf_i+0x196>
 80076aa:	6019      	str	r1, [r3, #0]
 80076ac:	e002      	b.n	80076b4 <_printf_i+0x19c>
 80076ae:	066a      	lsls	r2, r5, #25
 80076b0:	d5fb      	bpl.n	80076aa <_printf_i+0x192>
 80076b2:	8019      	strh	r1, [r3, #0]
 80076b4:	2300      	movs	r3, #0
 80076b6:	4665      	mov	r5, ip
 80076b8:	6123      	str	r3, [r4, #16]
 80076ba:	e7b9      	b.n	8007630 <_printf_i+0x118>
 80076bc:	6813      	ldr	r3, [r2, #0]
 80076be:	1d19      	adds	r1, r3, #4
 80076c0:	6011      	str	r1, [r2, #0]
 80076c2:	681d      	ldr	r5, [r3, #0]
 80076c4:	6862      	ldr	r2, [r4, #4]
 80076c6:	2100      	movs	r1, #0
 80076c8:	4628      	mov	r0, r5
 80076ca:	f000 fab9 	bl	8007c40 <memchr>
 80076ce:	b108      	cbz	r0, 80076d4 <_printf_i+0x1bc>
 80076d0:	1b40      	subs	r0, r0, r5
 80076d2:	6060      	str	r0, [r4, #4]
 80076d4:	6863      	ldr	r3, [r4, #4]
 80076d6:	6123      	str	r3, [r4, #16]
 80076d8:	2300      	movs	r3, #0
 80076da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076de:	e7a7      	b.n	8007630 <_printf_i+0x118>
 80076e0:	6923      	ldr	r3, [r4, #16]
 80076e2:	462a      	mov	r2, r5
 80076e4:	4639      	mov	r1, r7
 80076e6:	4630      	mov	r0, r6
 80076e8:	47c0      	blx	r8
 80076ea:	3001      	adds	r0, #1
 80076ec:	d0aa      	beq.n	8007644 <_printf_i+0x12c>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	079b      	lsls	r3, r3, #30
 80076f2:	d413      	bmi.n	800771c <_printf_i+0x204>
 80076f4:	68e0      	ldr	r0, [r4, #12]
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	4298      	cmp	r0, r3
 80076fa:	bfb8      	it	lt
 80076fc:	4618      	movlt	r0, r3
 80076fe:	e7a3      	b.n	8007648 <_printf_i+0x130>
 8007700:	2301      	movs	r3, #1
 8007702:	464a      	mov	r2, r9
 8007704:	4639      	mov	r1, r7
 8007706:	4630      	mov	r0, r6
 8007708:	47c0      	blx	r8
 800770a:	3001      	adds	r0, #1
 800770c:	d09a      	beq.n	8007644 <_printf_i+0x12c>
 800770e:	3501      	adds	r5, #1
 8007710:	68e3      	ldr	r3, [r4, #12]
 8007712:	9a03      	ldr	r2, [sp, #12]
 8007714:	1a9b      	subs	r3, r3, r2
 8007716:	42ab      	cmp	r3, r5
 8007718:	dcf2      	bgt.n	8007700 <_printf_i+0x1e8>
 800771a:	e7eb      	b.n	80076f4 <_printf_i+0x1dc>
 800771c:	2500      	movs	r5, #0
 800771e:	f104 0919 	add.w	r9, r4, #25
 8007722:	e7f5      	b.n	8007710 <_printf_i+0x1f8>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1ac      	bne.n	8007682 <_printf_i+0x16a>
 8007728:	7803      	ldrb	r3, [r0, #0]
 800772a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800772e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007732:	e76c      	b.n	800760e <_printf_i+0xf6>
 8007734:	08007f71 	.word	0x08007f71
 8007738:	08007f82 	.word	0x08007f82

0800773c <_putc_r>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	460d      	mov	r5, r1
 8007740:	4614      	mov	r4, r2
 8007742:	4606      	mov	r6, r0
 8007744:	b118      	cbz	r0, 800774e <_putc_r+0x12>
 8007746:	6983      	ldr	r3, [r0, #24]
 8007748:	b90b      	cbnz	r3, 800774e <_putc_r+0x12>
 800774a:	f7ff fca5 	bl	8007098 <__sinit>
 800774e:	4b13      	ldr	r3, [pc, #76]	; (800779c <_putc_r+0x60>)
 8007750:	429c      	cmp	r4, r3
 8007752:	d112      	bne.n	800777a <_putc_r+0x3e>
 8007754:	6874      	ldr	r4, [r6, #4]
 8007756:	68a3      	ldr	r3, [r4, #8]
 8007758:	3b01      	subs	r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	60a3      	str	r3, [r4, #8]
 800775e:	da16      	bge.n	800778e <_putc_r+0x52>
 8007760:	69a2      	ldr	r2, [r4, #24]
 8007762:	4293      	cmp	r3, r2
 8007764:	db02      	blt.n	800776c <_putc_r+0x30>
 8007766:	b2eb      	uxtb	r3, r5
 8007768:	2b0a      	cmp	r3, #10
 800776a:	d110      	bne.n	800778e <_putc_r+0x52>
 800776c:	4622      	mov	r2, r4
 800776e:	4629      	mov	r1, r5
 8007770:	4630      	mov	r0, r6
 8007772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007776:	f000 b85b 	b.w	8007830 <__swbuf_r>
 800777a:	4b09      	ldr	r3, [pc, #36]	; (80077a0 <_putc_r+0x64>)
 800777c:	429c      	cmp	r4, r3
 800777e:	d101      	bne.n	8007784 <_putc_r+0x48>
 8007780:	68b4      	ldr	r4, [r6, #8]
 8007782:	e7e8      	b.n	8007756 <_putc_r+0x1a>
 8007784:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <_putc_r+0x68>)
 8007786:	429c      	cmp	r4, r3
 8007788:	bf08      	it	eq
 800778a:	68f4      	ldreq	r4, [r6, #12]
 800778c:	e7e3      	b.n	8007756 <_putc_r+0x1a>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	b2e8      	uxtb	r0, r5
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	6022      	str	r2, [r4, #0]
 8007796:	701d      	strb	r5, [r3, #0]
 8007798:	bd70      	pop	{r4, r5, r6, pc}
 800779a:	bf00      	nop
 800779c:	08007f20 	.word	0x08007f20
 80077a0:	08007f40 	.word	0x08007f40
 80077a4:	08007f00 	.word	0x08007f00

080077a8 <__sread>:
 80077a8:	b510      	push	{r4, lr}
 80077aa:	460c      	mov	r4, r1
 80077ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b0:	f000 fa54 	bl	8007c5c <_read_r>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	bfab      	itete	ge
 80077b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077ba:	89a3      	ldrhlt	r3, [r4, #12]
 80077bc:	181b      	addge	r3, r3, r0
 80077be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077c2:	bfac      	ite	ge
 80077c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80077c6:	81a3      	strhlt	r3, [r4, #12]
 80077c8:	bd10      	pop	{r4, pc}

080077ca <__swrite>:
 80077ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ce:	461f      	mov	r7, r3
 80077d0:	898b      	ldrh	r3, [r1, #12]
 80077d2:	4605      	mov	r5, r0
 80077d4:	05db      	lsls	r3, r3, #23
 80077d6:	460c      	mov	r4, r1
 80077d8:	4616      	mov	r6, r2
 80077da:	d505      	bpl.n	80077e8 <__swrite+0x1e>
 80077dc:	2302      	movs	r3, #2
 80077de:	2200      	movs	r2, #0
 80077e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e4:	f000 f9b6 	bl	8007b54 <_lseek_r>
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	4632      	mov	r2, r6
 80077ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077f0:	81a3      	strh	r3, [r4, #12]
 80077f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077f6:	463b      	mov	r3, r7
 80077f8:	4628      	mov	r0, r5
 80077fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077fe:	f000 b869 	b.w	80078d4 <_write_r>

08007802 <__sseek>:
 8007802:	b510      	push	{r4, lr}
 8007804:	460c      	mov	r4, r1
 8007806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800780a:	f000 f9a3 	bl	8007b54 <_lseek_r>
 800780e:	1c43      	adds	r3, r0, #1
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	bf15      	itete	ne
 8007814:	6560      	strne	r0, [r4, #84]	; 0x54
 8007816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800781a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800781e:	81a3      	strheq	r3, [r4, #12]
 8007820:	bf18      	it	ne
 8007822:	81a3      	strhne	r3, [r4, #12]
 8007824:	bd10      	pop	{r4, pc}

08007826 <__sclose>:
 8007826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782a:	f000 b8d3 	b.w	80079d4 <_close_r>
	...

08007830 <__swbuf_r>:
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	460e      	mov	r6, r1
 8007834:	4614      	mov	r4, r2
 8007836:	4605      	mov	r5, r0
 8007838:	b118      	cbz	r0, 8007842 <__swbuf_r+0x12>
 800783a:	6983      	ldr	r3, [r0, #24]
 800783c:	b90b      	cbnz	r3, 8007842 <__swbuf_r+0x12>
 800783e:	f7ff fc2b 	bl	8007098 <__sinit>
 8007842:	4b21      	ldr	r3, [pc, #132]	; (80078c8 <__swbuf_r+0x98>)
 8007844:	429c      	cmp	r4, r3
 8007846:	d12a      	bne.n	800789e <__swbuf_r+0x6e>
 8007848:	686c      	ldr	r4, [r5, #4]
 800784a:	69a3      	ldr	r3, [r4, #24]
 800784c:	60a3      	str	r3, [r4, #8]
 800784e:	89a3      	ldrh	r3, [r4, #12]
 8007850:	071a      	lsls	r2, r3, #28
 8007852:	d52e      	bpl.n	80078b2 <__swbuf_r+0x82>
 8007854:	6923      	ldr	r3, [r4, #16]
 8007856:	b363      	cbz	r3, 80078b2 <__swbuf_r+0x82>
 8007858:	6923      	ldr	r3, [r4, #16]
 800785a:	6820      	ldr	r0, [r4, #0]
 800785c:	b2f6      	uxtb	r6, r6
 800785e:	1ac0      	subs	r0, r0, r3
 8007860:	6963      	ldr	r3, [r4, #20]
 8007862:	4637      	mov	r7, r6
 8007864:	4283      	cmp	r3, r0
 8007866:	dc04      	bgt.n	8007872 <__swbuf_r+0x42>
 8007868:	4621      	mov	r1, r4
 800786a:	4628      	mov	r0, r5
 800786c:	f000 f948 	bl	8007b00 <_fflush_r>
 8007870:	bb28      	cbnz	r0, 80078be <__swbuf_r+0x8e>
 8007872:	68a3      	ldr	r3, [r4, #8]
 8007874:	3001      	adds	r0, #1
 8007876:	3b01      	subs	r3, #1
 8007878:	60a3      	str	r3, [r4, #8]
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	6022      	str	r2, [r4, #0]
 8007880:	701e      	strb	r6, [r3, #0]
 8007882:	6963      	ldr	r3, [r4, #20]
 8007884:	4283      	cmp	r3, r0
 8007886:	d004      	beq.n	8007892 <__swbuf_r+0x62>
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	07db      	lsls	r3, r3, #31
 800788c:	d519      	bpl.n	80078c2 <__swbuf_r+0x92>
 800788e:	2e0a      	cmp	r6, #10
 8007890:	d117      	bne.n	80078c2 <__swbuf_r+0x92>
 8007892:	4621      	mov	r1, r4
 8007894:	4628      	mov	r0, r5
 8007896:	f000 f933 	bl	8007b00 <_fflush_r>
 800789a:	b190      	cbz	r0, 80078c2 <__swbuf_r+0x92>
 800789c:	e00f      	b.n	80078be <__swbuf_r+0x8e>
 800789e:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <__swbuf_r+0x9c>)
 80078a0:	429c      	cmp	r4, r3
 80078a2:	d101      	bne.n	80078a8 <__swbuf_r+0x78>
 80078a4:	68ac      	ldr	r4, [r5, #8]
 80078a6:	e7d0      	b.n	800784a <__swbuf_r+0x1a>
 80078a8:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <__swbuf_r+0xa0>)
 80078aa:	429c      	cmp	r4, r3
 80078ac:	bf08      	it	eq
 80078ae:	68ec      	ldreq	r4, [r5, #12]
 80078b0:	e7cb      	b.n	800784a <__swbuf_r+0x1a>
 80078b2:	4621      	mov	r1, r4
 80078b4:	4628      	mov	r0, r5
 80078b6:	f000 f81f 	bl	80078f8 <__swsetup_r>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d0cc      	beq.n	8007858 <__swbuf_r+0x28>
 80078be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80078c2:	4638      	mov	r0, r7
 80078c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c6:	bf00      	nop
 80078c8:	08007f20 	.word	0x08007f20
 80078cc:	08007f40 	.word	0x08007f40
 80078d0:	08007f00 	.word	0x08007f00

080078d4 <_write_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	4605      	mov	r5, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	4611      	mov	r1, r2
 80078dc:	2200      	movs	r2, #0
 80078de:	4c05      	ldr	r4, [pc, #20]	; (80078f4 <_write_r+0x20>)
 80078e0:	6022      	str	r2, [r4, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	f7f9 fc36 	bl	8001154 <_write>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	d102      	bne.n	80078f2 <_write_r+0x1e>
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	b103      	cbz	r3, 80078f2 <_write_r+0x1e>
 80078f0:	602b      	str	r3, [r5, #0]
 80078f2:	bd38      	pop	{r3, r4, r5, pc}
 80078f4:	20000c24 	.word	0x20000c24

080078f8 <__swsetup_r>:
 80078f8:	4b32      	ldr	r3, [pc, #200]	; (80079c4 <__swsetup_r+0xcc>)
 80078fa:	b570      	push	{r4, r5, r6, lr}
 80078fc:	681d      	ldr	r5, [r3, #0]
 80078fe:	4606      	mov	r6, r0
 8007900:	460c      	mov	r4, r1
 8007902:	b125      	cbz	r5, 800790e <__swsetup_r+0x16>
 8007904:	69ab      	ldr	r3, [r5, #24]
 8007906:	b913      	cbnz	r3, 800790e <__swsetup_r+0x16>
 8007908:	4628      	mov	r0, r5
 800790a:	f7ff fbc5 	bl	8007098 <__sinit>
 800790e:	4b2e      	ldr	r3, [pc, #184]	; (80079c8 <__swsetup_r+0xd0>)
 8007910:	429c      	cmp	r4, r3
 8007912:	d10f      	bne.n	8007934 <__swsetup_r+0x3c>
 8007914:	686c      	ldr	r4, [r5, #4]
 8007916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800791a:	b29a      	uxth	r2, r3
 800791c:	0715      	lsls	r5, r2, #28
 800791e:	d42c      	bmi.n	800797a <__swsetup_r+0x82>
 8007920:	06d0      	lsls	r0, r2, #27
 8007922:	d411      	bmi.n	8007948 <__swsetup_r+0x50>
 8007924:	2209      	movs	r2, #9
 8007926:	6032      	str	r2, [r6, #0]
 8007928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007932:	e03e      	b.n	80079b2 <__swsetup_r+0xba>
 8007934:	4b25      	ldr	r3, [pc, #148]	; (80079cc <__swsetup_r+0xd4>)
 8007936:	429c      	cmp	r4, r3
 8007938:	d101      	bne.n	800793e <__swsetup_r+0x46>
 800793a:	68ac      	ldr	r4, [r5, #8]
 800793c:	e7eb      	b.n	8007916 <__swsetup_r+0x1e>
 800793e:	4b24      	ldr	r3, [pc, #144]	; (80079d0 <__swsetup_r+0xd8>)
 8007940:	429c      	cmp	r4, r3
 8007942:	bf08      	it	eq
 8007944:	68ec      	ldreq	r4, [r5, #12]
 8007946:	e7e6      	b.n	8007916 <__swsetup_r+0x1e>
 8007948:	0751      	lsls	r1, r2, #29
 800794a:	d512      	bpl.n	8007972 <__swsetup_r+0x7a>
 800794c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800794e:	b141      	cbz	r1, 8007962 <__swsetup_r+0x6a>
 8007950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007954:	4299      	cmp	r1, r3
 8007956:	d002      	beq.n	800795e <__swsetup_r+0x66>
 8007958:	4630      	mov	r0, r6
 800795a:	f7ff fa65 	bl	8006e28 <_free_r>
 800795e:	2300      	movs	r3, #0
 8007960:	6363      	str	r3, [r4, #52]	; 0x34
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007968:	81a3      	strh	r3, [r4, #12]
 800796a:	2300      	movs	r3, #0
 800796c:	6063      	str	r3, [r4, #4]
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	f043 0308 	orr.w	r3, r3, #8
 8007978:	81a3      	strh	r3, [r4, #12]
 800797a:	6923      	ldr	r3, [r4, #16]
 800797c:	b94b      	cbnz	r3, 8007992 <__swsetup_r+0x9a>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007988:	d003      	beq.n	8007992 <__swsetup_r+0x9a>
 800798a:	4621      	mov	r1, r4
 800798c:	4630      	mov	r0, r6
 800798e:	f000 f917 	bl	8007bc0 <__smakebuf_r>
 8007992:	89a2      	ldrh	r2, [r4, #12]
 8007994:	f012 0301 	ands.w	r3, r2, #1
 8007998:	d00c      	beq.n	80079b4 <__swsetup_r+0xbc>
 800799a:	2300      	movs	r3, #0
 800799c:	60a3      	str	r3, [r4, #8]
 800799e:	6963      	ldr	r3, [r4, #20]
 80079a0:	425b      	negs	r3, r3
 80079a2:	61a3      	str	r3, [r4, #24]
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	b953      	cbnz	r3, 80079be <__swsetup_r+0xc6>
 80079a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80079b0:	d1ba      	bne.n	8007928 <__swsetup_r+0x30>
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	0792      	lsls	r2, r2, #30
 80079b6:	bf58      	it	pl
 80079b8:	6963      	ldrpl	r3, [r4, #20]
 80079ba:	60a3      	str	r3, [r4, #8]
 80079bc:	e7f2      	b.n	80079a4 <__swsetup_r+0xac>
 80079be:	2000      	movs	r0, #0
 80079c0:	e7f7      	b.n	80079b2 <__swsetup_r+0xba>
 80079c2:	bf00      	nop
 80079c4:	20000164 	.word	0x20000164
 80079c8:	08007f20 	.word	0x08007f20
 80079cc:	08007f40 	.word	0x08007f40
 80079d0:	08007f00 	.word	0x08007f00

080079d4 <_close_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	2300      	movs	r3, #0
 80079d8:	4c05      	ldr	r4, [pc, #20]	; (80079f0 <_close_r+0x1c>)
 80079da:	4605      	mov	r5, r0
 80079dc:	4608      	mov	r0, r1
 80079de:	6023      	str	r3, [r4, #0]
 80079e0:	f7f9 fbd4 	bl	800118c <_close>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_close_r+0x1a>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_close_r+0x1a>
 80079ec:	602b      	str	r3, [r5, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	20000c24 	.word	0x20000c24

080079f4 <__sflush_r>:
 80079f4:	898a      	ldrh	r2, [r1, #12]
 80079f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fa:	4605      	mov	r5, r0
 80079fc:	0710      	lsls	r0, r2, #28
 80079fe:	460c      	mov	r4, r1
 8007a00:	d458      	bmi.n	8007ab4 <__sflush_r+0xc0>
 8007a02:	684b      	ldr	r3, [r1, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dc05      	bgt.n	8007a14 <__sflush_r+0x20>
 8007a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	dc02      	bgt.n	8007a14 <__sflush_r+0x20>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a16:	2e00      	cmp	r6, #0
 8007a18:	d0f9      	beq.n	8007a0e <__sflush_r+0x1a>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a20:	682f      	ldr	r7, [r5, #0]
 8007a22:	6a21      	ldr	r1, [r4, #32]
 8007a24:	602b      	str	r3, [r5, #0]
 8007a26:	d032      	beq.n	8007a8e <__sflush_r+0x9a>
 8007a28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	075a      	lsls	r2, r3, #29
 8007a2e:	d505      	bpl.n	8007a3c <__sflush_r+0x48>
 8007a30:	6863      	ldr	r3, [r4, #4]
 8007a32:	1ac0      	subs	r0, r0, r3
 8007a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a36:	b10b      	cbz	r3, 8007a3c <__sflush_r+0x48>
 8007a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a3a:	1ac0      	subs	r0, r0, r3
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4602      	mov	r2, r0
 8007a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a42:	6a21      	ldr	r1, [r4, #32]
 8007a44:	4628      	mov	r0, r5
 8007a46:	47b0      	blx	r6
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	d106      	bne.n	8007a5c <__sflush_r+0x68>
 8007a4e:	6829      	ldr	r1, [r5, #0]
 8007a50:	291d      	cmp	r1, #29
 8007a52:	d848      	bhi.n	8007ae6 <__sflush_r+0xf2>
 8007a54:	4a29      	ldr	r2, [pc, #164]	; (8007afc <__sflush_r+0x108>)
 8007a56:	40ca      	lsrs	r2, r1
 8007a58:	07d6      	lsls	r6, r2, #31
 8007a5a:	d544      	bpl.n	8007ae6 <__sflush_r+0xf2>
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	6062      	str	r2, [r4, #4]
 8007a60:	6922      	ldr	r2, [r4, #16]
 8007a62:	04d9      	lsls	r1, r3, #19
 8007a64:	6022      	str	r2, [r4, #0]
 8007a66:	d504      	bpl.n	8007a72 <__sflush_r+0x7e>
 8007a68:	1c42      	adds	r2, r0, #1
 8007a6a:	d101      	bne.n	8007a70 <__sflush_r+0x7c>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	b903      	cbnz	r3, 8007a72 <__sflush_r+0x7e>
 8007a70:	6560      	str	r0, [r4, #84]	; 0x54
 8007a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a74:	602f      	str	r7, [r5, #0]
 8007a76:	2900      	cmp	r1, #0
 8007a78:	d0c9      	beq.n	8007a0e <__sflush_r+0x1a>
 8007a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a7e:	4299      	cmp	r1, r3
 8007a80:	d002      	beq.n	8007a88 <__sflush_r+0x94>
 8007a82:	4628      	mov	r0, r5
 8007a84:	f7ff f9d0 	bl	8006e28 <_free_r>
 8007a88:	2000      	movs	r0, #0
 8007a8a:	6360      	str	r0, [r4, #52]	; 0x34
 8007a8c:	e7c0      	b.n	8007a10 <__sflush_r+0x1c>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4628      	mov	r0, r5
 8007a92:	47b0      	blx	r6
 8007a94:	1c41      	adds	r1, r0, #1
 8007a96:	d1c8      	bne.n	8007a2a <__sflush_r+0x36>
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0c5      	beq.n	8007a2a <__sflush_r+0x36>
 8007a9e:	2b1d      	cmp	r3, #29
 8007aa0:	d001      	beq.n	8007aa6 <__sflush_r+0xb2>
 8007aa2:	2b16      	cmp	r3, #22
 8007aa4:	d101      	bne.n	8007aaa <__sflush_r+0xb6>
 8007aa6:	602f      	str	r7, [r5, #0]
 8007aa8:	e7b1      	b.n	8007a0e <__sflush_r+0x1a>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ab0:	81a3      	strh	r3, [r4, #12]
 8007ab2:	e7ad      	b.n	8007a10 <__sflush_r+0x1c>
 8007ab4:	690f      	ldr	r7, [r1, #16]
 8007ab6:	2f00      	cmp	r7, #0
 8007ab8:	d0a9      	beq.n	8007a0e <__sflush_r+0x1a>
 8007aba:	0793      	lsls	r3, r2, #30
 8007abc:	bf18      	it	ne
 8007abe:	2300      	movne	r3, #0
 8007ac0:	680e      	ldr	r6, [r1, #0]
 8007ac2:	bf08      	it	eq
 8007ac4:	694b      	ldreq	r3, [r1, #20]
 8007ac6:	eba6 0807 	sub.w	r8, r6, r7
 8007aca:	600f      	str	r7, [r1, #0]
 8007acc:	608b      	str	r3, [r1, #8]
 8007ace:	f1b8 0f00 	cmp.w	r8, #0
 8007ad2:	dd9c      	ble.n	8007a0e <__sflush_r+0x1a>
 8007ad4:	4643      	mov	r3, r8
 8007ad6:	463a      	mov	r2, r7
 8007ad8:	6a21      	ldr	r1, [r4, #32]
 8007ada:	4628      	mov	r0, r5
 8007adc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ade:	47b0      	blx	r6
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	dc06      	bgt.n	8007af2 <__sflush_r+0xfe>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aea:	81a3      	strh	r3, [r4, #12]
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007af0:	e78e      	b.n	8007a10 <__sflush_r+0x1c>
 8007af2:	4407      	add	r7, r0
 8007af4:	eba8 0800 	sub.w	r8, r8, r0
 8007af8:	e7e9      	b.n	8007ace <__sflush_r+0xda>
 8007afa:	bf00      	nop
 8007afc:	20400001 	.word	0x20400001

08007b00 <_fflush_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	690b      	ldr	r3, [r1, #16]
 8007b04:	4605      	mov	r5, r0
 8007b06:	460c      	mov	r4, r1
 8007b08:	b1db      	cbz	r3, 8007b42 <_fflush_r+0x42>
 8007b0a:	b118      	cbz	r0, 8007b14 <_fflush_r+0x14>
 8007b0c:	6983      	ldr	r3, [r0, #24]
 8007b0e:	b90b      	cbnz	r3, 8007b14 <_fflush_r+0x14>
 8007b10:	f7ff fac2 	bl	8007098 <__sinit>
 8007b14:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <_fflush_r+0x48>)
 8007b16:	429c      	cmp	r4, r3
 8007b18:	d109      	bne.n	8007b2e <_fflush_r+0x2e>
 8007b1a:	686c      	ldr	r4, [r5, #4]
 8007b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b20:	b17b      	cbz	r3, 8007b42 <_fflush_r+0x42>
 8007b22:	4621      	mov	r1, r4
 8007b24:	4628      	mov	r0, r5
 8007b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b2a:	f7ff bf63 	b.w	80079f4 <__sflush_r>
 8007b2e:	4b07      	ldr	r3, [pc, #28]	; (8007b4c <_fflush_r+0x4c>)
 8007b30:	429c      	cmp	r4, r3
 8007b32:	d101      	bne.n	8007b38 <_fflush_r+0x38>
 8007b34:	68ac      	ldr	r4, [r5, #8]
 8007b36:	e7f1      	b.n	8007b1c <_fflush_r+0x1c>
 8007b38:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <_fflush_r+0x50>)
 8007b3a:	429c      	cmp	r4, r3
 8007b3c:	bf08      	it	eq
 8007b3e:	68ec      	ldreq	r4, [r5, #12]
 8007b40:	e7ec      	b.n	8007b1c <_fflush_r+0x1c>
 8007b42:	2000      	movs	r0, #0
 8007b44:	bd38      	pop	{r3, r4, r5, pc}
 8007b46:	bf00      	nop
 8007b48:	08007f20 	.word	0x08007f20
 8007b4c:	08007f40 	.word	0x08007f40
 8007b50:	08007f00 	.word	0x08007f00

08007b54 <_lseek_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4605      	mov	r5, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	4c05      	ldr	r4, [pc, #20]	; (8007b74 <_lseek_r+0x20>)
 8007b60:	6022      	str	r2, [r4, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f7f9 fb36 	bl	80011d4 <_lseek>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d102      	bne.n	8007b72 <_lseek_r+0x1e>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	b103      	cbz	r3, 8007b72 <_lseek_r+0x1e>
 8007b70:	602b      	str	r3, [r5, #0]
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	20000c24 	.word	0x20000c24

08007b78 <__swhatbuf_r>:
 8007b78:	b570      	push	{r4, r5, r6, lr}
 8007b7a:	460e      	mov	r6, r1
 8007b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b80:	b096      	sub	sp, #88	; 0x58
 8007b82:	2900      	cmp	r1, #0
 8007b84:	4614      	mov	r4, r2
 8007b86:	461d      	mov	r5, r3
 8007b88:	da07      	bge.n	8007b9a <__swhatbuf_r+0x22>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	602b      	str	r3, [r5, #0]
 8007b8e:	89b3      	ldrh	r3, [r6, #12]
 8007b90:	061a      	lsls	r2, r3, #24
 8007b92:	d410      	bmi.n	8007bb6 <__swhatbuf_r+0x3e>
 8007b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b98:	e00e      	b.n	8007bb8 <__swhatbuf_r+0x40>
 8007b9a:	466a      	mov	r2, sp
 8007b9c:	f000 f870 	bl	8007c80 <_fstat_r>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	dbf2      	blt.n	8007b8a <__swhatbuf_r+0x12>
 8007ba4:	9a01      	ldr	r2, [sp, #4]
 8007ba6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007baa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bae:	425a      	negs	r2, r3
 8007bb0:	415a      	adcs	r2, r3
 8007bb2:	602a      	str	r2, [r5, #0]
 8007bb4:	e7ee      	b.n	8007b94 <__swhatbuf_r+0x1c>
 8007bb6:	2340      	movs	r3, #64	; 0x40
 8007bb8:	2000      	movs	r0, #0
 8007bba:	6023      	str	r3, [r4, #0]
 8007bbc:	b016      	add	sp, #88	; 0x58
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}

08007bc0 <__smakebuf_r>:
 8007bc0:	898b      	ldrh	r3, [r1, #12]
 8007bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bc4:	079d      	lsls	r5, r3, #30
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	460c      	mov	r4, r1
 8007bca:	d507      	bpl.n	8007bdc <__smakebuf_r+0x1c>
 8007bcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	6123      	str	r3, [r4, #16]
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	6163      	str	r3, [r4, #20]
 8007bd8:	b002      	add	sp, #8
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	ab01      	add	r3, sp, #4
 8007bde:	466a      	mov	r2, sp
 8007be0:	f7ff ffca 	bl	8007b78 <__swhatbuf_r>
 8007be4:	9900      	ldr	r1, [sp, #0]
 8007be6:	4605      	mov	r5, r0
 8007be8:	4630      	mov	r0, r6
 8007bea:	f7ff f969 	bl	8006ec0 <_malloc_r>
 8007bee:	b948      	cbnz	r0, 8007c04 <__smakebuf_r+0x44>
 8007bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf4:	059a      	lsls	r2, r3, #22
 8007bf6:	d4ef      	bmi.n	8007bd8 <__smakebuf_r+0x18>
 8007bf8:	f023 0303 	bic.w	r3, r3, #3
 8007bfc:	f043 0302 	orr.w	r3, r3, #2
 8007c00:	81a3      	strh	r3, [r4, #12]
 8007c02:	e7e3      	b.n	8007bcc <__smakebuf_r+0xc>
 8007c04:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <__smakebuf_r+0x7c>)
 8007c06:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	6020      	str	r0, [r4, #0]
 8007c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c10:	81a3      	strh	r3, [r4, #12]
 8007c12:	9b00      	ldr	r3, [sp, #0]
 8007c14:	6120      	str	r0, [r4, #16]
 8007c16:	6163      	str	r3, [r4, #20]
 8007c18:	9b01      	ldr	r3, [sp, #4]
 8007c1a:	b15b      	cbz	r3, 8007c34 <__smakebuf_r+0x74>
 8007c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c20:	4630      	mov	r0, r6
 8007c22:	f000 f83f 	bl	8007ca4 <_isatty_r>
 8007c26:	b128      	cbz	r0, 8007c34 <__smakebuf_r+0x74>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	f023 0303 	bic.w	r3, r3, #3
 8007c2e:	f043 0301 	orr.w	r3, r3, #1
 8007c32:	81a3      	strh	r3, [r4, #12]
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	431d      	orrs	r5, r3
 8007c38:	81a5      	strh	r5, [r4, #12]
 8007c3a:	e7cd      	b.n	8007bd8 <__smakebuf_r+0x18>
 8007c3c:	08007061 	.word	0x08007061

08007c40 <memchr>:
 8007c40:	b510      	push	{r4, lr}
 8007c42:	b2c9      	uxtb	r1, r1
 8007c44:	4402      	add	r2, r0
 8007c46:	4290      	cmp	r0, r2
 8007c48:	4603      	mov	r3, r0
 8007c4a:	d101      	bne.n	8007c50 <memchr+0x10>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e003      	b.n	8007c58 <memchr+0x18>
 8007c50:	781c      	ldrb	r4, [r3, #0]
 8007c52:	3001      	adds	r0, #1
 8007c54:	428c      	cmp	r4, r1
 8007c56:	d1f6      	bne.n	8007c46 <memchr+0x6>
 8007c58:	4618      	mov	r0, r3
 8007c5a:	bd10      	pop	{r4, pc}

08007c5c <_read_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4605      	mov	r5, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	2200      	movs	r2, #0
 8007c66:	4c05      	ldr	r4, [pc, #20]	; (8007c7c <_read_r+0x20>)
 8007c68:	6022      	str	r2, [r4, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7f9 fa55 	bl	800111a <_read>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_read_r+0x1e>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_read_r+0x1e>
 8007c78:	602b      	str	r3, [r5, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	20000c24 	.word	0x20000c24

08007c80 <_fstat_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	2300      	movs	r3, #0
 8007c84:	4c06      	ldr	r4, [pc, #24]	; (8007ca0 <_fstat_r+0x20>)
 8007c86:	4605      	mov	r5, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	f7f9 fa88 	bl	80011a2 <_fstat>
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d102      	bne.n	8007c9c <_fstat_r+0x1c>
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	b103      	cbz	r3, 8007c9c <_fstat_r+0x1c>
 8007c9a:	602b      	str	r3, [r5, #0]
 8007c9c:	bd38      	pop	{r3, r4, r5, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000c24 	.word	0x20000c24

08007ca4 <_isatty_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	4c05      	ldr	r4, [pc, #20]	; (8007cc0 <_isatty_r+0x1c>)
 8007caa:	4605      	mov	r5, r0
 8007cac:	4608      	mov	r0, r1
 8007cae:	6023      	str	r3, [r4, #0]
 8007cb0:	f7f9 fa86 	bl	80011c0 <_isatty>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_isatty_r+0x1a>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_isatty_r+0x1a>
 8007cbc:	602b      	str	r3, [r5, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	20000c24 	.word	0x20000c24

08007cc4 <_init>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	bf00      	nop
 8007cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cca:	bc08      	pop	{r3}
 8007ccc:	469e      	mov	lr, r3
 8007cce:	4770      	bx	lr

08007cd0 <_fini>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	bf00      	nop
 8007cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd6:	bc08      	pop	{r3}
 8007cd8:	469e      	mov	lr, r3
 8007cda:	4770      	bx	lr
