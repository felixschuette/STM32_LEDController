
bluepill_blinky_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fec  08007fec  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  08007fec  08007fec  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fec  08007fec  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fec  08007fec  00017fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08007ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  200001c8  080081bc  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c28  080081bc  00020c28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b175  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d4a  00000000  00000000  0003b366  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  0003f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  00040438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001917c  00000000  00000000  000415e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001254f  00000000  00000000  0005a764  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077a63  00000000  00000000  0006ccb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4716  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000579c  00000000  00000000  000e4794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001c8 	.word	0x200001c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d1c 	.word	0x08007d1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001cc 	.word	0x200001cc
 8000148:	08007d1c 	.word	0x08007d1c

0800014c <rtc_get_time_usec>:
 *  Created on: Mar 25, 2020
 *      Author: felix
 */
#include "debug_log.h"

uint32_t rtc_get_time_usec(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint32_t tick = HAL_GetTick();
 8000152:	f001 f955 	bl	8001400 <HAL_GetTick>
 8000156:	6078      	str	r0, [r7, #4]
	return tick;
 8000158:	687b      	ldr	r3, [r7, #4]
}
 800015a:	4618      	mov	r0, r3
 800015c:	3708      	adds	r7, #8
 800015e:	46bd      	mov	sp, r7
 8000160:	bd80      	pop	{r7, pc}
	...

08000164 <debug_log>:

void debug_log(char *msg, ...)
{
 8000164:	b40f      	push	{r0, r1, r2, r3}
 8000166:	b580      	push	{r7, lr}
 8000168:	b082      	sub	sp, #8
 800016a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, msg);
 800016c:	f107 0314 	add.w	r3, r7, #20
 8000170:	603b      	str	r3, [r7, #0]

    int time = rtc_get_time_usec();
 8000172:	f7ff ffeb 	bl	800014c <rtc_get_time_usec>
 8000176:	4603      	mov	r3, r0
 8000178:	607b      	str	r3, [r7, #4]
    printf("%d.%03d: ", time / 1000, time % 1000);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	4a11      	ldr	r2, [pc, #68]	; (80001c4 <debug_log+0x60>)
 800017e:	fb82 1203 	smull	r1, r2, r2, r3
 8000182:	1192      	asrs	r2, r2, #6
 8000184:	17db      	asrs	r3, r3, #31
 8000186:	1ad0      	subs	r0, r2, r3
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4a0e      	ldr	r2, [pc, #56]	; (80001c4 <debug_log+0x60>)
 800018c:	fb82 1203 	smull	r1, r2, r2, r3
 8000190:	1191      	asrs	r1, r2, #6
 8000192:	17da      	asrs	r2, r3, #31
 8000194:	1a8a      	subs	r2, r1, r2
 8000196:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800019a:	fb01 f202 	mul.w	r2, r1, r2
 800019e:	1a9a      	subs	r2, r3, r2
 80001a0:	4601      	mov	r1, r0
 80001a2:	4809      	ldr	r0, [pc, #36]	; (80001c8 <debug_log+0x64>)
 80001a4:	f006 ff12 	bl	8006fcc <iprintf>
    vprintf(msg, args);
 80001a8:	6839      	ldr	r1, [r7, #0]
 80001aa:	6938      	ldr	r0, [r7, #16]
 80001ac:	f006 ff4a 	bl	8007044 <viprintf>
    printf("\n");
 80001b0:	200a      	movs	r0, #10
 80001b2:	f006 ff23 	bl	8006ffc <putchar>
}
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr
 80001c4:	10624dd3 	.word	0x10624dd3
 80001c8:	08007d34 	.word	0x08007d34

080001cc <initializeLEDApplication>:
#include "led_test.h"

uint32_t notif;

void initializeLEDApplication(TIM_HandleTypeDef *htim1,
		TIM_HandleTypeDef *htim2) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	6039      	str	r1, [r7, #0]
	/* Initializing the LED stripe stuctures */
	Bus1_LEDStripe.timer = htim1;
 80001d6:	4a19      	ldr	r2, [pc, #100]	; (800023c <initializeLEDApplication+0x70>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	6013      	str	r3, [r2, #0]
	Bus1_LEDStripe.is_animating = false;
 80001dc:	4b17      	ldr	r3, [pc, #92]	; (800023c <initializeLEDApplication+0x70>)
 80001de:	2200      	movs	r2, #0
 80001e0:	731a      	strb	r2, [r3, #12]
	Bus1_LEDStripe.spi_bus = bus_1;
 80001e2:	4b16      	ldr	r3, [pc, #88]	; (800023c <initializeLEDApplication+0x70>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	711a      	strb	r2, [r3, #4]
	Bus1_LEDStripe.queue = malloc(sizeof(led_pattern_queue_t));
 80001e8:	2008      	movs	r0, #8
 80001ea:	f006 fe25 	bl	8006e38 <malloc>
 80001ee:	4603      	mov	r3, r0
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b12      	ldr	r3, [pc, #72]	; (800023c <initializeLEDApplication+0x70>)
 80001f4:	609a      	str	r2, [r3, #8]
	Bus1_LEDStripe.queue->head = NULL;
 80001f6:	4b11      	ldr	r3, [pc, #68]	; (800023c <initializeLEDApplication+0x70>)
 80001f8:	689b      	ldr	r3, [r3, #8]
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
	Bus1_LEDStripe.is_timer_active = false;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	; (800023c <initializeLEDApplication+0x70>)
 8000200:	2200      	movs	r2, #0
 8000202:	735a      	strb	r2, [r3, #13]

	Bus2_LEDStripe.timer = htim2;
 8000204:	4a0e      	ldr	r2, [pc, #56]	; (8000240 <initializeLEDApplication+0x74>)
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	6013      	str	r3, [r2, #0]
	Bus2_LEDStripe.is_animating = false;
 800020a:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <initializeLEDApplication+0x74>)
 800020c:	2200      	movs	r2, #0
 800020e:	731a      	strb	r2, [r3, #12]
	Bus2_LEDStripe.spi_bus = bus_2;
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <initializeLEDApplication+0x74>)
 8000212:	2201      	movs	r2, #1
 8000214:	711a      	strb	r2, [r3, #4]
	Bus2_LEDStripe.queue = malloc(sizeof(led_pattern_queue_t));
 8000216:	2008      	movs	r0, #8
 8000218:	f006 fe0e 	bl	8006e38 <malloc>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <initializeLEDApplication+0x74>)
 8000222:	609a      	str	r2, [r3, #8]
	Bus2_LEDStripe.queue->head = NULL;
 8000224:	4b06      	ldr	r3, [pc, #24]	; (8000240 <initializeLEDApplication+0x74>)
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
	Bus2_LEDStripe.is_timer_active = false;
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <initializeLEDApplication+0x74>)
 800022e:	2200      	movs	r2, #0
 8000230:	735a      	strb	r2, [r3, #13]
}
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000318 	.word	0x20000318
 8000240:	200002fc 	.word	0x200002fc

08000244 <popQueueElement>:

static uint8_t popQueueElement(led_pattern_queue_t *queue,
		led_pattern_t *pattern) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
	led_stripe_queue_element_t *old_head = NULL;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]

	if (queue->head == NULL) {
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d101      	bne.n	800025e <popQueueElement+0x1a>
		return EXIT_FAILURE;
 800025a:	2301      	movs	r3, #1
 800025c:	e01b      	b.n	8000296 <popQueueElement+0x52>
	}

	memcpy(pattern, &(queue->head)->led_pattern, sizeof(led_pattern_t));
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	220c      	movs	r2, #12
 8000264:	4619      	mov	r1, r3
 8000266:	6838      	ldr	r0, [r7, #0]
 8000268:	f006 fdf6 	bl	8006e58 <memcpy>
	old_head = (led_stripe_queue_element_t*) queue->head;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	60fb      	str	r3, [r7, #12]

	if (queue->head->next != NULL) {
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d005      	beq.n	8000288 <popQueueElement+0x44>
		queue->head = (led_stripe_queue_element_t*) queue->head->next;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	68da      	ldr	r2, [r3, #12]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	e002      	b.n	800028e <popQueueElement+0x4a>
	} else {
		queue->head = NULL;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
	}

	free(old_head);
 800028e:	68f8      	ldr	r0, [r7, #12]
 8000290:	f006 fdda 	bl	8006e48 <free>

	return EXIT_SUCCESS;
 8000294:	2300      	movs	r3, #0
}
 8000296:	4618      	mov	r0, r3
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <pushQueueElement>:

static uint8_t pushQueueElement(led_pattern_queue_t *queue,
		led_pattern_t *pattern) {
 800029e:	b580      	push	{r7, lr}
 80002a0:	b084      	sub	sp, #16
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
 80002a6:	6039      	str	r1, [r7, #0]
	led_stripe_queue_element_t *cursor = queue->head;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	60fb      	str	r3, [r7, #12]
	led_stripe_queue_element_t *new_element = NULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]

	if (queue->head == NULL) {
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d115      	bne.n	80002e6 <pushQueueElement+0x48>
		new_element = (led_stripe_queue_element_t*) malloc(
 80002ba:	2010      	movs	r0, #16
 80002bc:	f006 fdbc 	bl	8006e38 <malloc>
 80002c0:	4603      	mov	r3, r0
 80002c2:	60bb      	str	r3, [r7, #8]
				sizeof(led_stripe_queue_element_t));
		new_element->next = NULL;
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
		memcpy(&new_element->led_pattern, pattern, sizeof(led_pattern_t));
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	220c      	movs	r2, #12
 80002ce:	6839      	ldr	r1, [r7, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f006 fdc1 	bl	8006e58 <memcpy>
		queue->head = new_element;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	601a      	str	r2, [r3, #0]
		return EXIT_SUCCESS;
 80002dc:	2300      	movs	r3, #0
 80002de:	e01e      	b.n	800031e <pushQueueElement+0x80>
	}

	while (cursor->next != NULL) {
		cursor = (led_stripe_queue_element_t*) cursor->next;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	60fb      	str	r3, [r7, #12]
	while (cursor->next != NULL) {
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d1f8      	bne.n	80002e0 <pushQueueElement+0x42>
	}

	if (cursor->next == NULL) {
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d112      	bne.n	800031c <pushQueueElement+0x7e>
		new_element = (led_stripe_queue_element_t*) malloc(
 80002f6:	2010      	movs	r0, #16
 80002f8:	f006 fd9e 	bl	8006e38 <malloc>
 80002fc:	4603      	mov	r3, r0
 80002fe:	60bb      	str	r3, [r7, #8]
				sizeof(led_stripe_queue_element_t));
		new_element->next = NULL;
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
		memcpy(&new_element->led_pattern, pattern, sizeof(led_pattern_t));
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	220c      	movs	r2, #12
 800030a:	6839      	ldr	r1, [r7, #0]
 800030c:	4618      	mov	r0, r3
 800030e:	f006 fda3 	bl	8006e58 <memcpy>
		cursor->next = (struct led_stripe_queue_element_t*) new_element;
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	68ba      	ldr	r2, [r7, #8]
 8000316:	60da      	str	r2, [r3, #12]
		return EXIT_SUCCESS;
 8000318:	2300      	movs	r3, #0
 800031a:	e000      	b.n	800031e <pushQueueElement+0x80>
	}

	return EXIT_FAILURE;
 800031c:	2301      	movs	r3, #1
}
 800031e:	4618      	mov	r0, r3
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <startTimer>:

static void startTimer(TIM_HandleTypeDef *timer, uint32_t duration_ms) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]

	if (timer->Instance == LED_BUS1_TIMER) {
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800033a:	d107      	bne.n	800034c <startTimer+0x24>
		debug_log("starting timer for LED_BUS1 with duration: %d", duration_ms);
 800033c:	6839      	ldr	r1, [r7, #0]
 800033e:	4813      	ldr	r0, [pc, #76]	; (800038c <startTimer+0x64>)
 8000340:	f7ff ff10 	bl	8000164 <debug_log>
		Bus1_LEDStripe.is_timer_active = true;
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <startTimer+0x68>)
 8000346:	2201      	movs	r2, #1
 8000348:	735a      	strb	r2, [r3, #13]
 800034a:	e00b      	b.n	8000364 <startTimer+0x3c>
	} else if (timer->Instance == LED_BUS2_TIMER) {
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <startTimer+0x6c>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <startTimer+0x3c>
		debug_log("starting timer for LED_BUS2 with duration: %d", duration_ms);
 8000356:	6839      	ldr	r1, [r7, #0]
 8000358:	480f      	ldr	r0, [pc, #60]	; (8000398 <startTimer+0x70>)
 800035a:	f7ff ff03 	bl	8000164 <debug_log>
		Bus2_LEDStripe.is_timer_active = true;
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <startTimer+0x74>)
 8000360:	2201      	movs	r2, #1
 8000362:	735a      	strb	r2, [r3, #13]
	}

	__HAL_TIM_CLEAR_IT(timer, TIM_IT_UPDATE);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f06f 0201 	mvn.w	r2, #1
 800036c:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_AUTORELOAD(timer, duration_ms);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	683a      	ldr	r2, [r7, #0]
 8000374:	62da      	str	r2, [r3, #44]	; 0x2c
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	683a      	ldr	r2, [r7, #0]
 800037a:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(timer);
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f003 fad0 	bl	8003922 <HAL_TIM_Base_Start_IT>
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	08007d40 	.word	0x08007d40
 8000390:	20000318 	.word	0x20000318
 8000394:	40000400 	.word	0x40000400
 8000398:	08007d70 	.word	0x08007d70
 800039c:	200002fc 	.word	0x200002fc

080003a0 <pushAnimationPatternInQueue>:

static uint8_t pushAnimationPatternInQueue(led_stripe_t *stripe) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]

	if (stripe->is_animating == false) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	7b1b      	ldrb	r3, [r3, #12]
 80003ac:	f083 0301 	eor.w	r3, r3, #1
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <pushAnimationPatternInQueue+0x1a>
		return EXIT_FAILURE;
 80003b6:	2301      	movs	r3, #1
 80003b8:	e073      	b.n	80004a2 <pushAnimationPatternInQueue+0x102>
	}

	led_pattern_t tmp_pattern = { };
 80003ba:	f107 030c 	add.w	r3, r7, #12
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
	tmp_pattern.led_num = stripe->animation_pattern.led_num;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	8a9b      	ldrh	r3, [r3, #20]
 80003ca:	823b      	strh	r3, [r7, #16]
	tmp_pattern.direction = stripe->animation_pattern.direction;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	7d9b      	ldrb	r3, [r3, #22]
 80003d0:	74bb      	strb	r3, [r7, #18]
	tmp_pattern.duration_ms = stripe->animation_pattern.duration_ms;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	8b1b      	ldrh	r3, [r3, #24]
 80003d6:	82bb      	strh	r3, [r7, #20]
	tmp_pattern.led_colors = malloc(
			stripe->animation_pattern.led_num * sizeof(led_rgb_color_t));
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	8a9b      	ldrh	r3, [r3, #20]
 80003dc:	461a      	mov	r2, r3
	tmp_pattern.led_colors = malloc(
 80003de:	4613      	mov	r3, r2
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	4413      	add	r3, r2
 80003e4:	4618      	mov	r0, r3
 80003e6:	f006 fd27 	bl	8006e38 <malloc>
 80003ea:	4603      	mov	r3, r0
 80003ec:	60fb      	str	r3, [r7, #12]
	memcpy(tmp_pattern.led_colors, stripe->animation_pattern.led_colors,
 80003ee:	68f8      	ldr	r0, [r7, #12]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	6919      	ldr	r1, [r3, #16]
			stripe->animation_pattern.led_num * sizeof(led_rgb_color_t));
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	8a9b      	ldrh	r3, [r3, #20]
 80003f8:	461a      	mov	r2, r3
	memcpy(tmp_pattern.led_colors, stripe->animation_pattern.led_colors,
 80003fa:	4613      	mov	r3, r2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	4413      	add	r3, r2
 8000400:	461a      	mov	r2, r3
 8000402:	f006 fd29 	bl	8006e58 <memcpy>
	pushQueueElement(stripe->queue, &tmp_pattern);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	f107 020c 	add.w	r2, r7, #12
 800040e:	4611      	mov	r1, r2
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff44 	bl	800029e <pushQueueElement>

	/* shift animation pattern for next time */
	switch (stripe->animation_pattern.direction) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	7d9b      	ldrb	r3, [r3, #22]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d002      	beq.n	8000424 <pushAnimationPatternInQueue+0x84>
 800041e:	2b01      	cmp	r3, #1
 8000420:	d01f      	beq.n	8000462 <pushAnimationPatternInQueue+0xc2>
 8000422:	e03d      	b.n	80004a0 <pushAnimationPatternInQueue+0x100>
	case animation_upwards:
		debug_log("shifting animation upwards");
 8000424:	4821      	ldr	r0, [pc, #132]	; (80004ac <pushAnimationPatternInQueue+0x10c>)
 8000426:	f7ff fe9d 	bl	8000164 <debug_log>
		memcpy(&stripe->animation_pattern.led_colors[1], tmp_pattern.led_colors,
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	691b      	ldr	r3, [r3, #16]
 800042e:	1d58      	adds	r0, r3, #5
 8000430:	68f9      	ldr	r1, [r7, #12]
				(tmp_pattern.led_num - 1) * sizeof(led_rgb_color_t));
 8000432:	8a3b      	ldrh	r3, [r7, #16]
 8000434:	3b01      	subs	r3, #1
 8000436:	461a      	mov	r2, r3
		memcpy(&stripe->animation_pattern.led_colors[1], tmp_pattern.led_colors,
 8000438:	4613      	mov	r3, r2
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4413      	add	r3, r2
 800043e:	461a      	mov	r2, r3
 8000440:	f006 fd0a 	bl	8006e58 <memcpy>
		memcpy(stripe->animation_pattern.led_colors,
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	6918      	ldr	r0, [r3, #16]
				tmp_pattern.led_colors + tmp_pattern.led_num - 1,
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	8a3b      	ldrh	r3, [r7, #16]
 800044c:	4619      	mov	r1, r3
 800044e:	460b      	mov	r3, r1
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	440b      	add	r3, r1
 8000454:	3b05      	subs	r3, #5
 8000456:	4413      	add	r3, r2
		memcpy(stripe->animation_pattern.led_colors,
 8000458:	2205      	movs	r2, #5
 800045a:	4619      	mov	r1, r3
 800045c:	f006 fcfc 	bl	8006e58 <memcpy>
				sizeof(led_rgb_color_t));
		break;
 8000460:	e01e      	b.n	80004a0 <pushAnimationPatternInQueue+0x100>
	case animation_downwards:
		debug_log("shifting animation downwards");
 8000462:	4813      	ldr	r0, [pc, #76]	; (80004b0 <pushAnimationPatternInQueue+0x110>)
 8000464:	f7ff fe7e 	bl	8000164 <debug_log>
		memcpy(stripe->animation_pattern.led_colors, &tmp_pattern.led_colors[1],
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	6918      	ldr	r0, [r3, #16]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	1d59      	adds	r1, r3, #5
				(tmp_pattern.led_num - 1) * sizeof(led_rgb_color_t));
 8000470:	8a3b      	ldrh	r3, [r7, #16]
 8000472:	3b01      	subs	r3, #1
 8000474:	461a      	mov	r2, r3
		memcpy(stripe->animation_pattern.led_colors, &tmp_pattern.led_colors[1],
 8000476:	4613      	mov	r3, r2
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	4413      	add	r3, r2
 800047c:	461a      	mov	r2, r3
 800047e:	f006 fceb 	bl	8006e58 <memcpy>
		memcpy(stripe->animation_pattern.led_colors + tmp_pattern.led_num - 1,
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	691a      	ldr	r2, [r3, #16]
 8000486:	8a3b      	ldrh	r3, [r7, #16]
 8000488:	4619      	mov	r1, r3
 800048a:	460b      	mov	r3, r1
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	440b      	add	r3, r1
 8000490:	3b05      	subs	r3, #5
 8000492:	4413      	add	r3, r2
				tmp_pattern.led_colors, sizeof(led_rgb_color_t));
 8000494:	68f9      	ldr	r1, [r7, #12]
		memcpy(stripe->animation_pattern.led_colors + tmp_pattern.led_num - 1,
 8000496:	2205      	movs	r2, #5
 8000498:	4618      	mov	r0, r3
 800049a:	f006 fcdd 	bl	8006e58 <memcpy>
		break;
 800049e:	bf00      	nop
	}

	return EXIT_SUCCESS;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3718      	adds	r7, #24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	08007da0 	.word	0x08007da0
 80004b0:	08007dbc 	.word	0x08007dbc

080004b4 <showNextPattern>:

static uint8_t showNextPattern(led_stripe_t *stripe) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	led_pattern_t nextPattern = { };
 80004bc:	f107 0308 	add.w	r3, r7, #8
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
	uint8_t chk = EXIT_SUCCESS;
 80004c8:	2300      	movs	r3, #0
 80004ca:	75fb      	strb	r3, [r7, #23]

	pushAnimationPatternInQueue(stripe);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f7ff ff67 	bl	80003a0 <pushAnimationPatternInQueue>

	chk = popQueueElement(stripe->queue, &nextPattern);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	4611      	mov	r1, r2
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff feb1 	bl	8000244 <popQueueElement>
 80004e2:	4603      	mov	r3, r0
 80004e4:	75fb      	strb	r3, [r7, #23]
	if (chk == EXIT_FAILURE) {
 80004e6:	7dfb      	ldrb	r3, [r7, #23]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d104      	bne.n	80004f6 <showNextPattern+0x42>
		debug_log("queue is empty, nothing to display ...");
 80004ec:	4812      	ldr	r0, [pc, #72]	; (8000538 <showNextPattern+0x84>)
 80004ee:	f7ff fe39 	bl	8000164 <debug_log>
		return EXIT_FAILURE;
 80004f2:	2301      	movs	r3, #1
 80004f4:	e01c      	b.n	8000530 <showNextPattern+0x7c>
	}

	if (nextPattern.duration_ms > 0) {
 80004f6:	8a3b      	ldrh	r3, [r7, #16]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d006      	beq.n	800050a <showNextPattern+0x56>
		startTimer(stripe->timer, nextPattern.duration_ms);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	8a3a      	ldrh	r2, [r7, #16]
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ff0f 	bl	8000328 <startTimer>
	}

	debug_log("showing next pattern with duration %d and #%d leds n ow.",
			nextPattern.duration_ms, nextPattern.led_num);
 800050a:	8a3b      	ldrh	r3, [r7, #16]
	debug_log("showing next pattern with duration %d and #%d leds n ow.",
 800050c:	4619      	mov	r1, r3
			nextPattern.duration_ms, nextPattern.led_num);
 800050e:	89bb      	ldrh	r3, [r7, #12]
	debug_log("showing next pattern with duration %d and #%d leds n ow.",
 8000510:	461a      	mov	r2, r3
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <showNextPattern+0x88>)
 8000514:	f7ff fe26 	bl	8000164 <debug_log>
	showLEDs(nextPattern.led_colors, nextPattern.led_num, stripe->spi_bus);
 8000518:	68b8      	ldr	r0, [r7, #8]
 800051a:	89b9      	ldrh	r1, [r7, #12]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	461a      	mov	r2, r3
 8000522:	f000 fc40 	bl	8000da6 <showLEDs>
	free(nextPattern.led_colors);
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4618      	mov	r0, r3
 800052a:	f006 fc8d 	bl	8006e48 <free>
	return chk;
 800052e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	08007ddc 	.word	0x08007ddc
 800053c:	08007e04 	.word	0x08007e04

08000540 <startAnimating>:

void startAnimating(led_stripe_t *stripe, led_pattern_t *pattern) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	debug_log("Starting animation ...");
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <startAnimating+0x34>)
 800054c:	f7ff fe0a 	bl	8000164 <debug_log>
	memcpy(&stripe->animation_pattern, pattern, sizeof(led_pattern_t));
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3310      	adds	r3, #16
 8000554:	220c      	movs	r2, #12
 8000556:	6839      	ldr	r1, [r7, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f006 fc7d 	bl	8006e58 <memcpy>
	stripe->is_animating = true;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2201      	movs	r2, #1
 8000562:	731a      	strb	r2, [r3, #12]
	showNextPattern(stripe);
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f7ff ffa5 	bl	80004b4 <showNextPattern>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	08007e40 	.word	0x08007e40

08000578 <HAL_TIM_PeriodElapsedCallback>:
void stopAnimating(led_stripe_t *stripe) {
	free(stripe->animation_pattern.led_colors);
	stripe->is_animating = false;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == LED_BUS1_TIMER) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000588:	d10c      	bne.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		debug_log("LED_BUS1_TIMER");
 800058a:	4812      	ldr	r0, [pc, #72]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800058c:	f7ff fdea 	bl	8000164 <debug_log>
		Bus1_LEDStripe.is_timer_active = false;
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000592:	2200      	movs	r2, #0
 8000594:	735a      	strb	r2, [r3, #13]
		notif |= LED_BUS1_NOTIF;
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	e010      	b.n	80005c6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	} else if (htim->Instance == LED_BUS2_TIMER) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d10b      	bne.n	80005c6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		debug_log("LED_BUS2_TIMER");
 80005ae:	480d      	ldr	r0, [pc, #52]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80005b0:	f7ff fdd8 	bl	8000164 <debug_log>
		Bus2_LEDStripe.is_timer_active = false;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	735a      	strb	r2, [r3, #13]
		notif |= LED_BUS2_NOTIF;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f043 0302 	orr.w	r3, r3, #2
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80005c4:	6013      	str	r3, [r2, #0]
	}
	HAL_TIM_Base_Stop(htim);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f003 f981 	bl	80038ce <HAL_TIM_Base_Stop>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	08007e58 	.word	0x08007e58
 80005d8:	20000318 	.word	0x20000318
 80005dc:	20000334 	.word	0x20000334
 80005e0:	40000400 	.word	0x40000400
 80005e4:	08007e68 	.word	0x08007e68
 80005e8:	200002fc 	.word	0x200002fc

080005ec <unsetNotification>:

static void unsetNotification(uint32_t notification) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	notif &= (uint32_t) (~notification);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	43da      	mvns	r2, r3
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <unsetNotification+0x20>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4013      	ands	r3, r2
 80005fe:	4a03      	ldr	r2, [pc, #12]	; (800060c <unsetNotification+0x20>)
 8000600:	6013      	str	r3, [r2, #0]
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	20000334 	.word	0x20000334

08000610 <runLEDScheduler>:

void runLEDScheduler() {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	while (1) {
		if (notif & LED_BUS1_NOTIF) {
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <runLEDScheduler+0x44>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d008      	beq.n	8000632 <runLEDScheduler+0x22>
			debug_log("LED_BUS1_NOTIF");
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <runLEDScheduler+0x48>)
 8000622:	f7ff fd9f 	bl	8000164 <debug_log>
			showNextPattern(&Bus1_LEDStripe);
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <runLEDScheduler+0x4c>)
 8000628:	f7ff ff44 	bl	80004b4 <showNextPattern>
			unsetNotification(LED_BUS1_NOTIF);
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff ffdd 	bl	80005ec <unsetNotification>
		}
		if (notif & LED_BUS2_NOTIF) {
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <runLEDScheduler+0x44>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0ea      	beq.n	8000614 <runLEDScheduler+0x4>
			debug_log("LED_BUS2_NOTIF");
 800063e:	4808      	ldr	r0, [pc, #32]	; (8000660 <runLEDScheduler+0x50>)
 8000640:	f7ff fd90 	bl	8000164 <debug_log>
			showNextPattern(&Bus2_LEDStripe);
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <runLEDScheduler+0x54>)
 8000646:	f7ff ff35 	bl	80004b4 <showNextPattern>
			unsetNotification(LED_BUS2_NOTIF);
 800064a:	2002      	movs	r0, #2
 800064c:	f7ff ffce 	bl	80005ec <unsetNotification>
		if (notif & LED_BUS1_NOTIF) {
 8000650:	e7e0      	b.n	8000614 <runLEDScheduler+0x4>
 8000652:	bf00      	nop
 8000654:	20000334 	.word	0x20000334
 8000658:	08007e78 	.word	0x08007e78
 800065c:	20000318 	.word	0x20000318
 8000660:	08007e88 	.word	0x08007e88
 8000664:	200002fc 	.word	0x200002fc

08000668 <testRoutine>:
 *  Created on: Mar 26, 2020
 *      Author: felix
 */
#include "led_test.h"

void testRoutine(led_stripe_t *stripe, uint16_t led_num) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	807b      	strh	r3, [r7, #2]
	debug_log("starting test routine ...");
 8000674:	4837      	ldr	r0, [pc, #220]	; (8000754 <testRoutine+0xec>)
 8000676:	f7ff fd75 	bl	8000164 <debug_log>

	led_rgb_color_t *led = malloc(sizeof(led_rgb_color_t) * led_num);
 800067a:	887a      	ldrh	r2, [r7, #2]
 800067c:	4613      	mov	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	4618      	mov	r0, r3
 8000684:	f006 fbd8 	bl	8006e38 <malloc>
 8000688:	4603      	mov	r3, r0
 800068a:	61bb      	str	r3, [r7, #24]

	led[0].red = 50;
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	2232      	movs	r2, #50	; 0x32
 8000690:	701a      	strb	r2, [r3, #0]
	led[0].green = 50;
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	2232      	movs	r2, #50	; 0x32
 8000696:	705a      	strb	r2, [r3, #1]
	led[0].blue = 50;
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	2232      	movs	r2, #50	; 0x32
 800069c:	709a      	strb	r2, [r3, #2]
	led[0].white = 50;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	2232      	movs	r2, #50	; 0x32
 80006a2:	70da      	strb	r2, [r3, #3]
	led[0].type = led_rgbw;
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	2200      	movs	r2, #0
 80006a8:	711a      	strb	r2, [r3, #4]

	led[1].red = 0;
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	3305      	adds	r3, #5
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
	led[1].green = 0;
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	3305      	adds	r3, #5
 80006b6:	2200      	movs	r2, #0
 80006b8:	705a      	strb	r2, [r3, #1]
	led[1].blue = 5;
 80006ba:	69bb      	ldr	r3, [r7, #24]
 80006bc:	3305      	adds	r3, #5
 80006be:	2205      	movs	r2, #5
 80006c0:	709a      	strb	r2, [r3, #2]
	led[1].white = 5;
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	3305      	adds	r3, #5
 80006c6:	2205      	movs	r2, #5
 80006c8:	70da      	strb	r2, [r3, #3]
	led[1].type = led_rgbw;
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	3305      	adds	r3, #5
 80006ce:	2200      	movs	r2, #0
 80006d0:	711a      	strb	r2, [r3, #4]

	for (int i = 2; i < led_num; i++) {
 80006d2:	2302      	movs	r3, #2
 80006d4:	61fb      	str	r3, [r7, #28]
 80006d6:	e00e      	b.n	80006f6 <testRoutine+0x8e>
		memcpy(&led[i], &led[1], sizeof(led_rgb_color_t));
 80006d8:	69fa      	ldr	r2, [r7, #28]
 80006da:	4613      	mov	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	18d0      	adds	r0, r2, r3
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	3305      	adds	r3, #5
 80006e8:	2205      	movs	r2, #5
 80006ea:	4619      	mov	r1, r3
 80006ec:	f006 fbb4 	bl	8006e58 <memcpy>
	for (int i = 2; i < led_num; i++) {
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	3301      	adds	r3, #1
 80006f4:	61fb      	str	r3, [r7, #28]
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	69fa      	ldr	r2, [r7, #28]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	dbec      	blt.n	80006d8 <testRoutine+0x70>
//	led[7].red = 50;
//	led[7].green = 0;
//	led[7].blue = 0;
//	led[7].white = 0;

	led_pattern_t patterns = { 0 };
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]

	patterns.led_num = led_num;
 800070a:	887b      	ldrh	r3, [r7, #2]
 800070c:	823b      	strh	r3, [r7, #16]
	patterns.duration_ms = 20;
 800070e:	2314      	movs	r3, #20
 8000710:	82bb      	strh	r3, [r7, #20]
	patterns.direction = 1; // can be ignored anyway
 8000712:	2301      	movs	r3, #1
 8000714:	74bb      	strb	r3, [r7, #18]
	patterns.led_colors = malloc(patterns.led_num * sizeof(led_rgb_color_t));
 8000716:	8a3b      	ldrh	r3, [r7, #16]
 8000718:	461a      	mov	r2, r3
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	4618      	mov	r0, r3
 8000722:	f006 fb89 	bl	8006e38 <malloc>
 8000726:	4603      	mov	r3, r0
 8000728:	60fb      	str	r3, [r7, #12]
	memcpy(patterns.led_colors, led,
 800072a:	68f8      	ldr	r0, [r7, #12]
			patterns.led_num * sizeof(led_rgb_color_t));
 800072c:	8a3b      	ldrh	r3, [r7, #16]
 800072e:	461a      	mov	r2, r3
	memcpy(patterns.led_colors, led,
 8000730:	4613      	mov	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4413      	add	r3, r2
 8000736:	461a      	mov	r2, r3
 8000738:	69b9      	ldr	r1, [r7, #24]
 800073a:	f006 fb8d 	bl	8006e58 <memcpy>
	startAnimating(stripe, &patterns);
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff fefb 	bl	8000540 <startAnimating>
}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	08007e98 	.word	0x08007e98

08000758 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800075c:	f000 fdf8 	bl	8001350 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000760:	f000 f844 	bl	80007ec <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	debug_log("Q-loud LED Controller v1.0");
 8000764:	4819      	ldr	r0, [pc, #100]	; (80007cc <main+0x74>)
 8000766:	f7ff fcfd 	bl	8000164 <debug_log>
	//debug_log("");
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800076a:	f000 f9cb 	bl	8000b04 <MX_GPIO_Init>
	MX_DMA_Init();
 800076e:	f000 f9a3 	bl	8000ab8 <MX_DMA_Init>
	MX_SPI2_Init();
 8000772:	f000 f8cd 	bl	8000910 <MX_SPI2_Init>
	MX_SPI1_Init();
 8000776:	f000 f895 	bl	80008a4 <MX_SPI1_Init>
	MX_TIM2_Init();
 800077a:	f000 f8ff 	bl	800097c <MX_TIM2_Init>
	MX_TIM3_Init();
 800077e:	f000 f94d 	bl	8000a1c <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 8000782:	f005 ff83 	bl	800668c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078c:	4810      	ldr	r0, [pc, #64]	; (80007d0 <main+0x78>)
 800078e:	f001 fab9 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000796:	f000 fe3d 	bl	8001414 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <main+0x78>)
 80007a2:	f001 faaf 	bl	8001d04 <HAL_GPIO_WritePin>
	initializeSPIAdapter(&hspi1, &hspi2);
 80007a6:	490b      	ldr	r1, [pc, #44]	; (80007d4 <main+0x7c>)
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <main+0x80>)
 80007aa:	f000 fa09 	bl	8000bc0 <initializeSPIAdapter>
	initializeLEDApplication(&htim2, &htim3);
 80007ae:	490b      	ldr	r1, [pc, #44]	; (80007dc <main+0x84>)
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <main+0x88>)
 80007b2:	f7ff fd0b 	bl	80001cc <initializeLEDApplication>
	debug_log("Initialization done.");
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <main+0x8c>)
 80007b8:	f7ff fcd4 	bl	8000164 <debug_log>
	testRoutine(&Bus2_LEDStripe, 320);
 80007bc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <main+0x90>)
 80007c2:	f7ff ff51 	bl	8000668 <testRoutine>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		runLEDScheduler();
 80007c6:	f7ff ff23 	bl	8000610 <runLEDScheduler>
 80007ca:	e7fc      	b.n	80007c6 <main+0x6e>
 80007cc:	08007eb4 	.word	0x08007eb4
 80007d0:	40011000 	.word	0x40011000
 80007d4:	20000338 	.word	0x20000338
 80007d8:	200003d0 	.word	0x200003d0
 80007dc:	20000390 	.word	0x20000390
 80007e0:	20000428 	.word	0x20000428
 80007e4:	08007ed0 	.word	0x08007ed0
 80007e8:	200002fc 	.word	0x200002fc

080007ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	; 0x50
 80007f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f6:	2228      	movs	r2, #40	; 0x28
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f006 fb37 	bl	8006e6e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081c:	2301      	movs	r3, #1
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000836:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000838:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800083e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000842:	4618      	mov	r0, r3
 8000844:	f002 f944 	bl	8002ad0 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x66>
		Error_Handler();
 800084e:	f000 f9b1 	bl	8000bb4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000852:	230f      	movs	r3, #15
 8000854:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000862:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2101      	movs	r1, #1
 800086e:	4618      	mov	r0, r3
 8000870:	f002 fbae 	bl	8002fd0 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x92>
		Error_Handler();
 800087a:	f000 f99b 	bl	8000bb4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800087e:	2310      	movs	r3, #16
 8000880:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000886:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4618      	mov	r0, r3
 800088c:	f002 fd0a 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xae>
		Error_Handler();
 8000896:	f000 f98d 	bl	8000bb4 <Error_Handler>
	}
}
 800089a:	bf00      	nop
 800089c:	3750      	adds	r7, #80	; 0x50
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_SPI1_Init+0x64>)
 80008aa:	4a18      	ldr	r2, [pc, #96]	; (800090c <MX_SPI1_Init+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_SPI1_Init+0x64>)
 80008b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_SPI1_Init+0x64>)
 80008d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_SPI1_Init+0x64>)
 80008d8:	2210      	movs	r2, #16
 80008da:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_SPI1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_SPI1_Init+0x64>)
 80008f0:	220a      	movs	r2, #10
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_SPI1_Init+0x64>)
 80008f6:	f002 fd8b 	bl	8003410 <HAL_SPI_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000900:	f000 f958 	bl	8000bb4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200003d0 	.word	0x200003d0
 800090c:	40013000 	.word	0x40013000

08000910 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_SPI2_Init+0x64>)
 8000916:	4a18      	ldr	r2, [pc, #96]	; (8000978 <MX_SPI2_Init+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_SPI2_Init+0x64>)
 800091c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000920:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_SPI2_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_SPI2_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_SPI2_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SPI2_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_SPI2_Init+0x64>)
 800093c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000940:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SPI2_Init+0x64>)
 8000944:	2208      	movs	r2, #8
 8000946:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_SPI2_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SPI2_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_SPI2_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SPI2_Init+0x64>)
 800095c:	220a      	movs	r2, #10
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_SPI2_Init+0x64>)
 8000962:	f002 fd55 	bl	8003410 <HAL_SPI_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_SPI2_Init+0x60>
		Error_Handler();
 800096c:	f000 f922 	bl	8000bb4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000338 	.word	0x20000338
 8000978:	40003800 	.word	0x40003800

0800097c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */
	htim2.Init.RepetitionCounter = 1;
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_TIM2_Init+0x9c>)
 800099a:	2201      	movs	r2, #1
 800099c:	615a      	str	r2, [r3, #20]
	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_TIM2_Init+0x9c>)
 80009a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 48000;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_TIM2_Init+0x9c>)
 80009a8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80009ac:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_TIM2_Init+0x9c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3000;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_TIM2_Init+0x9c>)
 80009b6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009ba:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_TIM2_Init+0x9c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_TIM2_Init+0x9c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <MX_TIM2_Init+0x9c>)
 80009ca:	f002 ff55 	bl	8003878 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM2_Init+0x5c>
		Error_Handler();
 80009d4:	f000 f8ee 	bl	8000bb4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009dc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	4619      	mov	r1, r3
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <MX_TIM2_Init+0x9c>)
 80009e6:	f003 f8c7 	bl	8003b78 <HAL_TIM_ConfigClockSource>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0x78>
		Error_Handler();
 80009f0:	f000 f8e0 	bl	8000bb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_TIM2_Init+0x9c>)
 8000a02:	f003 fa8d 	bl	8003f20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0x94>
			!= HAL_OK) {
		Error_Handler();
 8000a0c:	f000 f8d2 	bl	8000bb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000428 	.word	0x20000428

08000a1c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_TIM3_Init+0x94>)
 8000a3a:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <MX_TIM3_Init+0x98>)
 8000a3c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 48000;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_TIM3_Init+0x94>)
 8000a40:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000a44:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_TIM3_Init+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3000;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_TIM3_Init+0x94>)
 8000a4e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a52:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_TIM3_Init+0x94>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_TIM3_Init+0x94>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000a60:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <MX_TIM3_Init+0x94>)
 8000a62:	f002 ff09 	bl	8003878 <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM3_Init+0x54>
		Error_Handler();
 8000a6c:	f000 f8a2 	bl	8000bb4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a74:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_TIM3_Init+0x94>)
 8000a7e:	f003 f87b 	bl	8003b78 <HAL_TIM_ConfigClockSource>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM3_Init+0x70>
		Error_Handler();
 8000a88:	f000 f894 	bl	8000bb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_TIM3_Init+0x94>)
 8000a9a:	f003 fa41 	bl	8003f20 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000aa4:	f000 f886 	bl	8000bb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000390 	.word	0x20000390
 8000ab4:	40000400 	.word	0x40000400

08000ab8 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_DMA_Init+0x48>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <MX_DMA_Init+0x48>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6153      	str	r3, [r2, #20]
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_DMA_Init+0x48>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	200d      	movs	r0, #13
 8000adc:	f000 fd93 	bl	8001606 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ae0:	200d      	movs	r0, #13
 8000ae2:	f000 fdac 	bl	800163e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	200f      	movs	r0, #15
 8000aec:	f000 fd8b 	bl	8001606 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000af0:	200f      	movs	r0, #15
 8000af2:	f000 fda4 	bl	800163e <HAL_NVIC_EnableIRQ>

}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b18:	4b24      	ldr	r3, [pc, #144]	; (8000bac <MX_GPIO_Init+0xa8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a23      	ldr	r2, [pc, #140]	; (8000bac <MX_GPIO_Init+0xa8>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <MX_GPIO_Init+0xa8>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <MX_GPIO_Init+0xa8>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <MX_GPIO_Init+0xa8>)
 8000b36:	f043 0320 	orr.w	r3, r3, #32
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <MX_GPIO_Init+0xa8>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0320 	and.w	r3, r3, #32
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <MX_GPIO_Init+0xa8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a17      	ldr	r2, [pc, #92]	; (8000bac <MX_GPIO_Init+0xa8>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <MX_GPIO_Init+0xa8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_GPIO_Init+0xa8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a11      	ldr	r2, [pc, #68]	; (8000bac <MX_GPIO_Init+0xa8>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_GPIO_Init+0xa8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_GPIO_Init+0xac>)
 8000b80:	f001 f8c0 	bl	8001d04 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_GPIO_Init+0xac>)
 8000b9e:	f000 ff57 	bl	8001a50 <HAL_GPIO_Init>

}
 8000ba2:	bf00      	nop
 8000ba4:	3720      	adds	r7, #32
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40011000 	.word	0x40011000

08000bb4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <initializeSPIAdapter>:
#include "sk6812_rgbw.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void initializeSPIAdapter(SPI_HandleTypeDef *hspi_1, SPI_HandleTypeDef *hspi_2) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
	memcpy(&bus1, hspi_1, sizeof(SPI_HandleTypeDef));
 8000bca:	2258      	movs	r2, #88	; 0x58
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <initializeSPIAdapter+0x34>)
 8000bd0:	f006 f942 	bl	8006e58 <memcpy>
	memcpy(&bus2, hspi_2, sizeof(SPI_HandleTypeDef));
 8000bd4:	2258      	movs	r2, #88	; 0x58
 8000bd6:	6839      	ldr	r1, [r7, #0]
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <initializeSPIAdapter+0x38>)
 8000bda:	f006 f93d 	bl	8006e58 <memcpy>

	HAL_SPI_MspInit(&bus1);
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <initializeSPIAdapter+0x34>)
 8000be0:	f000 f934 	bl	8000e4c <HAL_SPI_MspInit>
	HAL_SPI_MspInit(&bus2);
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <initializeSPIAdapter+0x38>)
 8000be6:	f000 f931 	bl	8000e4c <HAL_SPI_MspInit>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200002a4 	.word	0x200002a4
 8000bf8:	20000208 	.word	0x20000208

08000bfc <sendSymbolStreamOnLine>:

static void sendSymbolStreamOnLine(uint8_t *symbols, uint16_t length,
		spi_bus_num_t busNum) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b098      	sub	sp, #96	; 0x60
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	707b      	strb	r3, [r7, #1]
	SPI_HandleTypeDef hspi;

	if (busNum == bus_1) {
 8000c0c:	787b      	ldrb	r3, [r7, #1]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d108      	bne.n	8000c24 <sendSymbolStreamOnLine+0x28>
		hspi = bus1;
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <sendSymbolStreamOnLine+0x5c>)
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	4611      	mov	r1, r2
 8000c1a:	2258      	movs	r2, #88	; 0x58
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f006 f91b 	bl	8006e58 <memcpy>
 8000c22:	e00a      	b.n	8000c3a <sendSymbolStreamOnLine+0x3e>
	} else if (busNum == bus_2) {
 8000c24:	787b      	ldrb	r3, [r7, #1]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d107      	bne.n	8000c3a <sendSymbolStreamOnLine+0x3e>
		hspi = bus2;
 8000c2a:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <sendSymbolStreamOnLine+0x60>)
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	4611      	mov	r1, r2
 8000c32:	2258      	movs	r2, #88	; 0x58
 8000c34:	4618      	mov	r0, r3
 8000c36:	f006 f90f 	bl	8006e58 <memcpy>
	}

	HAL_SPI_Transmit_DMA(&hspi, symbols, length);
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 fc46 	bl	80034d4 <HAL_SPI_Transmit_DMA>
	free(symbols);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f006 f8fd 	bl	8006e48 <free>
}
 8000c4e:	bf00      	nop
 8000c50:	3760      	adds	r7, #96	; 0x60
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200002a4 	.word	0x200002a4
 8000c5c:	20000208 	.word	0x20000208

08000c60 <color2Symbol>:

static void color2Symbol(uint8_t color, uint8_t *symbol_stream) {
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
	const uint8_t oneSymbol = 0b11110000;
 8000c6c:	23f0      	movs	r3, #240	; 0xf0
 8000c6e:	73fb      	strb	r3, [r7, #15]
	const uint8_t zeroSymbol = 0b11000000;
 8000c70:	23c0      	movs	r3, #192	; 0xc0
 8000c72:	73bb      	strb	r3, [r7, #14]
	uint16_t cursor = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	82fb      	strh	r3, [r7, #22]

	for (int i = 7; i >= 0; i--) {
 8000c78:	2307      	movs	r3, #7
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	e018      	b.n	8000cb0 <color2Symbol+0x50>
		if (color & (1 << i)) {
 8000c7e:	79fa      	ldrb	r2, [r7, #7]
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	fa42 f303 	asr.w	r3, r2, r3
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d005      	beq.n	8000c9a <color2Symbol+0x3a>
			memcpy(symbol_stream + cursor, &oneSymbol, 1);
 8000c8e:	8afb      	ldrh	r3, [r7, #22]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	7bfa      	ldrb	r2, [r7, #15]
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	e004      	b.n	8000ca4 <color2Symbol+0x44>
		} else {
			memcpy(symbol_stream + cursor, &zeroSymbol, 1);
 8000c9a:	8afb      	ldrh	r3, [r7, #22]
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	7bba      	ldrb	r2, [r7, #14]
 8000ca2:	701a      	strb	r2, [r3, #0]
		}
		cursor++;
 8000ca4:	8afb      	ldrh	r3, [r7, #22]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	82fb      	strh	r3, [r7, #22]
	for (int i = 7; i >= 0; i--) {
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	dae3      	bge.n	8000c7e <color2Symbol+0x1e>
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	371c      	adds	r7, #28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <getColorSymbolStream>:

static void getColorSymbolStream(led_rgb_color_t *led, uint8_t *symbol_stream) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	uint16_t cursor = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	81fb      	strh	r3, [r7, #14]

	color2Symbol(led->green, symbol_stream + cursor);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7858      	ldrb	r0, [r3, #1]
 8000cd2:	89fb      	ldrh	r3, [r7, #14]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f7ff ffc1 	bl	8000c60 <color2Symbol>
	cursor += 8;
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	3308      	adds	r3, #8
 8000ce2:	81fb      	strh	r3, [r7, #14]
	color2Symbol(led->red, symbol_stream + cursor);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7818      	ldrb	r0, [r3, #0]
 8000ce8:	89fb      	ldrh	r3, [r7, #14]
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f7ff ffb6 	bl	8000c60 <color2Symbol>
	cursor += 8;
 8000cf4:	89fb      	ldrh	r3, [r7, #14]
 8000cf6:	3308      	adds	r3, #8
 8000cf8:	81fb      	strh	r3, [r7, #14]
	color2Symbol(led->blue, symbol_stream + cursor);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7898      	ldrb	r0, [r3, #2]
 8000cfe:	89fb      	ldrh	r3, [r7, #14]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	f7ff ffab 	bl	8000c60 <color2Symbol>
	if (led->type == led_rgbw) {
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	791b      	ldrb	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10a      	bne.n	8000d28 <getColorSymbolStream+0x68>
		cursor += 8;
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	3308      	adds	r3, #8
 8000d16:	81fb      	strh	r3, [r7, #14]
		color2Symbol(led->white, symbol_stream + cursor);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	78d8      	ldrb	r0, [r3, #3]
 8000d1c:	89fb      	ldrh	r3, [r7, #14]
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	4413      	add	r3, r2
 8000d22:	4619      	mov	r1, r3
 8000d24:	f7ff ff9c 	bl	8000c60 <color2Symbol>
	}
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <buildSymbolStream>:

static void buildSymbolStream(uint8_t **stream, led_rgb_color_t *led,
		uint16_t ledNum) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	80fb      	strh	r3, [r7, #6]
	uint16_t stream_length = LED_STREAM_LENGTH(ledNum);
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	015b      	lsls	r3, r3, #5
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	338c      	adds	r3, #140	; 0x8c
 8000d46:	823b      	strh	r3, [r7, #16]
	uint32_t cursor = START_OFFSET;
 8000d48:	2350      	movs	r3, #80	; 0x50
 8000d4a:	617b      	str	r3, [r7, #20]
	*stream = malloc(stream_length);
 8000d4c:	8a3b      	ldrh	r3, [r7, #16]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f006 f872 	bl	8006e38 <malloc>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	601a      	str	r2, [r3, #0]

	memset(*stream, 0, stream_length);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	8a3a      	ldrh	r2, [r7, #16]
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f006 f882 	bl	8006e6e <memset>
	for (uint16_t i = 0; i < ledNum; i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	827b      	strh	r3, [r7, #18]
 8000d6e:	e012      	b.n	8000d96 <buildSymbolStream+0x66>
		getColorSymbolStream(led + i, (*stream) + cursor);
 8000d70:	8a7a      	ldrh	r2, [r7, #18]
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	18d0      	adds	r0, r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	4413      	add	r3, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff ff9b 	bl	8000cc0 <getColorSymbolStream>
		cursor += SINGLE_LED_FRAME_SIZE;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3320      	adds	r3, #32
 8000d8e:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < ledNum; i++) {
 8000d90:	8a7b      	ldrh	r3, [r7, #18]
 8000d92:	3301      	adds	r3, #1
 8000d94:	827b      	strh	r3, [r7, #18]
 8000d96:	8a7a      	ldrh	r2, [r7, #18]
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d3e8      	bcc.n	8000d70 <buildSymbolStream+0x40>
	}
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <showLEDs>:

	showLEDs(led, ledNum, busNum);
	free(led);
}

void showLEDs(led_rgb_color_t *led, uint16_t ledNum, spi_bus_num_t busNum) {
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	460b      	mov	r3, r1
 8000db0:	807b      	strh	r3, [r7, #2]
 8000db2:	4613      	mov	r3, r2
 8000db4:	707b      	strb	r3, [r7, #1]
	uint8_t *symbols_stream = NULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
	uint16_t stream_length = LED_STREAM_LENGTH(ledNum);
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	015b      	lsls	r3, r3, #5
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	338c      	adds	r3, #140	; 0x8c
 8000dc2:	81fb      	strh	r3, [r7, #14]

	buildSymbolStream(&symbols_stream, led, ledNum);
 8000dc4:	887a      	ldrh	r2, [r7, #2]
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ffaf 	bl	8000d30 <buildSymbolStream>
	sendSymbolStreamOnLine(symbols_stream, stream_length, busNum);
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	787a      	ldrb	r2, [r7, #1]
 8000dd6:	89f9      	ldrh	r1, [r7, #14]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff0f 	bl	8000bfc <sendSymbolStreamOnLine>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_MspInit+0x5c>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <HAL_MspInit+0x5c>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6193      	str	r3, [r2, #24]
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_MspInit+0x5c>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_MspInit+0x5c>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <HAL_MspInit+0x5c>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	61d3      	str	r3, [r2, #28]
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_MspInit+0x5c>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_MspInit+0x60>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_MspInit+0x60>)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010000 	.word	0x40010000

08000e4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a52      	ldr	r2, [pc, #328]	; (8000fb0 <HAL_SPI_MspInit+0x164>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d14b      	bne.n	8000f04 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e6c:	4b51      	ldr	r3, [pc, #324]	; (8000fb4 <HAL_SPI_MspInit+0x168>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a50      	ldr	r2, [pc, #320]	; (8000fb4 <HAL_SPI_MspInit+0x168>)
 8000e72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b4e      	ldr	r3, [pc, #312]	; (8000fb4 <HAL_SPI_MspInit+0x168>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <HAL_SPI_MspInit+0x168>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a4a      	ldr	r2, [pc, #296]	; (8000fb4 <HAL_SPI_MspInit+0x168>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b48      	ldr	r3, [pc, #288]	; (8000fb4 <HAL_SPI_MspInit+0x168>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e9c:	23a0      	movs	r3, #160	; 0xa0
 8000e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	4619      	mov	r1, r3
 8000eae:	4842      	ldr	r0, [pc, #264]	; (8000fb8 <HAL_SPI_MspInit+0x16c>)
 8000eb0:	f000 fdce 	bl	8001a50 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000eb4:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <HAL_SPI_MspInit+0x170>)
 8000eb6:	4a42      	ldr	r2, [pc, #264]	; (8000fc0 <HAL_SPI_MspInit+0x174>)
 8000eb8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eba:	4b40      	ldr	r3, [pc, #256]	; (8000fbc <HAL_SPI_MspInit+0x170>)
 8000ebc:	2210      	movs	r2, #16
 8000ebe:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec0:	4b3e      	ldr	r3, [pc, #248]	; (8000fbc <HAL_SPI_MspInit+0x170>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	; (8000fbc <HAL_SPI_MspInit+0x170>)
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ecc:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <HAL_SPI_MspInit+0x170>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <HAL_SPI_MspInit+0x170>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ed8:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <HAL_SPI_MspInit+0x170>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ede:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <HAL_SPI_MspInit+0x170>)
 8000ee0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000ee6:	4835      	ldr	r0, [pc, #212]	; (8000fbc <HAL_SPI_MspInit+0x170>)
 8000ee8:	f000 fbc4 	bl	8001674 <HAL_DMA_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8000ef2:	f7ff fe5f 	bl	8000bb4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a30      	ldr	r2, [pc, #192]	; (8000fbc <HAL_SPI_MspInit+0x170>)
 8000efa:	649a      	str	r2, [r3, #72]	; 0x48
 8000efc:	4a2f      	ldr	r2, [pc, #188]	; (8000fbc <HAL_SPI_MspInit+0x170>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f02:	e050      	b.n	8000fa6 <HAL_SPI_MspInit+0x15a>
  else if(hspi->Instance==SPI2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a2e      	ldr	r2, [pc, #184]	; (8000fc4 <HAL_SPI_MspInit+0x178>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d14b      	bne.n	8000fa6 <HAL_SPI_MspInit+0x15a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f0e:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <HAL_SPI_MspInit+0x168>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a28      	ldr	r2, [pc, #160]	; (8000fb4 <HAL_SPI_MspInit+0x168>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <HAL_SPI_MspInit+0x168>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <HAL_SPI_MspInit+0x168>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <HAL_SPI_MspInit+0x168>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6193      	str	r3, [r2, #24]
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <HAL_SPI_MspInit+0x168>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000f3e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	4619      	mov	r1, r3
 8000f52:	481d      	ldr	r0, [pc, #116]	; (8000fc8 <HAL_SPI_MspInit+0x17c>)
 8000f54:	f000 fd7c 	bl	8001a50 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <HAL_SPI_MspInit+0x180>)
 8000f5a:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <HAL_SPI_MspInit+0x184>)
 8000f5c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_SPI_MspInit+0x180>)
 8000f60:	2210      	movs	r2, #16
 8000f62:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_SPI_MspInit+0x180>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_SPI_MspInit+0x180>)
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_SPI_MspInit+0x180>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_SPI_MspInit+0x180>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <HAL_SPI_MspInit+0x180>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_SPI_MspInit+0x180>)
 8000f84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000f8a:	4810      	ldr	r0, [pc, #64]	; (8000fcc <HAL_SPI_MspInit+0x180>)
 8000f8c:	f000 fb72 	bl	8001674 <HAL_DMA_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_SPI_MspInit+0x14e>
      Error_Handler();
 8000f96:	f7ff fe0d 	bl	8000bb4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <HAL_SPI_MspInit+0x180>)
 8000f9e:	649a      	str	r2, [r3, #72]	; 0x48
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_SPI_MspInit+0x180>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40013000 	.word	0x40013000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	200004ac 	.word	0x200004ac
 8000fc0:	40020030 	.word	0x40020030
 8000fc4:	40003800 	.word	0x40003800
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	20000468 	.word	0x20000468
 8000fd0:	40020058 	.word	0x40020058

08000fd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe4:	d114      	bne.n	8001010 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_TIM_Base_MspInit+0x78>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a18      	ldr	r2, [pc, #96]	; (800104c <HAL_TIM_Base_MspInit+0x78>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_TIM_Base_MspInit+0x78>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	201c      	movs	r0, #28
 8001004:	f000 faff 	bl	8001606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001008:	201c      	movs	r0, #28
 800100a:	f000 fb18 	bl	800163e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800100e:	e018      	b.n	8001042 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_TIM_Base_MspInit+0x7c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d113      	bne.n	8001042 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_TIM_Base_MspInit+0x78>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_TIM_Base_MspInit+0x78>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_TIM_Base_MspInit+0x78>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	201d      	movs	r0, #29
 8001038:	f000 fae5 	bl	8001606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800103c:	201d      	movs	r0, #29
 800103e:	f000 fafe 	bl	800163e <HAL_NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000
 8001050:	40000400 	.word	0x40000400

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <HardFault_Handler+0x4>

08001066 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <MemManage_Handler+0x4>

0800106c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <BusFault_Handler+0x4>

08001072 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <UsageFault_Handler+0x4>

08001078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f99c 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DMA1_Channel3_IRQHandler+0x10>)
 80010ae:	f000 fb9b 	bl	80017e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200004ac 	.word	0x200004ac

080010bc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <DMA1_Channel5_IRQHandler+0x10>)
 80010c2:	f000 fb91 	bl	80017e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000468 	.word	0x20000468

080010d0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010d6:	f000 ff34 	bl	8001f42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200009b8 	.word	0x200009b8

080010e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <TIM2_IRQHandler+0x10>)
 80010ea:	f002 fc3d 	bl	8003968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000428 	.word	0x20000428

080010f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <TIM3_IRQHandler+0x10>)
 80010fe:	f002 fc33 	bl	8003968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000390 	.word	0x20000390

0800110c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001114:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001118:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001124:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001128:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800112c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00b      	beq.n	800114c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001134:	e000      	b.n	8001138 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001136:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001138:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f9      	beq.n	8001136 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001142:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <__io_putchar>:
char **environ = __env;

/* Functions */
#include "stdio.h"
int __io_putchar(int ch)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 ITM_SendChar(ch);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ffd2 	bl	800110c <ITM_SendChar>
 return(ch);
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e00a      	b.n	800119a <_read+0x28>
		*ptr++ = __io_getchar();
 8001184:	f3af 8000 	nop.w
 8001188:	4601      	mov	r1, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	60ba      	str	r2, [r7, #8]
 8001190:	b2ca      	uxtb	r2, r1
 8001192:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	3301      	adds	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	dbf0      	blt.n	8001184 <_read+0x12>
	}

	return len;
 80011a2:	687b      	ldr	r3, [r7, #4]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	e009      	b.n	80011d2 <_write+0x26>
		__io_putchar(*ptr++);
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	60ba      	str	r2, [r7, #8]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ffc6 	bl	8001158 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	dbf1      	blt.n	80011be <_write+0x12>
	}
	return len;
 80011da:	687b      	ldr	r3, [r7, #4]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <_close>:

int _close(int file) {
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	return -1;
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <_fstat>:

int _fstat(int file, struct stat *st) {
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800120a:	605a      	str	r2, [r3, #4]
	return 0;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <_isatty>:

int _isatty(int file) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	return 1;
 8001220:	2301      	movs	r3, #1
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <_sbrk+0x50>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x16>
		heap_end = &end;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <_sbrk+0x50>)
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <_sbrk+0x54>)
 8001258:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <_sbrk+0x50>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <_sbrk+0x50>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	466a      	mov	r2, sp
 800126a:	4293      	cmp	r3, r2
 800126c:	d907      	bls.n	800127e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800126e:	f005 fdb9 	bl	8006de4 <__errno>
 8001272:	4602      	mov	r2, r0
 8001274:	230c      	movs	r3, #12
 8001276:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127c:	e006      	b.n	800128c <_sbrk+0x48>
	}

	heap_end += incr;
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <_sbrk+0x50>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a03      	ldr	r2, [pc, #12]	; (8001294 <_sbrk+0x50>)
 8001288:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001e4 	.word	0x200001e4
 8001298:	20000c28 	.word	0x20000c28

0800129c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <SystemInit+0x5c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <SystemInit+0x5c>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <SystemInit+0x5c>)
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4911      	ldr	r1, [pc, #68]	; (80012f8 <SystemInit+0x5c>)
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <SystemInit+0x60>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <SystemInit+0x5c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <SystemInit+0x5c>)
 80012be:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <SystemInit+0x5c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SystemInit+0x5c>)
 80012ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <SystemInit+0x5c>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <SystemInit+0x5c>)
 80012da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80012de:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SystemInit+0x5c>)
 80012e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80012e6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <SystemInit+0x64>)
 80012ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ee:	609a      	str	r2, [r3, #8]
#endif 
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000
 80012fc:	f8ff0000 	.word	0xf8ff0000
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001304:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001306:	e003      	b.n	8001310 <LoopCopyDataInit>

08001308 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800130a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800130c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800130e:	3104      	adds	r1, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001314:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001316:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001318:	d3f6      	bcc.n	8001308 <CopyDataInit>
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800131c:	e002      	b.n	8001324 <LoopFillZerobss>

0800131e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001320:	f842 3b04 	str.w	r3, [r2], #4

08001324 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001326:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001328:	d3f9      	bcc.n	800131e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132a:	f7ff ffb7 	bl	800129c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f005 fd5f 	bl	8006df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff fa11 	bl	8000758 <main>
  bx lr
 8001336:	4770      	bx	lr
  ldr r3, =_sidata
 8001338:	08007ff4 	.word	0x08007ff4
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001340:	200001c8 	.word	0x200001c8
  ldr r2, =_sbss
 8001344:	200001c8 	.word	0x200001c8
  ldr r3, = _ebss
 8001348:	20000c28 	.word	0x20000c28

0800134c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_2_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x28>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f945 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	2000      	movs	r0, #0
 8001368:	f000 f808 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fd3c 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f95d 	bl	800165a <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b8:	f000 f925 	bl	8001606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000008 	.word	0x20000008
 80013d8:	20000004 	.word	0x20000004

080013dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_IncTick+0x1c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_IncTick+0x20>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <HAL_IncTick+0x20>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20000008 	.word	0x20000008
 80013fc:	200004f0 	.word	0x200004f0

08001400 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <HAL_GetTick+0x10>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	200004f0 	.word	0x200004f0

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff fff0 	bl	8001400 <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_Delay+0x40>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffe0 	bl	8001400 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000008 	.word	0x20000008

08001458 <__NVIC_SetPriorityGrouping>:
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_GetPriorityGrouping>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <__NVIC_GetPriorityGrouping+0x18>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f003 0307 	and.w	r3, r3, #7
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_EnableIRQ>:
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db0b      	blt.n	80014e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 021f 	and.w	r2, r3, #31
 80014d4:	4906      	ldr	r1, [pc, #24]	; (80014f0 <__NVIC_EnableIRQ+0x34>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	2001      	movs	r0, #1
 80014de:	fa00 f202 	lsl.w	r2, r0, r2
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <__NVIC_SetPriority>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	; (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	; (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	; 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <SysTick_Config>:
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015bc:	d301      	bcc.n	80015c2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80015be:	2301      	movs	r3, #1
 80015c0:	e00f      	b.n	80015e2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <SysTick_Config+0x40>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ca:	210f      	movs	r1, #15
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d0:	f7ff ff90 	bl	80014f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <SysTick_Config+0x40>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SysTick_Config+0x40>)
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff2d 	bl	8001458 <__NVIC_SetPriorityGrouping>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff42 	bl	80014a0 <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff90 	bl	8001548 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5f 	bl	80014f4 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff35 	bl	80014bc <__NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffa2 	bl	80015ac <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e043      	b.n	8001712 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_DMA_Init+0xa8>)
 8001692:	4413      	add	r3, r2
 8001694:	4a22      	ldr	r2, [pc, #136]	; (8001720 <HAL_DMA_Init+0xac>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	009a      	lsls	r2, r3, #2
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a1f      	ldr	r2, [pc, #124]	; (8001724 <HAL_DMA_Init+0xb0>)
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	bffdfff8 	.word	0xbffdfff8
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	40020000 	.word	0x40020000

08001728 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_DMA_Start_IT+0x20>
 8001744:	2302      	movs	r3, #2
 8001746:	e04a      	b.n	80017de <HAL_DMA_Start_IT+0xb6>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001756:	2b01      	cmp	r3, #1
 8001758:	d13a      	bne.n	80017d0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2202      	movs	r2, #2
 800175e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f938 	bl	80019f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 020e 	orr.w	r2, r2, #14
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	e00f      	b.n	80017be <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0204 	bic.w	r2, r2, #4
 80017ac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 020a 	orr.w	r2, r2, #10
 80017bc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0201 	orr.w	r2, r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e005      	b.n	80017dc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017d8:	2302      	movs	r3, #2
 80017da:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	2204      	movs	r2, #4
 8001806:	409a      	lsls	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d04f      	beq.n	80018b0 <HAL_DMA_IRQHandler+0xc8>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d04a      	beq.n	80018b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0320 	and.w	r3, r3, #32
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0204 	bic.w	r2, r2, #4
 8001836:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a66      	ldr	r2, [pc, #408]	; (80019d8 <HAL_DMA_IRQHandler+0x1f0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d029      	beq.n	8001896 <HAL_DMA_IRQHandler+0xae>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a65      	ldr	r2, [pc, #404]	; (80019dc <HAL_DMA_IRQHandler+0x1f4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d022      	beq.n	8001892 <HAL_DMA_IRQHandler+0xaa>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a63      	ldr	r2, [pc, #396]	; (80019e0 <HAL_DMA_IRQHandler+0x1f8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01a      	beq.n	800188c <HAL_DMA_IRQHandler+0xa4>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a62      	ldr	r2, [pc, #392]	; (80019e4 <HAL_DMA_IRQHandler+0x1fc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d012      	beq.n	8001886 <HAL_DMA_IRQHandler+0x9e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a60      	ldr	r2, [pc, #384]	; (80019e8 <HAL_DMA_IRQHandler+0x200>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00a      	beq.n	8001880 <HAL_DMA_IRQHandler+0x98>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a5f      	ldr	r2, [pc, #380]	; (80019ec <HAL_DMA_IRQHandler+0x204>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d102      	bne.n	800187a <HAL_DMA_IRQHandler+0x92>
 8001874:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001878:	e00e      	b.n	8001898 <HAL_DMA_IRQHandler+0xb0>
 800187a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800187e:	e00b      	b.n	8001898 <HAL_DMA_IRQHandler+0xb0>
 8001880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001884:	e008      	b.n	8001898 <HAL_DMA_IRQHandler+0xb0>
 8001886:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800188a:	e005      	b.n	8001898 <HAL_DMA_IRQHandler+0xb0>
 800188c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001890:	e002      	b.n	8001898 <HAL_DMA_IRQHandler+0xb0>
 8001892:	2340      	movs	r3, #64	; 0x40
 8001894:	e000      	b.n	8001898 <HAL_DMA_IRQHandler+0xb0>
 8001896:	2304      	movs	r3, #4
 8001898:	4a55      	ldr	r2, [pc, #340]	; (80019f0 <HAL_DMA_IRQHandler+0x208>)
 800189a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 8094 	beq.w	80019ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018ae:	e08e      	b.n	80019ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	2202      	movs	r2, #2
 80018b6:	409a      	lsls	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d056      	beq.n	800196e <HAL_DMA_IRQHandler+0x186>
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d051      	beq.n	800196e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0320 	and.w	r3, r3, #32
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10b      	bne.n	80018f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 020a 	bic.w	r2, r2, #10
 80018e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a38      	ldr	r2, [pc, #224]	; (80019d8 <HAL_DMA_IRQHandler+0x1f0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d029      	beq.n	800194e <HAL_DMA_IRQHandler+0x166>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a37      	ldr	r2, [pc, #220]	; (80019dc <HAL_DMA_IRQHandler+0x1f4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d022      	beq.n	800194a <HAL_DMA_IRQHandler+0x162>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a35      	ldr	r2, [pc, #212]	; (80019e0 <HAL_DMA_IRQHandler+0x1f8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d01a      	beq.n	8001944 <HAL_DMA_IRQHandler+0x15c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a34      	ldr	r2, [pc, #208]	; (80019e4 <HAL_DMA_IRQHandler+0x1fc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d012      	beq.n	800193e <HAL_DMA_IRQHandler+0x156>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <HAL_DMA_IRQHandler+0x200>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00a      	beq.n	8001938 <HAL_DMA_IRQHandler+0x150>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a31      	ldr	r2, [pc, #196]	; (80019ec <HAL_DMA_IRQHandler+0x204>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d102      	bne.n	8001932 <HAL_DMA_IRQHandler+0x14a>
 800192c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001930:	e00e      	b.n	8001950 <HAL_DMA_IRQHandler+0x168>
 8001932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001936:	e00b      	b.n	8001950 <HAL_DMA_IRQHandler+0x168>
 8001938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193c:	e008      	b.n	8001950 <HAL_DMA_IRQHandler+0x168>
 800193e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001942:	e005      	b.n	8001950 <HAL_DMA_IRQHandler+0x168>
 8001944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001948:	e002      	b.n	8001950 <HAL_DMA_IRQHandler+0x168>
 800194a:	2320      	movs	r3, #32
 800194c:	e000      	b.n	8001950 <HAL_DMA_IRQHandler+0x168>
 800194e:	2302      	movs	r3, #2
 8001950:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <HAL_DMA_IRQHandler+0x208>)
 8001952:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	2b00      	cmp	r3, #0
 8001962:	d034      	beq.n	80019ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800196c:	e02f      	b.n	80019ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	2208      	movs	r2, #8
 8001974:	409a      	lsls	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4013      	ands	r3, r2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d028      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x1e8>
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d023      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 020e 	bic.w	r2, r2, #14
 8001996:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a0:	2101      	movs	r1, #1
 80019a2:	fa01 f202 	lsl.w	r2, r1, r2
 80019a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	4798      	blx	r3
    }
  }
  return;
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
}
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40020008 	.word	0x40020008
 80019dc:	4002001c 	.word	0x4002001c
 80019e0:	40020030 	.word	0x40020030
 80019e4:	40020044 	.word	0x40020044
 80019e8:	40020058 	.word	0x40020058
 80019ec:	4002006c 	.word	0x4002006c
 80019f0:	40020000 	.word	0x40020000

080019f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b10      	cmp	r3, #16
 8001a20:	d108      	bne.n	8001a34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a32:	e007      	b.n	8001a44 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	60da      	str	r2, [r3, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b08b      	sub	sp, #44	; 0x2c
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	e127      	b.n	8001cb4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a64:	2201      	movs	r2, #1
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f040 8116 	bne.w	8001cae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b12      	cmp	r3, #18
 8001a88:	d034      	beq.n	8001af4 <HAL_GPIO_Init+0xa4>
 8001a8a:	2b12      	cmp	r3, #18
 8001a8c:	d80d      	bhi.n	8001aaa <HAL_GPIO_Init+0x5a>
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d02b      	beq.n	8001aea <HAL_GPIO_Init+0x9a>
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d804      	bhi.n	8001aa0 <HAL_GPIO_Init+0x50>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d031      	beq.n	8001afe <HAL_GPIO_Init+0xae>
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d01c      	beq.n	8001ad8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a9e:	e048      	b.n	8001b32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d043      	beq.n	8001b2c <HAL_GPIO_Init+0xdc>
 8001aa4:	2b11      	cmp	r3, #17
 8001aa6:	d01b      	beq.n	8001ae0 <HAL_GPIO_Init+0x90>
          break;
 8001aa8:	e043      	b.n	8001b32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001aaa:	4a89      	ldr	r2, [pc, #548]	; (8001cd0 <HAL_GPIO_Init+0x280>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d026      	beq.n	8001afe <HAL_GPIO_Init+0xae>
 8001ab0:	4a87      	ldr	r2, [pc, #540]	; (8001cd0 <HAL_GPIO_Init+0x280>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d806      	bhi.n	8001ac4 <HAL_GPIO_Init+0x74>
 8001ab6:	4a87      	ldr	r2, [pc, #540]	; (8001cd4 <HAL_GPIO_Init+0x284>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d020      	beq.n	8001afe <HAL_GPIO_Init+0xae>
 8001abc:	4a86      	ldr	r2, [pc, #536]	; (8001cd8 <HAL_GPIO_Init+0x288>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d01d      	beq.n	8001afe <HAL_GPIO_Init+0xae>
          break;
 8001ac2:	e036      	b.n	8001b32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ac4:	4a85      	ldr	r2, [pc, #532]	; (8001cdc <HAL_GPIO_Init+0x28c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d019      	beq.n	8001afe <HAL_GPIO_Init+0xae>
 8001aca:	4a85      	ldr	r2, [pc, #532]	; (8001ce0 <HAL_GPIO_Init+0x290>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d016      	beq.n	8001afe <HAL_GPIO_Init+0xae>
 8001ad0:	4a84      	ldr	r2, [pc, #528]	; (8001ce4 <HAL_GPIO_Init+0x294>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0xae>
          break;
 8001ad6:	e02c      	b.n	8001b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	623b      	str	r3, [r7, #32]
          break;
 8001ade:	e028      	b.n	8001b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e023      	b.n	8001b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	3308      	adds	r3, #8
 8001af0:	623b      	str	r3, [r7, #32]
          break;
 8001af2:	e01e      	b.n	8001b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	330c      	adds	r3, #12
 8001afa:	623b      	str	r3, [r7, #32]
          break;
 8001afc:	e019      	b.n	8001b32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d102      	bne.n	8001b0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b06:	2304      	movs	r3, #4
 8001b08:	623b      	str	r3, [r7, #32]
          break;
 8001b0a:	e012      	b.n	8001b32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b14:	2308      	movs	r3, #8
 8001b16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	611a      	str	r2, [r3, #16]
          break;
 8001b1e:	e008      	b.n	8001b32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b20:	2308      	movs	r3, #8
 8001b22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	615a      	str	r2, [r3, #20]
          break;
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
          break;
 8001b30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2bff      	cmp	r3, #255	; 0xff
 8001b36:	d801      	bhi.n	8001b3c <HAL_GPIO_Init+0xec>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	e001      	b.n	8001b40 <HAL_GPIO_Init+0xf0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2bff      	cmp	r3, #255	; 0xff
 8001b46:	d802      	bhi.n	8001b4e <HAL_GPIO_Init+0xfe>
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_Init+0x104>
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	3b08      	subs	r3, #8
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	401a      	ands	r2, r3
 8001b66:	6a39      	ldr	r1, [r7, #32]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 8096 	beq.w	8001cae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b82:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <HAL_GPIO_Init+0x298>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	4a58      	ldr	r2, [pc, #352]	; (8001ce8 <HAL_GPIO_Init+0x298>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6193      	str	r3, [r2, #24]
 8001b8e:	4b56      	ldr	r3, [pc, #344]	; (8001ce8 <HAL_GPIO_Init+0x298>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b9a:	4a54      	ldr	r2, [pc, #336]	; (8001cec <HAL_GPIO_Init+0x29c>)
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <HAL_GPIO_Init+0x2a0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_GPIO_Init+0x19e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4a      	ldr	r2, [pc, #296]	; (8001cf4 <HAL_GPIO_Init+0x2a4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00d      	beq.n	8001bea <HAL_GPIO_Init+0x19a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a49      	ldr	r2, [pc, #292]	; (8001cf8 <HAL_GPIO_Init+0x2a8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <HAL_GPIO_Init+0x196>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a48      	ldr	r2, [pc, #288]	; (8001cfc <HAL_GPIO_Init+0x2ac>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_GPIO_Init+0x192>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x1a0>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e004      	b.n	8001bf0 <HAL_GPIO_Init+0x1a0>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e002      	b.n	8001bf0 <HAL_GPIO_Init+0x1a0>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_GPIO_Init+0x1a0>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf2:	f002 0203 	and.w	r2, r2, #3
 8001bf6:	0092      	lsls	r2, r2, #2
 8001bf8:	4093      	lsls	r3, r2
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c00:	493a      	ldr	r1, [pc, #232]	; (8001cec <HAL_GPIO_Init+0x29c>)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	3302      	adds	r3, #2
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4938      	ldr	r1, [pc, #224]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
 8001c26:	e006      	b.n	8001c36 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c28:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	4933      	ldr	r1, [pc, #204]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c42:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	492e      	ldr	r1, [pc, #184]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
 8001c4e:	e006      	b.n	8001c5e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	4929      	ldr	r1, [pc, #164]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c6a:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	4924      	ldr	r1, [pc, #144]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
 8001c76:	e006      	b.n	8001c86 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	491f      	ldr	r1, [pc, #124]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	491a      	ldr	r1, [pc, #104]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60cb      	str	r3, [r1, #12]
 8001c9e:	e006      	b.n	8001cae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4915      	ldr	r1, [pc, #84]	; (8001d00 <HAL_GPIO_Init+0x2b0>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f47f aed0 	bne.w	8001a64 <HAL_GPIO_Init+0x14>
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	372c      	adds	r7, #44	; 0x2c
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	10210000 	.word	0x10210000
 8001cd4:	10110000 	.word	0x10110000
 8001cd8:	10120000 	.word	0x10120000
 8001cdc:	10310000 	.word	0x10310000
 8001ce0:	10320000 	.word	0x10320000
 8001ce4:	10220000 	.word	0x10220000
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	40010800 	.word	0x40010800
 8001cf4:	40010c00 	.word	0x40010c00
 8001cf8:	40011000 	.word	0x40011000
 8001cfc:	40011400 	.word	0x40011400
 8001d00:	40010400 	.word	0x40010400

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	611a      	str	r2, [r3, #16]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d36:	b08b      	sub	sp, #44	; 0x2c
 8001d38:	af06      	add	r7, sp, #24
 8001d3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0d3      	b.n	8001eee <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f004 fdca 	bl	80068f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2203      	movs	r2, #3
 8001d64:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 f954 	bl	800401a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	687e      	ldr	r6, [r7, #4]
 8001d7a:	466d      	mov	r5, sp
 8001d7c:	f106 0410 	add.w	r4, r6, #16
 8001d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	602b      	str	r3, [r5, #0]
 8001d88:	1d33      	adds	r3, r6, #4
 8001d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d8c:	6838      	ldr	r0, [r7, #0]
 8001d8e:	f002 f91d 	bl	8003fcc <USB_CoreInit>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0a4      	b.n	8001eee <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 f951 	bl	8004052 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e035      	b.n	8001e22 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	015b      	lsls	r3, r3, #5
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3329      	adds	r3, #41	; 0x29
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	015b      	lsls	r3, r3, #5
 8001dca:	4413      	add	r3, r2
 8001dcc:	3328      	adds	r3, #40	; 0x28
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	b291      	uxth	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	015b      	lsls	r3, r3, #5
 8001ddc:	4413      	add	r3, r2
 8001dde:	3336      	adds	r3, #54	; 0x36
 8001de0:	460a      	mov	r2, r1
 8001de2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	015b      	lsls	r3, r3, #5
 8001dea:	4413      	add	r3, r2
 8001dec:	332b      	adds	r3, #43	; 0x2b
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	015b      	lsls	r3, r3, #5
 8001df8:	4413      	add	r3, r2
 8001dfa:	3338      	adds	r3, #56	; 0x38
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	015b      	lsls	r3, r3, #5
 8001e06:	4413      	add	r3, r2
 8001e08:	333c      	adds	r3, #60	; 0x3c
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	3302      	adds	r3, #2
 8001e14:	015b      	lsls	r3, r3, #5
 8001e16:	4413      	add	r3, r2
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d3c4      	bcc.n	8001db6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e031      	b.n	8001e96 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	015b      	lsls	r3, r3, #5
 8001e38:	4413      	add	r3, r2
 8001e3a:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	015b      	lsls	r3, r3, #5
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	015b      	lsls	r3, r3, #5
 8001e58:	4413      	add	r3, r2
 8001e5a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	015b      	lsls	r3, r3, #5
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	015b      	lsls	r3, r3, #5
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	330a      	adds	r3, #10
 8001e88:	015b      	lsls	r3, r3, #5
 8001e8a:	4413      	add	r3, r2
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	3301      	adds	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d3c8      	bcc.n	8001e32 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	687e      	ldr	r6, [r7, #4]
 8001ea8:	466d      	mov	r5, sp
 8001eaa:	f106 0410 	add.w	r4, r6, #16
 8001eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	602b      	str	r3, [r5, #0]
 8001eb6:	1d33      	adds	r3, r6, #4
 8001eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eba:	6838      	ldr	r0, [r7, #0]
 8001ebc:	f002 f8d5 	bl	800406a <USB_DevInit>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2202      	movs	r2, #2
 8001eca:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00d      	b.n	8001eee <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 f913 	bl	8005112 <USB_DevDisconnect>

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ef6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_PCD_Start+0x16>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e016      	b.n	8001f3a <HAL_PCD_Start+0x44>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f14:	2101      	movs	r1, #1
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f004 ff2d 	bl	8006d76 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 f8ec 	bl	80050fe <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f002 f85e 	bl	8003fec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 f8e9 	bl	8005126 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f5e:	d102      	bne.n	8001f66 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fadf 	bl	8002524 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 f8db 	bl	8005126 <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7a:	d112      	bne.n	8001fa2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f004 fd22 	bl	80069de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8de 	bl	800215e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 f8bd 	bl	8005126 <USB_ReadInterrupts>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 f8a6 	bl	8005126 <USB_ReadInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe4:	d10b      	bne.n	8001ffe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff8:	b292      	uxth	r2, r2
 8001ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f003 f88f 	bl	8005126 <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002012:	d126      	bne.n	8002062 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800201c:	b29a      	uxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0204 	bic.w	r2, r2, #4
 8002026:	b292      	uxth	r2, r2
 8002028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002034:	b29a      	uxth	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0208 	bic.w	r2, r2, #8
 800203e:	b292      	uxth	r2, r2
 8002040:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f004 fd03 	bl	8006a50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800205c:	b292      	uxth	r2, r2
 800205e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f003 f85d 	bl	8005126 <USB_ReadInterrupts>
 800206c:	4603      	mov	r3, r0
 800206e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002076:	d13d      	bne.n	80020f4 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002080:	b29a      	uxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0208 	orr.w	r2, r2, #8
 800208a:	b292      	uxth	r2, r2
 800208c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002098:	b29a      	uxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a2:	b292      	uxth	r2, r2
 80020a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0204 	orr.w	r2, r2, #4
 80020ba:	b292      	uxth	r2, r2
 80020bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 f82e 	bl	8005126 <USB_ReadInterrupts>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d4:	d10b      	bne.n	80020ee <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020de:	b29a      	uxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020e8:	b292      	uxth	r2, r2
 80020ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f004 fc94 	bl	8006a1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 f814 	bl	8005126 <USB_ReadInterrupts>
 80020fe:	4603      	mov	r3, r0
 8002100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002108:	d10e      	bne.n	8002128 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800211c:	b292      	uxth	r2, r2
 800211e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f004 fc4d 	bl	80069c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fffa 	bl	8005126 <USB_ReadInterrupts>
 8002132:	4603      	mov	r3, r0
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800213c:	d10b      	bne.n	8002156 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002146:	b29a      	uxth	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002150:	b292      	uxth	r2, r2
 8002152:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_PCD_SetAddress+0x1a>
 8002174:	2302      	movs	r3, #2
 8002176:	e013      	b.n	80021a0 <HAL_PCD_SetAddress+0x42>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f002 ffa1 	bl	80050d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	4608      	mov	r0, r1
 80021b2:	4611      	mov	r1, r2
 80021b4:	461a      	mov	r2, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	70fb      	strb	r3, [r7, #3]
 80021ba:	460b      	mov	r3, r1
 80021bc:	803b      	strh	r3, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da0b      	bge.n	80021e6 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	015b      	lsls	r3, r3, #5
 80021d6:	3328      	adds	r3, #40	; 0x28
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	705a      	strb	r2, [r3, #1]
 80021e4:	e00b      	b.n	80021fe <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	015b      	lsls	r3, r3, #5
 80021ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	b2da      	uxtb	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800220a:	883a      	ldrh	r2, [r7, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	78ba      	ldrb	r2, [r7, #2]
 8002214:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	785b      	ldrb	r3, [r3, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002228:	78bb      	ldrb	r3, [r7, #2]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d102      	bne.n	8002234 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_PCD_EP_Open+0x9a>
 800223e:	2302      	movs	r3, #2
 8002240:	e00e      	b.n	8002260 <HAL_PCD_EP_Open+0xb8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68f9      	ldr	r1, [r7, #12]
 8002250:	4618      	mov	r0, r3
 8002252:	f001 ff2f 	bl	80040b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800225e:	7afb      	ldrb	r3, [r7, #11]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002278:	2b00      	cmp	r3, #0
 800227a:	da0b      	bge.n	8002294 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	015b      	lsls	r3, r3, #5
 8002284:	3328      	adds	r3, #40	; 0x28
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	705a      	strb	r2, [r3, #1]
 8002292:	e00b      	b.n	80022ac <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	015b      	lsls	r3, r3, #5
 800229c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_PCD_EP_Close+0x5e>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e00e      	b.n	80022e4 <HAL_PCD_EP_Close+0x7c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68f9      	ldr	r1, [r7, #12]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 f9db 	bl	8004690 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	460b      	mov	r3, r1
 80022fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022fc:	7afb      	ldrb	r3, [r7, #11]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	015b      	lsls	r3, r3, #5
 8002304:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2200      	movs	r2, #0
 800231e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2200      	movs	r2, #0
 8002324:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002326:	7afb      	ldrb	r3, [r7, #11]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	b2da      	uxtb	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002332:	7afb      	ldrb	r3, [r7, #11]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	2b00      	cmp	r3, #0
 800233a:	d106      	bne.n	800234a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6979      	ldr	r1, [r7, #20]
 8002342:	4618      	mov	r0, r3
 8002344:	f002 fb3a 	bl	80049bc <USB_EPStartXfer>
 8002348:	e005      	b.n	8002356 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6979      	ldr	r1, [r7, #20]
 8002350:	4618      	mov	r0, r3
 8002352:	f002 fb33 	bl	80049bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	460b      	mov	r3, r1
 800236e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002370:	7afb      	ldrb	r3, [r7, #11]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	015b      	lsls	r3, r3, #5
 8002378:	3328      	adds	r3, #40	; 0x28
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4413      	add	r3, r2
 800237e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2201      	movs	r2, #1
 8002396:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002398:	7afb      	ldrb	r3, [r7, #11]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023a4:	7afb      	ldrb	r3, [r7, #11]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6979      	ldr	r1, [r7, #20]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 fb01 	bl	80049bc <USB_EPStartXfer>
 80023ba:	e005      	b.n	80023c8 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6979      	ldr	r1, [r7, #20]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f002 fafa 	bl	80049bc <USB_EPStartXfer>
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	f003 0207 	and.w	r2, r3, #7
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d901      	bls.n	80023f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e046      	b.n	800247e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da0b      	bge.n	8002410 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	015b      	lsls	r3, r3, #5
 8002400:	3328      	adds	r3, #40	; 0x28
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	705a      	strb	r2, [r3, #1]
 800240e:	e009      	b.n	8002424 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	015b      	lsls	r3, r3, #5
 8002414:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4413      	add	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	b2da      	uxtb	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_PCD_EP_SetStall+0x72>
 8002440:	2302      	movs	r3, #2
 8002442:	e01c      	b.n	800247e <HAL_PCD_EP_SetStall+0xac>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68f9      	ldr	r1, [r7, #12]
 8002452:	4618      	mov	r0, r3
 8002454:	f002 fd6a 	bl	8004f2c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	2b00      	cmp	r3, #0
 8002460:	d108      	bne.n	8002474 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f002 fe68 	bl	8005144 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	460b      	mov	r3, r1
 8002490:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	f003 020f 	and.w	r2, r3, #15
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	d901      	bls.n	80024a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e03a      	b.n	800251a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	da0b      	bge.n	80024c4 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	015b      	lsls	r3, r3, #5
 80024b4:	3328      	adds	r3, #40	; 0x28
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2201      	movs	r2, #1
 80024c0:	705a      	strb	r2, [r3, #1]
 80024c2:	e00b      	b.n	80024dc <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	015b      	lsls	r3, r3, #5
 80024cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_PCD_EP_ClrStall+0x76>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e00e      	b.n	800251a <HAL_PCD_EP_ClrStall+0x94>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68f9      	ldr	r1, [r7, #12]
 800250a:	4618      	mov	r0, r3
 800250c:	f002 fd50 	bl	8004fb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b089      	sub	sp, #36	; 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800252c:	e282      	b.n	8002a34 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002536:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002538:	8afb      	ldrh	r3, [r7, #22]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002542:	7d7b      	ldrb	r3, [r7, #21]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f040 8142 	bne.w	80027ce <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800254a:	8afb      	ldrh	r3, [r7, #22]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d151      	bne.n	80025f8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002564:	b29c      	uxth	r4, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800256e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002572:	b29b      	uxth	r3, r3
 8002574:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3328      	adds	r3, #40	; 0x28
 800257a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002584:	b29b      	uxth	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	3302      	adds	r3, #2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	441a      	add	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025b6:	2100      	movs	r1, #0
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f004 f9eb 	bl	8006994 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8234 	beq.w	8002a34 <PCD_EP_ISR_Handler+0x510>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f040 822f 	bne.w	8002a34 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	b292      	uxth	r2, r2
 80025ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025f6:	e21d      	b.n	8002a34 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025fe:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002608:	8a7b      	ldrh	r3, [r7, #18]
 800260a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260e:	2b00      	cmp	r3, #0
 8002610:	d033      	beq.n	800267a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261a:	b29b      	uxth	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	3306      	adds	r3, #6
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002650:	b29b      	uxth	r3, r3
 8002652:	f002 fdc6 	bl	80051e2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b29a      	uxth	r2, r3
 800265e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002662:	4013      	ands	r3, r2
 8002664:	b29c      	uxth	r4, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800266e:	b292      	uxth	r2, r2
 8002670:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f004 f964 	bl	8006940 <HAL_PCD_SetupStageCallback>
 8002678:	e1dc      	b.n	8002a34 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800267a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f280 81d8 	bge.w	8002a34 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29a      	uxth	r2, r3
 800268c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002690:	4013      	ands	r3, r2
 8002692:	b29c      	uxth	r4, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800269c:	b292      	uxth	r2, r2
 800269e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	3306      	adds	r3, #6
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d019      	beq.n	8002708 <PCD_EP_ISR_Handler+0x1e4>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d015      	beq.n	8002708 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6959      	ldr	r1, [r3, #20]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f002 fd78 	bl	80051e2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	441a      	add	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002700:	2100      	movs	r1, #0
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f004 f92e 	bl	8006964 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461c      	mov	r4, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002716:	b29b      	uxth	r3, r3
 8002718:	441c      	add	r4, r3
 800271a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800271e:	461c      	mov	r4, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10e      	bne.n	8002746 <PCD_EP_ISR_Handler+0x222>
 8002728:	8823      	ldrh	r3, [r4, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002730:	b29b      	uxth	r3, r3
 8002732:	8023      	strh	r3, [r4, #0]
 8002734:	8823      	ldrh	r3, [r4, #0]
 8002736:	b29b      	uxth	r3, r3
 8002738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800273c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002740:	b29b      	uxth	r3, r3
 8002742:	8023      	strh	r3, [r4, #0]
 8002744:	e02d      	b.n	80027a2 <PCD_EP_ISR_Handler+0x27e>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b3e      	cmp	r3, #62	; 0x3e
 800274c:	d812      	bhi.n	8002774 <PCD_EP_ISR_Handler+0x250>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <PCD_EP_ISR_Handler+0x244>
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	3301      	adds	r3, #1
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	b29b      	uxth	r3, r3
 800276c:	029b      	lsls	r3, r3, #10
 800276e:	b29b      	uxth	r3, r3
 8002770:	8023      	strh	r3, [r4, #0]
 8002772:	e016      	b.n	80027a2 <PCD_EP_ISR_Handler+0x27e>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	61bb      	str	r3, [r7, #24]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <PCD_EP_ISR_Handler+0x26a>
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	3b01      	subs	r3, #1
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	b29b      	uxth	r3, r3
 8002792:	029b      	lsls	r3, r3, #10
 8002794:	b29b      	uxth	r3, r3
 8002796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279e:	b29b      	uxth	r3, r3
 80027a0:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b2:	b29c      	uxth	r4, r3
 80027b4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80027b8:	b29c      	uxth	r4, r3
 80027ba:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80027be:	b29c      	uxth	r4, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4ba2      	ldr	r3, [pc, #648]	; (8002a50 <PCD_EP_ISR_Handler+0x52c>)
 80027c6:	4323      	orrs	r3, r4
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	8013      	strh	r3, [r2, #0]
 80027cc:	e132      	b.n	8002a34 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	7d7b      	ldrb	r3, [r7, #21]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f280 80d1 	bge.w	800298a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	7d7b      	ldrb	r3, [r7, #21]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027fc:	4013      	ands	r3, r2
 80027fe:	b29c      	uxth	r4, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	7d7b      	ldrb	r3, [r7, #21]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002810:	b292      	uxth	r2, r2
 8002812:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002814:	7d7b      	ldrb	r3, [r7, #21]
 8002816:	015b      	lsls	r3, r3, #5
 8002818:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	7b1b      	ldrb	r3, [r3, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d121      	bne.n	800286e <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002832:	b29b      	uxth	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	3306      	adds	r3, #6
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002852:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002854:	8bfb      	ldrh	r3, [r7, #30]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d072      	beq.n	8002940 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6959      	ldr	r1, [r3, #20]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	88da      	ldrh	r2, [r3, #6]
 8002866:	8bfb      	ldrh	r3, [r7, #30]
 8002868:	f002 fcbb 	bl	80051e2 <USB_ReadPMA>
 800286c:	e068      	b.n	8002940 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d021      	beq.n	80028cc <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002890:	b29b      	uxth	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	3302      	adds	r3, #2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80028b2:	8bfb      	ldrh	r3, [r7, #30]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d02a      	beq.n	800290e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6959      	ldr	r1, [r3, #20]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	891a      	ldrh	r2, [r3, #8]
 80028c4:	8bfb      	ldrh	r3, [r7, #30]
 80028c6:	f002 fc8c 	bl	80051e2 <USB_ReadPMA>
 80028ca:	e020      	b.n	800290e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	3306      	adds	r3, #6
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80028f6:	8bfb      	ldrh	r3, [r7, #30]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6959      	ldr	r1, [r3, #20]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	895a      	ldrh	r2, [r3, #10]
 8002908:	8bfb      	ldrh	r3, [r7, #30]
 800290a:	f002 fc6a 	bl	80051e2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002928:	b29c      	uxth	r4, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	441a      	add	r2, r3
 8002938:	4b46      	ldr	r3, [pc, #280]	; (8002a54 <PCD_EP_ISR_Handler+0x530>)
 800293a:	4323      	orrs	r3, r4
 800293c:	b29b      	uxth	r3, r3
 800293e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	8bfb      	ldrh	r3, [r7, #30]
 8002946:	441a      	add	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	8bfb      	ldrh	r3, [r7, #30]
 8002952:	441a      	add	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <PCD_EP_ISR_Handler+0x446>
 8002960:	8bfa      	ldrh	r2, [r7, #30]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	429a      	cmp	r2, r3
 8002968:	d206      	bcs.n	8002978 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f003 fff7 	bl	8006964 <HAL_PCD_DataOutStageCallback>
 8002976:	e008      	b.n	800298a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	7819      	ldrb	r1, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fcb1 	bl	80022ec <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800298a:	8a7b      	ldrh	r3, [r7, #18]
 800298c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002990:	2b00      	cmp	r3, #0
 8002992:	d04f      	beq.n	8002a34 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002994:	7d7b      	ldrb	r3, [r7, #21]
 8002996:	015b      	lsls	r3, r3, #5
 8002998:	3328      	adds	r3, #40	; 0x28
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	7d7b      	ldrb	r3, [r7, #21]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b8:	b29c      	uxth	r4, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	7d7b      	ldrb	r3, [r7, #21]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	441a      	add	r2, r3
 80029c6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80029ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	3302      	adds	r3, #2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	441a      	add	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d106      	bne.n	8002a22 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f003 ffba 	bl	8006994 <HAL_PCD_DataInStageCallback>
 8002a20:	e008      	b.n	8002a34 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	7819      	ldrb	r1, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	695a      	ldr	r2, [r3, #20]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fc96 	bl	8002360 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	b21b      	sxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f6ff ad74 	blt.w	800252e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3724      	adds	r7, #36	; 0x24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}
 8002a50:	ffff8080 	.word	0xffff8080
 8002a54:	ffff80c0 	.word	0xffff80c0

08002a58 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	817b      	strh	r3, [r7, #10]
 8002a66:	4613      	mov	r3, r2
 8002a68:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a6a:	897b      	ldrh	r3, [r7, #10]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a76:	897b      	ldrh	r3, [r7, #10]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	015b      	lsls	r3, r3, #5
 8002a7e:	3328      	adds	r3, #40	; 0x28
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e006      	b.n	8002a96 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a88:	897b      	ldrh	r3, [r7, #10]
 8002a8a:	015b      	lsls	r3, r3, #5
 8002a8c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a96:	893b      	ldrh	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	80da      	strh	r2, [r3, #6]
 8002aaa:	e00b      	b.n	8002ac4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e26c      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8087 	beq.w	8002bfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002af0:	4b92      	ldr	r3, [pc, #584]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d00c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002afc:	4b8f      	ldr	r3, [pc, #572]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d112      	bne.n	8002b2e <HAL_RCC_OscConfig+0x5e>
 8002b08:	4b8c      	ldr	r3, [pc, #560]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b16:	4b89      	ldr	r3, [pc, #548]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d06c      	beq.n	8002bfc <HAL_RCC_OscConfig+0x12c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d168      	bne.n	8002bfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e246      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x76>
 8002b38:	4b80      	ldr	r3, [pc, #512]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a7f      	ldr	r2, [pc, #508]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e02e      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x98>
 8002b4e:	4b7b      	ldr	r3, [pc, #492]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a7a      	ldr	r2, [pc, #488]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b78      	ldr	r3, [pc, #480]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a77      	ldr	r2, [pc, #476]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e01d      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd4>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0xbc>
 8002b72:	4b72      	ldr	r3, [pc, #456]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a71      	ldr	r2, [pc, #452]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a6e      	ldr	r2, [pc, #440]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd4>
 8002b8c:	4b6b      	ldr	r3, [pc, #428]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a6a      	ldr	r2, [pc, #424]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b68      	ldr	r3, [pc, #416]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a67      	ldr	r2, [pc, #412]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe fc28 	bl	8001400 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fc24 	bl	8001400 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e1fa      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	4b5d      	ldr	r3, [pc, #372]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xe4>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fc14 	bl	8001400 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fc10 	bl	8001400 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e1e6      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bee:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x10c>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d063      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c0a:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c16:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d11c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x18c>
 8002c22:	4b46      	ldr	r3, [pc, #280]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d116      	bne.n	8002c5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_RCC_OscConfig+0x176>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e1ba      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	4b3d      	ldr	r3, [pc, #244]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4939      	ldr	r1, [pc, #228]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	e03a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c64:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <HAL_RCC_OscConfig+0x270>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7fe fbc9 	bl	8001400 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c72:	f7fe fbc5 	bl	8001400 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e19b      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c84:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4927      	ldr	r1, [pc, #156]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
 8002ca4:	e015      	b.n	8002cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca6:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fe fba8 	bl	8001400 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb4:	f7fe fba4 	bl	8001400 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e17a      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d03a      	beq.n	8002d54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d019      	beq.n	8002d1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cec:	f7fe fb88 	bl	8001400 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf4:	f7fe fb84 	bl	8001400 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e15a      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d12:	2001      	movs	r0, #1
 8002d14:	f000 faa8 	bl	8003268 <RCC_Delay>
 8002d18:	e01c      	b.n	8002d54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7fe fb6e 	bl	8001400 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d26:	e00f      	b.n	8002d48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d28:	f7fe fb6a 	bl	8001400 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d908      	bls.n	8002d48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e140      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	42420000 	.word	0x42420000
 8002d44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d48:	4b9e      	ldr	r3, [pc, #632]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e9      	bne.n	8002d28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a6 	beq.w	8002eae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d66:	4b97      	ldr	r3, [pc, #604]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d72:	4b94      	ldr	r3, [pc, #592]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	4a93      	ldr	r2, [pc, #588]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	61d3      	str	r3, [r2, #28]
 8002d7e:	4b91      	ldr	r3, [pc, #580]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b8e      	ldr	r3, [pc, #568]	; (8002fc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d118      	bne.n	8002dcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9a:	4b8b      	ldr	r3, [pc, #556]	; (8002fc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a8a      	ldr	r2, [pc, #552]	; (8002fc8 <HAL_RCC_OscConfig+0x4f8>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fb2b 	bl	8001400 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7fe fb27 	bl	8001400 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	; 0x64
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0fd      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	4b81      	ldr	r3, [pc, #516]	; (8002fc8 <HAL_RCC_OscConfig+0x4f8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x312>
 8002dd4:	4b7b      	ldr	r3, [pc, #492]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4a7a      	ldr	r2, [pc, #488]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6213      	str	r3, [r2, #32]
 8002de0:	e02d      	b.n	8002e3e <HAL_RCC_OscConfig+0x36e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x334>
 8002dea:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4a75      	ldr	r2, [pc, #468]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	6213      	str	r3, [r2, #32]
 8002df6:	4b73      	ldr	r3, [pc, #460]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4a72      	ldr	r2, [pc, #456]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	6213      	str	r3, [r2, #32]
 8002e02:	e01c      	b.n	8002e3e <HAL_RCC_OscConfig+0x36e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d10c      	bne.n	8002e26 <HAL_RCC_OscConfig+0x356>
 8002e0c:	4b6d      	ldr	r3, [pc, #436]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4a6c      	ldr	r2, [pc, #432]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	6213      	str	r3, [r2, #32]
 8002e18:	4b6a      	ldr	r3, [pc, #424]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4a69      	ldr	r2, [pc, #420]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6213      	str	r3, [r2, #32]
 8002e24:	e00b      	b.n	8002e3e <HAL_RCC_OscConfig+0x36e>
 8002e26:	4b67      	ldr	r3, [pc, #412]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4a66      	ldr	r2, [pc, #408]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6213      	str	r3, [r2, #32]
 8002e32:	4b64      	ldr	r3, [pc, #400]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4a63      	ldr	r2, [pc, #396]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d015      	beq.n	8002e72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7fe fadb 	bl	8001400 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe fad7 	bl	8001400 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e0ab      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ee      	beq.n	8002e4e <HAL_RCC_OscConfig+0x37e>
 8002e70:	e014      	b.n	8002e9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e72:	f7fe fac5 	bl	8001400 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe fac1 	bl	8001400 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e095      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e90:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ee      	bne.n	8002e7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d105      	bne.n	8002eae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea2:	4b48      	ldr	r3, [pc, #288]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4a47      	ldr	r2, [pc, #284]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8081 	beq.w	8002fba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb8:	4b42      	ldr	r3, [pc, #264]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d061      	beq.n	8002f88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d146      	bne.n	8002f5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ecc:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <HAL_RCC_OscConfig+0x4fc>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fa95 	bl	8001400 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe fa91 	bl	8001400 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e067      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eec:	4b35      	ldr	r3, [pc, #212]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d108      	bne.n	8002f14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f02:	4b30      	ldr	r3, [pc, #192]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	492d      	ldr	r1, [pc, #180]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f14:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a19      	ldr	r1, [r3, #32]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	430b      	orrs	r3, r1
 8002f26:	4927      	ldr	r1, [pc, #156]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_RCC_OscConfig+0x4fc>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fe fa65 	bl	8001400 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe fa61 	bl	8001400 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e037      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x46a>
 8002f58:	e02f      	b.n	8002fba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_RCC_OscConfig+0x4fc>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fe fa4e 	bl	8001400 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fe fa4a 	bl	8001400 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e020      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7a:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x498>
 8002f86:	e018      	b.n	8002fba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e013      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	42420060 	.word	0x42420060

08002fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0d0      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d910      	bls.n	8003014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b67      	ldr	r3, [pc, #412]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0207 	bic.w	r2, r3, #7
 8002ffa:	4965      	ldr	r1, [pc, #404]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b63      	ldr	r3, [pc, #396]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0b8      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800302c:	4b59      	ldr	r3, [pc, #356]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a58      	ldr	r2, [pc, #352]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003036:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003044:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800304e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003050:	4b50      	ldr	r3, [pc, #320]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	494d      	ldr	r1, [pc, #308]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d040      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b47      	ldr	r3, [pc, #284]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d115      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e07f      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	4b41      	ldr	r3, [pc, #260]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e073      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e06b      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4936      	ldr	r1, [pc, #216]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c0:	f7fe f99e 	bl	8001400 <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7fe f99a 	bl	8001400 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e053      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 020c 	and.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1eb      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b27      	ldr	r3, [pc, #156]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d210      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 0207 	bic.w	r2, r3, #7
 8003106:	4922      	ldr	r1, [pc, #136]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e032      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4916      	ldr	r1, [pc, #88]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	490e      	ldr	r1, [pc, #56]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315e:	f000 f821 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8003162:	4601      	mov	r1, r0
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	5cd3      	ldrb	r3, [r2, r3]
 8003172:	fa21 f303 	lsr.w	r3, r1, r3
 8003176:	4a09      	ldr	r2, [pc, #36]	; (800319c <HAL_RCC_ClockConfig+0x1cc>)
 8003178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_RCC_ClockConfig+0x1d0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe f8fc 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40022000 	.word	0x40022000
 8003194:	40021000 	.word	0x40021000
 8003198:	08007f44 	.word	0x08007f44
 800319c:	20000000 	.word	0x20000000
 80031a0:	20000004 	.word	0x20000004

080031a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	b490      	push	{r4, r7}
 80031a6:	b08a      	sub	sp, #40	; 0x28
 80031a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031aa:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031ac:	1d3c      	adds	r4, r7, #4
 80031ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d002      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x40>
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0x46>
 80031e2:	e02d      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031e6:	623b      	str	r3, [r7, #32]
      break;
 80031e8:	e02d      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	0c9b      	lsrs	r3, r3, #18
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031f6:	4413      	add	r3, r2
 80031f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	0c5b      	lsrs	r3, r3, #17
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003216:	4413      	add	r3, r2
 8003218:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800321c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	4a0f      	ldr	r2, [pc, #60]	; (8003260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003222:	fb02 f203 	mul.w	r2, r2, r3
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	e004      	b.n	800323a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	623b      	str	r3, [r7, #32]
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b07      	ldr	r3, [pc, #28]	; (8003260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003242:	623b      	str	r3, [r7, #32]
      break;
 8003244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003246:	6a3b      	ldr	r3, [r7, #32]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3728      	adds	r7, #40	; 0x28
 800324c:	46bd      	mov	sp, r7
 800324e:	bc90      	pop	{r4, r7}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	08007ee8 	.word	0x08007ee8
 8003258:	08007ef8 	.word	0x08007ef8
 800325c:	40021000 	.word	0x40021000
 8003260:	007a1200 	.word	0x007a1200
 8003264:	003d0900 	.word	0x003d0900

08003268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <RCC_Delay+0x34>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <RCC_Delay+0x38>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0a5b      	lsrs	r3, r3, #9
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003284:	bf00      	nop
  }
  while (Delay --);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	60fa      	str	r2, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f9      	bne.n	8003284 <RCC_Delay+0x1c>
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000000 	.word	0x20000000
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d07d      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c4:	4b4f      	ldr	r3, [pc, #316]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d0:	4b4c      	ldr	r3, [pc, #304]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	4a4b      	ldr	r2, [pc, #300]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032da:	61d3      	str	r3, [r2, #28]
 80032dc:	4b49      	ldr	r3, [pc, #292]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e8:	2301      	movs	r3, #1
 80032ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	4b46      	ldr	r3, [pc, #280]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d118      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f8:	4b43      	ldr	r3, [pc, #268]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a42      	ldr	r2, [pc, #264]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003304:	f7fe f87c 	bl	8001400 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	e008      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330c:	f7fe f878 	bl	8001400 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e06d      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800332a:	4b36      	ldr	r3, [pc, #216]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d02e      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	429a      	cmp	r2, r3
 8003346:	d027      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003348:	4b2e      	ldr	r3, [pc, #184]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003352:	4b2e      	ldr	r3, [pc, #184]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003358:	4b2c      	ldr	r3, [pc, #176]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d014      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336e:	f7fe f847 	bl	8001400 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fe f843 	bl	8001400 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e036      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ee      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4917      	ldr	r1, [pc, #92]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b0:	4b14      	ldr	r3, [pc, #80]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4a13      	ldr	r2, [pc, #76]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	490b      	ldr	r1, [pc, #44]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	4904      	ldr	r1, [pc, #16]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	42420440 	.word	0x42420440

08003410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e053      	b.n	80034ca <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fd fd05 	bl	8000e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003458:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	ea42 0103 	orr.w	r1, r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	0c1a      	lsrs	r2, r3, #16
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f002 0204 	and.w	r2, r2, #4
 80034a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	4613      	mov	r3, r2
 80034e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_SPI_Transmit_DMA+0x20>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e093      	b.n	800361c <HAL_SPI_Transmit_DMA+0x148>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d002      	beq.n	800350e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003508:	2302      	movs	r3, #2
 800350a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800350c:	e081      	b.n	8003612 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <HAL_SPI_Transmit_DMA+0x46>
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800351e:	e078      	b.n	8003612 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2203      	movs	r2, #3
 8003524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	88fa      	ldrh	r2, [r7, #6]
 800353e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003566:	d107      	bne.n	8003578 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003576:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357c:	4a29      	ldr	r2, [pc, #164]	; (8003624 <HAL_SPI_Transmit_DMA+0x150>)
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003584:	4a28      	ldr	r2, [pc, #160]	; (8003628 <HAL_SPI_Transmit_DMA+0x154>)
 8003586:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358c:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_SPI_Transmit_DMA+0x158>)
 800358e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003594:	2200      	movs	r2, #0
 8003596:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	4619      	mov	r1, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80035b0:	f7fe f8ba 	bl	8001728 <HAL_DMA_Start_IT>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f043 0210 	orr.w	r2, r3, #16
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80035d2:	e01e      	b.n	8003612 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d007      	beq.n	80035f2 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0220 	orr.w	r2, r2, #32
 8003600:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0202 	orr.w	r2, r2, #2
 8003610:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800361a:	7dfb      	ldrb	r3, [r7, #23]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	0800370d 	.word	0x0800370d
 8003628:	08003667 	.word	0x08003667
 800362c:	08003729 	.word	0x08003729

08003630 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr

08003666 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003674:	f7fd fec4 	bl	8001400 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b20      	cmp	r3, #32
 8003686:	d03b      	beq.n	8003700 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0220 	bic.w	r2, r2, #32
 8003696:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0202 	bic.w	r2, r2, #2
 80036a6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	2164      	movs	r1, #100	; 0x64
 80036ac:	6978      	ldr	r0, [r7, #20]
 80036ae:	f000 f8c5 	bl	800383c <SPI_EndRxTxTransaction>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2200      	movs	r2, #0
 80036e6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80036f8:	6978      	ldr	r0, [r7, #20]
 80036fa:	f7ff ffab 	bl	8003654 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80036fe:	e002      	b.n	8003706 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003700:	6978      	ldr	r0, [r7, #20]
 8003702:	f7ff ff95 	bl	8003630 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff ff91 	bl	8003642 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0203 	bic.w	r2, r2, #3
 8003744:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	f043 0210 	orr.w	r2, r3, #16
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff ff7a 	bl	8003654 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003778:	e04c      	b.n	8003814 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003780:	d048      	beq.n	8003814 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003782:	f7fd fe3d 	bl	8001400 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d902      	bls.n	8003798 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d13d      	bne.n	8003814 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b0:	d111      	bne.n	80037d6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ba:	d004      	beq.n	80037c6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c4:	d107      	bne.n	80037d6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037de:	d10f      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e00f      	b.n	8003834 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4013      	ands	r3, r2
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	429a      	cmp	r2, r3
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	429a      	cmp	r2, r3
 8003830:	d1a3      	bne.n	800377a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2200      	movs	r2, #0
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f7ff ff88 	bl	8003768 <SPI_WaitFlagStateUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e000      	b.n	8003870 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e01d      	b.n	80038c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fb98 	bl	8000fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f000 fa3a 	bl	8003d30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a1a      	ldr	r2, [r3, #32]
 80038e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10f      	bne.n	800390e <HAL_TIM_Base_Stop+0x40>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	f240 4344 	movw	r3, #1092	; 0x444
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <HAL_TIM_Base_Stop+0x40>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0201 	orr.w	r2, r2, #1
 8003938:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b06      	cmp	r3, #6
 800394a:	d007      	beq.n	800395c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d122      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b02      	cmp	r3, #2
 800398a:	d11b      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0202 	mvn.w	r2, #2
 8003994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f9a4 	bl	8003cf8 <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f997 	bl	8003ce6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f9a6 	bl	8003d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d122      	bne.n	8003a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d11b      	bne.n	8003a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0204 	mvn.w	r2, #4
 80039e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f97a 	bl	8003cf8 <HAL_TIM_IC_CaptureCallback>
 8003a04:	e005      	b.n	8003a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f96d 	bl	8003ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f97c 	bl	8003d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d122      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d11b      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0208 	mvn.w	r2, #8
 8003a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2204      	movs	r2, #4
 8003a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f950 	bl	8003cf8 <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f943 	bl	8003ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f952 	bl	8003d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d122      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d11b      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0210 	mvn.w	r2, #16
 8003a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2208      	movs	r2, #8
 8003a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f926 	bl	8003cf8 <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f919 	bl	8003ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f928 	bl	8003d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d10e      	bne.n	8003aec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d107      	bne.n	8003aec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0201 	mvn.w	r2, #1
 8003ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fc fd46 	bl	8000578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af6:	2b80      	cmp	r3, #128	; 0x80
 8003af8:	d10e      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b04:	2b80      	cmp	r3, #128	; 0x80
 8003b06:	d107      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa51 	bl	8003fba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d10e      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b40      	cmp	r3, #64	; 0x40
 8003b32:	d107      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f8ec 	bl	8003d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d10e      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d107      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0220 	mvn.w	r2, #32
 8003b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa1c 	bl	8003fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_TIM_ConfigClockSource+0x18>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e0a6      	b.n	8003cde <HAL_TIM_ConfigClockSource+0x166>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d067      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0x120>
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d80b      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x6c>
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d073      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x140>
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d802      	bhi.n	8003bda <HAL_TIM_ConfigClockSource+0x62>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d06f      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003bd8:	e078      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d06c      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x140>
 8003bde:	2b30      	cmp	r3, #48	; 0x30
 8003be0:	d06a      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003be2:	e073      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003be4:	2b70      	cmp	r3, #112	; 0x70
 8003be6:	d00d      	beq.n	8003c04 <HAL_TIM_ConfigClockSource+0x8c>
 8003be8:	2b70      	cmp	r3, #112	; 0x70
 8003bea:	d804      	bhi.n	8003bf6 <HAL_TIM_ConfigClockSource+0x7e>
 8003bec:	2b50      	cmp	r3, #80	; 0x50
 8003bee:	d033      	beq.n	8003c58 <HAL_TIM_ConfigClockSource+0xe0>
 8003bf0:	2b60      	cmp	r3, #96	; 0x60
 8003bf2:	d041      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003bf4:	e06a      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfa:	d066      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x152>
 8003bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c00:	d017      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c02:	e063      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	6899      	ldr	r1, [r3, #8]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f000 f965 	bl	8003ee2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	609a      	str	r2, [r3, #8]
      break;
 8003c30:	e04c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6899      	ldr	r1, [r3, #8]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f000 f94e 	bl	8003ee2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c54:	609a      	str	r2, [r3, #8]
      break;
 8003c56:	e039      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	461a      	mov	r2, r3
 8003c66:	f000 f8c5 	bl	8003df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2150      	movs	r1, #80	; 0x50
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 f91c 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003c76:	e029      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	461a      	mov	r2, r3
 8003c86:	f000 f8e3 	bl	8003e50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2160      	movs	r1, #96	; 0x60
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f90c 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003c96:	e019      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f000 f8a5 	bl	8003df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2140      	movs	r1, #64	; 0x40
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f8fc 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003cb6:	e009      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f000 f8f3 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003cc8:	e000      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
	...

08003d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a29      	ldr	r2, [pc, #164]	; (8003de8 <TIM_Base_SetConfig+0xb8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00b      	beq.n	8003d60 <TIM_Base_SetConfig+0x30>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4e:	d007      	beq.n	8003d60 <TIM_Base_SetConfig+0x30>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a26      	ldr	r2, [pc, #152]	; (8003dec <TIM_Base_SetConfig+0xbc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_Base_SetConfig+0x30>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a25      	ldr	r2, [pc, #148]	; (8003df0 <TIM_Base_SetConfig+0xc0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d108      	bne.n	8003d72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <TIM_Base_SetConfig+0xb8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00b      	beq.n	8003d92 <TIM_Base_SetConfig+0x62>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d80:	d007      	beq.n	8003d92 <TIM_Base_SetConfig+0x62>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a19      	ldr	r2, [pc, #100]	; (8003dec <TIM_Base_SetConfig+0xbc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_Base_SetConfig+0x62>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <TIM_Base_SetConfig+0xc0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d108      	bne.n	8003da4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <TIM_Base_SetConfig+0xb8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d103      	bne.n	8003dd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	615a      	str	r2, [r3, #20]
}
 8003dde:	bf00      	nop
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40000800 	.word	0x40000800

08003df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f023 0201 	bic.w	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f023 030a 	bic.w	r3, r3, #10
 8003e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f023 0210 	bic.w	r2, r3, #16
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	031b      	lsls	r3, r3, #12
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	621a      	str	r2, [r3, #32]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f043 0307 	orr.w	r3, r3, #7
 8003ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b087      	sub	sp, #28
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003efc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	021a      	lsls	r2, r3, #8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	609a      	str	r2, [r3, #8]
}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e032      	b.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f70:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr

08003fcc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fcc:	b084      	sub	sp, #16
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	f107 0014 	add.w	r0, r7, #20
 8003fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	b004      	add	sp, #16
 8003fea:	4770      	bx	lr

08003fec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ff4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ff8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004000:	b29a      	uxth	r2, r3
 8004002:	89fb      	ldrh	r3, [r7, #14]
 8004004:	4313      	orrs	r3, r2
 8004006:	b29a      	uxth	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004022:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004026:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800402e:	b29b      	uxth	r3, r3
 8004030:	b21a      	sxth	r2, r3
 8004032:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004036:	43db      	mvns	r3, r3
 8004038:	b21b      	sxth	r3, r3
 800403a:	4013      	ands	r3, r2
 800403c:	b21b      	sxth	r3, r3
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr

08004052 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800406a:	b084      	sub	sp, #16
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	f107 0014 	add.w	r0, r7, #20
 8004078:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ffa5 	bl	8003fec <USB_EnableGlobalInt>

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040ae:	b004      	add	sp, #16
 80040b0:	4770      	bx	lr
	...

080040b4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040b4:	b490      	push	{r4, r7}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80040d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	78db      	ldrb	r3, [r3, #3]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d819      	bhi.n	8004116 <USB_ActivateEndpoint+0x62>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <USB_ActivateEndpoint+0x34>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	0800410d 	.word	0x0800410d
 80040f0:	0800411d 	.word	0x0800411d
 80040f4:	08004103 	.word	0x08004103
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040f8:	89bb      	ldrh	r3, [r7, #12]
 80040fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040fe:	81bb      	strh	r3, [r7, #12]
      break;
 8004100:	e00d      	b.n	800411e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004102:	89bb      	ldrh	r3, [r7, #12]
 8004104:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004108:	81bb      	strh	r3, [r7, #12]
      break;
 800410a:	e008      	b.n	800411e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800410c:	89bb      	ldrh	r3, [r7, #12]
 800410e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004112:	81bb      	strh	r3, [r7, #12]
      break;
 8004114:	e003      	b.n	800411e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
      break;
 800411a:	e000      	b.n	800411e <USB_ActivateEndpoint+0x6a>
      break;
 800411c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	441a      	add	r2, r3
 8004128:	89bb      	ldrh	r3, [r7, #12]
 800412a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800412e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413a:	b29b      	uxth	r3, r3
 800413c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004154:	b29a      	uxth	r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	4313      	orrs	r3, r2
 800415e:	b29c      	uxth	r4, r3
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	441a      	add	r2, r3
 800416a:	4b8a      	ldr	r3, [pc, #552]	; (8004394 <USB_ActivateEndpoint+0x2e0>)
 800416c:	4323      	orrs	r3, r4
 800416e:	b29b      	uxth	r3, r3
 8004170:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	7b1b      	ldrb	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	f040 8112 	bne.w	80043a0 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	785b      	ldrb	r3, [r3, #1]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d067      	beq.n	8004254 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004184:	687c      	ldr	r4, [r7, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800418c:	b29b      	uxth	r3, r3
 800418e:	441c      	add	r4, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	4423      	add	r3, r4
 8004198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800419c:	461c      	mov	r4, r3
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	88db      	ldrh	r3, [r3, #6]
 80041a2:	085b      	lsrs	r3, r3, #1
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29c      	uxth	r4, r3
 80041ba:	4623      	mov	r3, r4
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d014      	beq.n	80041ee <USB_ActivateEndpoint+0x13a>
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	b29c      	uxth	r4, r3
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	441a      	add	r2, r3
 80041e6:	4b6c      	ldr	r3, [pc, #432]	; (8004398 <USB_ActivateEndpoint+0x2e4>)
 80041e8:	4323      	orrs	r3, r4
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	78db      	ldrb	r3, [r3, #3]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d018      	beq.n	8004228 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420c:	b29c      	uxth	r4, r3
 800420e:	f084 0320 	eor.w	r3, r4, #32
 8004212:	b29c      	uxth	r4, r3
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	4b5d      	ldr	r3, [pc, #372]	; (8004394 <USB_ActivateEndpoint+0x2e0>)
 8004220:	4323      	orrs	r3, r4
 8004222:	b29b      	uxth	r3, r3
 8004224:	8013      	strh	r3, [r2, #0]
 8004226:	e22b      	b.n	8004680 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423e:	b29c      	uxth	r4, r3
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	4b52      	ldr	r3, [pc, #328]	; (8004394 <USB_ActivateEndpoint+0x2e0>)
 800424c:	4323      	orrs	r3, r4
 800424e:	b29b      	uxth	r3, r3
 8004250:	8013      	strh	r3, [r2, #0]
 8004252:	e215      	b.n	8004680 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004254:	687c      	ldr	r4, [r7, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800425c:	b29b      	uxth	r3, r3
 800425e:	441c      	add	r4, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	4423      	add	r3, r4
 8004268:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800426c:	461c      	mov	r4, r3
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	88db      	ldrh	r3, [r3, #6]
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	b29b      	uxth	r3, r3
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	b29b      	uxth	r3, r3
 800427a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800427c:	687c      	ldr	r4, [r7, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004284:	b29b      	uxth	r3, r3
 8004286:	441c      	add	r4, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	4423      	add	r3, r4
 8004290:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004294:	461c      	mov	r4, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10e      	bne.n	80042bc <USB_ActivateEndpoint+0x208>
 800429e:	8823      	ldrh	r3, [r4, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	8023      	strh	r3, [r4, #0]
 80042aa:	8823      	ldrh	r3, [r4, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	8023      	strh	r3, [r4, #0]
 80042ba:	e02d      	b.n	8004318 <USB_ActivateEndpoint+0x264>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b3e      	cmp	r3, #62	; 0x3e
 80042c2:	d812      	bhi.n	80042ea <USB_ActivateEndpoint+0x236>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <USB_ActivateEndpoint+0x22a>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	3301      	adds	r3, #1
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	029b      	lsls	r3, r3, #10
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8023      	strh	r3, [r4, #0]
 80042e8:	e016      	b.n	8004318 <USB_ActivateEndpoint+0x264>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d102      	bne.n	8004304 <USB_ActivateEndpoint+0x250>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	3b01      	subs	r3, #1
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	b29b      	uxth	r3, r3
 8004308:	029b      	lsls	r3, r3, #10
 800430a:	b29b      	uxth	r3, r3
 800430c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004314:	b29b      	uxth	r3, r3
 8004316:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29c      	uxth	r4, r3
 8004326:	4623      	mov	r3, r4
 8004328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d014      	beq.n	800435a <USB_ActivateEndpoint+0x2a6>
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	b29c      	uxth	r4, r3
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <USB_ActivateEndpoint+0x2e8>)
 8004354:	4323      	orrs	r3, r4
 8004356:	b29b      	uxth	r3, r3
 8004358:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b29b      	uxth	r3, r3
 8004368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800436c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004370:	b29c      	uxth	r4, r3
 8004372:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004376:	b29c      	uxth	r4, r3
 8004378:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800437c:	b29c      	uxth	r4, r3
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	441a      	add	r2, r3
 8004388:	4b02      	ldr	r3, [pc, #8]	; (8004394 <USB_ActivateEndpoint+0x2e0>)
 800438a:	4323      	orrs	r3, r4
 800438c:	b29b      	uxth	r3, r3
 800438e:	8013      	strh	r3, [r2, #0]
 8004390:	e176      	b.n	8004680 <USB_ActivateEndpoint+0x5cc>
 8004392:	bf00      	nop
 8004394:	ffff8080 	.word	0xffff8080
 8004398:	ffff80c0 	.word	0xffff80c0
 800439c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	b29c      	uxth	r4, r3
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	441a      	add	r2, r3
 80043c2:	4b96      	ldr	r3, [pc, #600]	; (800461c <USB_ActivateEndpoint+0x568>)
 80043c4:	4323      	orrs	r3, r4
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80043ca:	687c      	ldr	r4, [r7, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	441c      	add	r4, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	4423      	add	r3, r4
 80043de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043e2:	461c      	mov	r4, r3
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	891b      	ldrh	r3, [r3, #8]
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	8023      	strh	r3, [r4, #0]
 80043f2:	687c      	ldr	r4, [r7, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	441c      	add	r4, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	4423      	add	r3, r4
 8004406:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800440a:	461c      	mov	r4, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	895b      	ldrh	r3, [r3, #10]
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	b29b      	uxth	r3, r3
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	b29b      	uxth	r3, r3
 8004418:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	785b      	ldrb	r3, [r3, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f040 8088 	bne.w	8004534 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29c      	uxth	r4, r3
 8004432:	4623      	mov	r3, r4
 8004434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d014      	beq.n	8004466 <USB_ActivateEndpoint+0x3b2>
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004452:	b29c      	uxth	r4, r3
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	441a      	add	r2, r3
 800445e:	4b70      	ldr	r3, [pc, #448]	; (8004620 <USB_ActivateEndpoint+0x56c>)
 8004460:	4323      	orrs	r3, r4
 8004462:	b29b      	uxth	r3, r3
 8004464:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29c      	uxth	r4, r3
 8004474:	4623      	mov	r3, r4
 8004476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d014      	beq.n	80044a8 <USB_ActivateEndpoint+0x3f4>
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29b      	uxth	r3, r3
 800448c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004494:	b29c      	uxth	r4, r3
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	441a      	add	r2, r3
 80044a0:	4b60      	ldr	r3, [pc, #384]	; (8004624 <USB_ActivateEndpoint+0x570>)
 80044a2:	4323      	orrs	r3, r4
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	b29c      	uxth	r4, r3
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	441a      	add	r2, r3
 80044ca:	4b56      	ldr	r3, [pc, #344]	; (8004624 <USB_ActivateEndpoint+0x570>)
 80044cc:	4323      	orrs	r3, r4
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e8:	b29c      	uxth	r4, r3
 80044ea:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80044ee:	b29c      	uxth	r4, r3
 80044f0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80044f4:	b29c      	uxth	r4, r3
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	4b49      	ldr	r3, [pc, #292]	; (8004628 <USB_ActivateEndpoint+0x574>)
 8004502:	4323      	orrs	r3, r4
 8004504:	b29b      	uxth	r3, r3
 8004506:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800451e:	b29c      	uxth	r4, r3
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	4b3f      	ldr	r3, [pc, #252]	; (8004628 <USB_ActivateEndpoint+0x574>)
 800452c:	4323      	orrs	r3, r4
 800452e:	b29b      	uxth	r3, r3
 8004530:	8013      	strh	r3, [r2, #0]
 8004532:	e0a5      	b.n	8004680 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29c      	uxth	r4, r3
 8004542:	4623      	mov	r3, r4
 8004544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d014      	beq.n	8004576 <USB_ActivateEndpoint+0x4c2>
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	b29c      	uxth	r4, r3
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	441a      	add	r2, r3
 800456e:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <USB_ActivateEndpoint+0x56c>)
 8004570:	4323      	orrs	r3, r4
 8004572:	b29b      	uxth	r3, r3
 8004574:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29c      	uxth	r4, r3
 8004584:	4623      	mov	r3, r4
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d014      	beq.n	80045b8 <USB_ActivateEndpoint+0x504>
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a4:	b29c      	uxth	r4, r3
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <USB_ActivateEndpoint+0x570>)
 80045b2:	4323      	orrs	r3, r4
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	b29c      	uxth	r4, r3
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	441a      	add	r2, r3
 80045da:	4b11      	ldr	r3, [pc, #68]	; (8004620 <USB_ActivateEndpoint+0x56c>)
 80045dc:	4323      	orrs	r3, r4
 80045de:	b29b      	uxth	r3, r3
 80045e0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	78db      	ldrb	r3, [r3, #3]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d020      	beq.n	800462c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004600:	b29c      	uxth	r4, r3
 8004602:	f084 0320 	eor.w	r3, r4, #32
 8004606:	b29c      	uxth	r4, r3
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	441a      	add	r2, r3
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <USB_ActivateEndpoint+0x574>)
 8004614:	4323      	orrs	r3, r4
 8004616:	b29b      	uxth	r3, r3
 8004618:	8013      	strh	r3, [r2, #0]
 800461a:	e01c      	b.n	8004656 <USB_ActivateEndpoint+0x5a2>
 800461c:	ffff8180 	.word	0xffff8180
 8004620:	ffffc080 	.word	0xffffc080
 8004624:	ffff80c0 	.word	0xffff80c0
 8004628:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004642:	b29c      	uxth	r4, r3
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	4b0f      	ldr	r3, [pc, #60]	; (800468c <USB_ActivateEndpoint+0x5d8>)
 8004650:	4323      	orrs	r3, r4
 8004652:	b29b      	uxth	r3, r3
 8004654:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466c:	b29c      	uxth	r4, r3
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	441a      	add	r2, r3
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <USB_ActivateEndpoint+0x5d8>)
 800467a:	4323      	orrs	r3, r4
 800467c:	b29b      	uxth	r3, r3
 800467e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bc90      	pop	{r4, r7}
 800468a:	4770      	bx	lr
 800468c:	ffff8080 	.word	0xffff8080

08004690 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004690:	b490      	push	{r4, r7}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	7b1b      	ldrb	r3, [r3, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d171      	bne.n	8004786 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d036      	beq.n	8004718 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29c      	uxth	r4, r3
 80046b8:	4623      	mov	r3, r4
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d014      	beq.n	80046ec <USB_DeactivateEndpoint+0x5c>
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d8:	b29c      	uxth	r4, r3
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	441a      	add	r2, r3
 80046e4:	4b6b      	ldr	r3, [pc, #428]	; (8004894 <USB_DeactivateEndpoint+0x204>)
 80046e6:	4323      	orrs	r3, r4
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004702:	b29c      	uxth	r4, r3
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	441a      	add	r2, r3
 800470e:	4b62      	ldr	r3, [pc, #392]	; (8004898 <USB_DeactivateEndpoint+0x208>)
 8004710:	4323      	orrs	r3, r4
 8004712:	b29b      	uxth	r3, r3
 8004714:	8013      	strh	r3, [r2, #0]
 8004716:	e144      	b.n	80049a2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29c      	uxth	r4, r3
 8004726:	4623      	mov	r3, r4
 8004728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d014      	beq.n	800475a <USB_DeactivateEndpoint+0xca>
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b29b      	uxth	r3, r3
 800473e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004746:	b29c      	uxth	r4, r3
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	441a      	add	r2, r3
 8004752:	4b52      	ldr	r3, [pc, #328]	; (800489c <USB_DeactivateEndpoint+0x20c>)
 8004754:	4323      	orrs	r3, r4
 8004756:	b29b      	uxth	r3, r3
 8004758:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800476c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004770:	b29c      	uxth	r4, r3
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	441a      	add	r2, r3
 800477c:	4b46      	ldr	r3, [pc, #280]	; (8004898 <USB_DeactivateEndpoint+0x208>)
 800477e:	4323      	orrs	r3, r4
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]
 8004784:	e10d      	b.n	80049a2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f040 8088 	bne.w	80048a0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29c      	uxth	r4, r3
 800479e:	4623      	mov	r3, r4
 80047a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d014      	beq.n	80047d2 <USB_DeactivateEndpoint+0x142>
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	b29c      	uxth	r4, r3
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	4b34      	ldr	r3, [pc, #208]	; (800489c <USB_DeactivateEndpoint+0x20c>)
 80047cc:	4323      	orrs	r3, r4
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29c      	uxth	r4, r3
 80047e0:	4623      	mov	r3, r4
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d014      	beq.n	8004814 <USB_DeactivateEndpoint+0x184>
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004800:	b29c      	uxth	r4, r3
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	441a      	add	r2, r3
 800480c:	4b21      	ldr	r3, [pc, #132]	; (8004894 <USB_DeactivateEndpoint+0x204>)
 800480e:	4323      	orrs	r3, r4
 8004810:	b29b      	uxth	r3, r3
 8004812:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b29b      	uxth	r3, r3
 8004822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482a:	b29c      	uxth	r4, r3
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	441a      	add	r2, r3
 8004836:	4b17      	ldr	r3, [pc, #92]	; (8004894 <USB_DeactivateEndpoint+0x204>)
 8004838:	4323      	orrs	r3, r4
 800483a:	b29b      	uxth	r3, r3
 800483c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004854:	b29c      	uxth	r4, r3
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	441a      	add	r2, r3
 8004860:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <USB_DeactivateEndpoint+0x208>)
 8004862:	4323      	orrs	r3, r4
 8004864:	b29b      	uxth	r3, r3
 8004866:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800487e:	b29c      	uxth	r4, r3
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	441a      	add	r2, r3
 800488a:	4b03      	ldr	r3, [pc, #12]	; (8004898 <USB_DeactivateEndpoint+0x208>)
 800488c:	4323      	orrs	r3, r4
 800488e:	b29b      	uxth	r3, r3
 8004890:	8013      	strh	r3, [r2, #0]
 8004892:	e086      	b.n	80049a2 <USB_DeactivateEndpoint+0x312>
 8004894:	ffff80c0 	.word	0xffff80c0
 8004898:	ffff8080 	.word	0xffff8080
 800489c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29c      	uxth	r4, r3
 80048ae:	4623      	mov	r3, r4
 80048b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d014      	beq.n	80048e2 <USB_DeactivateEndpoint+0x252>
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	b29c      	uxth	r4, r3
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	441a      	add	r2, r3
 80048da:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <USB_DeactivateEndpoint+0x320>)
 80048dc:	4323      	orrs	r3, r4
 80048de:	b29b      	uxth	r3, r3
 80048e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29c      	uxth	r4, r3
 80048f0:	4623      	mov	r3, r4
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d014      	beq.n	8004924 <USB_DeactivateEndpoint+0x294>
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004910:	b29c      	uxth	r4, r3
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	441a      	add	r2, r3
 800491c:	4b25      	ldr	r3, [pc, #148]	; (80049b4 <USB_DeactivateEndpoint+0x324>)
 800491e:	4323      	orrs	r3, r4
 8004920:	b29b      	uxth	r3, r3
 8004922:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	b29c      	uxth	r4, r3
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	441a      	add	r2, r3
 8004946:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <USB_DeactivateEndpoint+0x320>)
 8004948:	4323      	orrs	r3, r4
 800494a:	b29b      	uxth	r3, r3
 800494c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004964:	b29c      	uxth	r4, r3
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	441a      	add	r2, r3
 8004970:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <USB_DeactivateEndpoint+0x328>)
 8004972:	4323      	orrs	r3, r4
 8004974:	b29b      	uxth	r3, r3
 8004976:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29b      	uxth	r3, r3
 8004986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	b29c      	uxth	r4, r3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <USB_DeactivateEndpoint+0x328>)
 800499c:	4323      	orrs	r3, r4
 800499e:	b29b      	uxth	r3, r3
 80049a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc90      	pop	{r4, r7}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	ffffc080 	.word	0xffffc080
 80049b4:	ffff80c0 	.word	0xffff80c0
 80049b8:	ffff8080 	.word	0xffff8080

080049bc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b08d      	sub	sp, #52	; 0x34
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	785b      	ldrb	r3, [r3, #1]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	f040 8160 	bne.w	8004c90 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699a      	ldr	r2, [r3, #24]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d909      	bls.n	80049f0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	1ad2      	subs	r2, r2, r3
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	619a      	str	r2, [r3, #24]
 80049ee:	e005      	b.n	80049fc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2200      	movs	r2, #0
 80049fa:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	7b1b      	ldrb	r3, [r3, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d119      	bne.n	8004a38 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	6959      	ldr	r1, [r3, #20]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	88da      	ldrh	r2, [r3, #6]
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fba2 	bl	800515a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a16:	687c      	ldr	r4, [r7, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	441c      	add	r4, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	4423      	add	r3, r4
 8004a2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a2e:	461c      	mov	r4, r3
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	8023      	strh	r3, [r4, #0]
 8004a36:	e10f      	b.n	8004c58 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d065      	beq.n	8004b1a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a4e:	687c      	ldr	r4, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	785b      	ldrb	r3, [r3, #1]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d148      	bne.n	8004aea <USB_EPStartXfer+0x12e>
 8004a58:	687c      	ldr	r4, [r7, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	441c      	add	r4, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	4423      	add	r3, r4
 8004a6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a70:	461c      	mov	r4, r3
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10e      	bne.n	8004a96 <USB_EPStartXfer+0xda>
 8004a78:	8823      	ldrh	r3, [r4, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	8023      	strh	r3, [r4, #0]
 8004a84:	8823      	ldrh	r3, [r4, #0]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	8023      	strh	r3, [r4, #0]
 8004a94:	e03d      	b.n	8004b12 <USB_EPStartXfer+0x156>
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	2b3e      	cmp	r3, #62	; 0x3e
 8004a9a:	d810      	bhi.n	8004abe <USB_EPStartXfer+0x102>
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <USB_EPStartXfer+0xf6>
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	3301      	adds	r3, #1
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	029b      	lsls	r3, r3, #10
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	8023      	strh	r3, [r4, #0]
 8004abc:	e029      	b.n	8004b12 <USB_EPStartXfer+0x156>
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <USB_EPStartXfer+0x118>
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	029b      	lsls	r3, r3, #10
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8023      	strh	r3, [r4, #0]
 8004ae8:	e013      	b.n	8004b12 <USB_EPStartXfer+0x156>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	785b      	ldrb	r3, [r3, #1]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d10f      	bne.n	8004b12 <USB_EPStartXfer+0x156>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	441c      	add	r4, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	4423      	add	r3, r4
 8004b04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	895b      	ldrh	r3, [r3, #10]
 8004b16:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b18:	e063      	b.n	8004be2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	785b      	ldrb	r3, [r3, #1]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d148      	bne.n	8004bb4 <USB_EPStartXfer+0x1f8>
 8004b22:	687c      	ldr	r4, [r7, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	441c      	add	r4, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	4423      	add	r3, r4
 8004b36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b3a:	461c      	mov	r4, r3
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10e      	bne.n	8004b60 <USB_EPStartXfer+0x1a4>
 8004b42:	8823      	ldrh	r3, [r4, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	8023      	strh	r3, [r4, #0]
 8004b4e:	8823      	ldrh	r3, [r4, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	8023      	strh	r3, [r4, #0]
 8004b5e:	e03d      	b.n	8004bdc <USB_EPStartXfer+0x220>
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	2b3e      	cmp	r3, #62	; 0x3e
 8004b64:	d810      	bhi.n	8004b88 <USB_EPStartXfer+0x1cc>
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	085b      	lsrs	r3, r3, #1
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <USB_EPStartXfer+0x1c0>
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	623b      	str	r3, [r7, #32]
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	029b      	lsls	r3, r3, #10
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	8023      	strh	r3, [r4, #0]
 8004b86:	e029      	b.n	8004bdc <USB_EPStartXfer+0x220>
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	623b      	str	r3, [r7, #32]
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <USB_EPStartXfer+0x1e2>
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	623b      	str	r3, [r7, #32]
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	029b      	lsls	r3, r3, #10
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	8023      	strh	r3, [r4, #0]
 8004bb2:	e013      	b.n	8004bdc <USB_EPStartXfer+0x220>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d10f      	bne.n	8004bdc <USB_EPStartXfer+0x220>
 8004bbc:	687c      	ldr	r4, [r7, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	441c      	add	r4, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	4423      	add	r3, r4
 8004bd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bd4:	461c      	mov	r4, r3
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	891b      	ldrh	r3, [r3, #8]
 8004be0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6959      	ldr	r1, [r3, #20]
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fab4 	bl	800515a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d115      	bne.n	8004c26 <USB_EPStartXfer+0x26a>
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c10:	b29c      	uxth	r4, r3
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	4b9a      	ldr	r3, [pc, #616]	; (8004e88 <USB_EPStartXfer+0x4cc>)
 8004c1e:	4323      	orrs	r3, r4
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	8013      	strh	r3, [r2, #0]
 8004c24:	e018      	b.n	8004c58 <USB_EPStartXfer+0x29c>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d114      	bne.n	8004c58 <USB_EPStartXfer+0x29c>
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c44:	b29c      	uxth	r4, r3
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	441a      	add	r2, r3
 8004c50:	4b8e      	ldr	r3, [pc, #568]	; (8004e8c <USB_EPStartXfer+0x4d0>)
 8004c52:	4323      	orrs	r3, r4
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6e:	b29c      	uxth	r4, r3
 8004c70:	f084 0310 	eor.w	r3, r4, #16
 8004c74:	b29c      	uxth	r4, r3
 8004c76:	f084 0320 	eor.w	r3, r4, #32
 8004c7a:	b29c      	uxth	r4, r3
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	441a      	add	r2, r3
 8004c86:	4b82      	ldr	r3, [pc, #520]	; (8004e90 <USB_EPStartXfer+0x4d4>)
 8004c88:	4323      	orrs	r3, r4
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	8013      	strh	r3, [r2, #0]
 8004c8e:	e146      	b.n	8004f1e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	699a      	ldr	r2, [r3, #24]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d909      	bls.n	8004cb0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	1ad2      	subs	r2, r2, r3
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	619a      	str	r2, [r3, #24]
 8004cae:	e005      	b.n	8004cbc <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	7b1b      	ldrb	r3, [r3, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d148      	bne.n	8004d56 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004cc4:	687c      	ldr	r4, [r7, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	441c      	add	r4, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	4423      	add	r3, r4
 8004cd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cdc:	461c      	mov	r4, r3
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10e      	bne.n	8004d02 <USB_EPStartXfer+0x346>
 8004ce4:	8823      	ldrh	r3, [r4, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	8023      	strh	r3, [r4, #0]
 8004cf0:	8823      	ldrh	r3, [r4, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	8023      	strh	r3, [r4, #0]
 8004d00:	e0f2      	b.n	8004ee8 <USB_EPStartXfer+0x52c>
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	2b3e      	cmp	r3, #62	; 0x3e
 8004d06:	d810      	bhi.n	8004d2a <USB_EPStartXfer+0x36e>
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <USB_EPStartXfer+0x362>
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	029b      	lsls	r3, r3, #10
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8023      	strh	r3, [r4, #0]
 8004d28:	e0de      	b.n	8004ee8 <USB_EPStartXfer+0x52c>
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <USB_EPStartXfer+0x384>
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	029b      	lsls	r3, r3, #10
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	8023      	strh	r3, [r4, #0]
 8004d54:	e0c8      	b.n	8004ee8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d148      	bne.n	8004df0 <USB_EPStartXfer+0x434>
 8004d5e:	687c      	ldr	r4, [r7, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	441c      	add	r4, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	4423      	add	r3, r4
 8004d72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d76:	461c      	mov	r4, r3
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10e      	bne.n	8004d9c <USB_EPStartXfer+0x3e0>
 8004d7e:	8823      	ldrh	r3, [r4, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	8023      	strh	r3, [r4, #0]
 8004d8a:	8823      	ldrh	r3, [r4, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	8023      	strh	r3, [r4, #0]
 8004d9a:	e03d      	b.n	8004e18 <USB_EPStartXfer+0x45c>
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8004da0:	d810      	bhi.n	8004dc4 <USB_EPStartXfer+0x408>
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <USB_EPStartXfer+0x3fc>
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	3301      	adds	r3, #1
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	029b      	lsls	r3, r3, #10
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	8023      	strh	r3, [r4, #0]
 8004dc2:	e029      	b.n	8004e18 <USB_EPStartXfer+0x45c>
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <USB_EPStartXfer+0x41e>
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	029b      	lsls	r3, r3, #10
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	8023      	strh	r3, [r4, #0]
 8004dee:	e013      	b.n	8004e18 <USB_EPStartXfer+0x45c>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d10f      	bne.n	8004e18 <USB_EPStartXfer+0x45c>
 8004df8:	687c      	ldr	r4, [r7, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	441c      	add	r4, r3
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	4423      	add	r3, r4
 8004e0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e10:	461c      	mov	r4, r3
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	8023      	strh	r3, [r4, #0]
 8004e18:	687c      	ldr	r4, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d14e      	bne.n	8004ec0 <USB_EPStartXfer+0x504>
 8004e22:	687c      	ldr	r4, [r7, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	441c      	add	r4, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	4423      	add	r3, r4
 8004e36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e3a:	461c      	mov	r4, r3
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10e      	bne.n	8004e60 <USB_EPStartXfer+0x4a4>
 8004e42:	8823      	ldrh	r3, [r4, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	8023      	strh	r3, [r4, #0]
 8004e4e:	8823      	ldrh	r3, [r4, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8023      	strh	r3, [r4, #0]
 8004e5e:	e043      	b.n	8004ee8 <USB_EPStartXfer+0x52c>
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	2b3e      	cmp	r3, #62	; 0x3e
 8004e64:	d816      	bhi.n	8004e94 <USB_EPStartXfer+0x4d8>
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	085b      	lsrs	r3, r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <USB_EPStartXfer+0x4c0>
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	029b      	lsls	r3, r3, #10
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	8023      	strh	r3, [r4, #0]
 8004e86:	e02f      	b.n	8004ee8 <USB_EPStartXfer+0x52c>
 8004e88:	ffff80c0 	.word	0xffff80c0
 8004e8c:	ffffc080 	.word	0xffffc080
 8004e90:	ffff8080 	.word	0xffff8080
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d102      	bne.n	8004eaa <USB_EPStartXfer+0x4ee>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	029b      	lsls	r3, r3, #10
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	8023      	strh	r3, [r4, #0]
 8004ebe:	e013      	b.n	8004ee8 <USB_EPStartXfer+0x52c>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d10f      	bne.n	8004ee8 <USB_EPStartXfer+0x52c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	441c      	add	r4, r3
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	4423      	add	r3, r4
 8004eda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	b29c      	uxth	r4, r3
 8004f00:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f04:	b29c      	uxth	r4, r3
 8004f06:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004f0a:	b29c      	uxth	r4, r3
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	441a      	add	r2, r3
 8004f16:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <USB_EPStartXfer+0x56c>)
 8004f18:	4323      	orrs	r3, r4
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3734      	adds	r7, #52	; 0x34
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd90      	pop	{r4, r7, pc}
 8004f28:	ffff8080 	.word	0xffff8080

08004f2c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f2c:	b490      	push	{r4, r7}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	785b      	ldrb	r3, [r3, #1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d018      	beq.n	8004f70 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f54:	b29c      	uxth	r4, r3
 8004f56:	f084 0310 	eor.w	r3, r4, #16
 8004f5a:	b29c      	uxth	r4, r3
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	4b11      	ldr	r3, [pc, #68]	; (8004fac <USB_EPSetStall+0x80>)
 8004f68:	4323      	orrs	r3, r4
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	8013      	strh	r3, [r2, #0]
 8004f6e:	e017      	b.n	8004fa0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	b29c      	uxth	r4, r3
 8004f88:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f8c:	b29c      	uxth	r4, r3
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	441a      	add	r2, r3
 8004f98:	4b04      	ldr	r3, [pc, #16]	; (8004fac <USB_EPSetStall+0x80>)
 8004f9a:	4323      	orrs	r3, r4
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc90      	pop	{r4, r7}
 8004faa:	4770      	bx	lr
 8004fac:	ffff8080 	.word	0xffff8080

08004fb0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fb0:	b490      	push	{r4, r7}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	7b1b      	ldrb	r3, [r3, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d17d      	bne.n	80050be <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	785b      	ldrb	r3, [r3, #1]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d03d      	beq.n	8005046 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29c      	uxth	r4, r3
 8004fd8:	4623      	mov	r3, r4
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d014      	beq.n	800500c <USB_EPClearStall+0x5c>
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff8:	b29c      	uxth	r4, r3
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	441a      	add	r2, r3
 8005004:	4b31      	ldr	r3, [pc, #196]	; (80050cc <USB_EPClearStall+0x11c>)
 8005006:	4323      	orrs	r3, r4
 8005008:	b29b      	uxth	r3, r3
 800500a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	78db      	ldrb	r3, [r3, #3]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d054      	beq.n	80050be <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502a:	b29c      	uxth	r4, r3
 800502c:	f084 0320 	eor.w	r3, r4, #32
 8005030:	b29c      	uxth	r4, r3
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	441a      	add	r2, r3
 800503c:	4b24      	ldr	r3, [pc, #144]	; (80050d0 <USB_EPClearStall+0x120>)
 800503e:	4323      	orrs	r3, r4
 8005040:	b29b      	uxth	r3, r3
 8005042:	8013      	strh	r3, [r2, #0]
 8005044:	e03b      	b.n	80050be <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29c      	uxth	r4, r3
 8005054:	4623      	mov	r3, r4
 8005056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d014      	beq.n	8005088 <USB_EPClearStall+0xd8>
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005074:	b29c      	uxth	r4, r3
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	441a      	add	r2, r3
 8005080:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <USB_EPClearStall+0x124>)
 8005082:	4323      	orrs	r3, r4
 8005084:	b29b      	uxth	r3, r3
 8005086:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	b29c      	uxth	r4, r3
 80050a0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80050a4:	b29c      	uxth	r4, r3
 80050a6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80050aa:	b29c      	uxth	r4, r3
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	441a      	add	r2, r3
 80050b6:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <USB_EPClearStall+0x120>)
 80050b8:	4323      	orrs	r3, r4
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc90      	pop	{r4, r7}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	ffff80c0 	.word	0xffff80c0
 80050d0:	ffff8080 	.word	0xffff8080
 80050d4:	ffffc080 	.word	0xffffc080

080050d8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d103      	bne.n	80050f2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2280      	movs	r2, #128	; 0x80
 80050ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr

080050fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr

08005126 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005134:	b29b      	uxth	r3, r3
 8005136:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005138:	68fb      	ldr	r3, [r7, #12]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr

0800515a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800515a:	b480      	push	{r7}
 800515c:	b08d      	sub	sp, #52	; 0x34
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	4611      	mov	r1, r2
 8005166:	461a      	mov	r2, r3
 8005168:	460b      	mov	r3, r1
 800516a:	80fb      	strh	r3, [r7, #6]
 800516c:	4613      	mov	r3, r2
 800516e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005170:	88bb      	ldrh	r3, [r7, #4]
 8005172:	3301      	adds	r3, #1
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	005a      	lsls	r2, r3, #1
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005192:	e01e      	b.n	80051d2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	3301      	adds	r3, #1
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	3302      	adds	r3, #2
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	3302      	adds	r3, #2
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	3301      	adds	r3, #1
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ce:	3b01      	subs	r3, #1
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1dd      	bne.n	8005194 <USB_WritePMA+0x3a>
  }
}
 80051d8:	bf00      	nop
 80051da:	3734      	adds	r7, #52	; 0x34
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr

080051e2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b08b      	sub	sp, #44	; 0x2c
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	4611      	mov	r1, r2
 80051ee:	461a      	mov	r2, r3
 80051f0:	460b      	mov	r3, r1
 80051f2:	80fb      	strh	r3, [r7, #6]
 80051f4:	4613      	mov	r3, r2
 80051f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80051f8:	88bb      	ldrh	r3, [r7, #4]
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	005a      	lsls	r2, r3, #1
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005214:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
 800521a:	e01b      	b.n	8005254 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	3302      	adds	r3, #2
 8005228:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	b2da      	uxtb	r2, r3
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3301      	adds	r3, #1
 8005236:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	0a1b      	lsrs	r3, r3, #8
 800523c:	b2da      	uxtb	r2, r3
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3301      	adds	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	3302      	adds	r3, #2
 800524c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	3b01      	subs	r3, #1
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e0      	bne.n	800521c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800525a:	88bb      	ldrh	r3, [r7, #4]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	b29b      	uxth	r3, r3
 800526c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	b2da      	uxtb	r2, r3
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	701a      	strb	r2, [r3, #0]
  }
}
 8005276:	bf00      	nop
 8005278:	372c      	adds	r7, #44	; 0x2c
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800528c:	2304      	movs	r3, #4
 800528e:	2203      	movs	r2, #3
 8005290:	2181      	movs	r1, #129	; 0x81
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f001 fc4d 	bl	8006b32 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800529e:	2010      	movs	r0, #16
 80052a0:	f001 fd54 	bl	8006d4c <USBD_static_malloc>
 80052a4:	4602      	mov	r2, r0
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80052b6:	2302      	movs	r3, #2
 80052b8:	e005      	b.n	80052c6 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c0:	2200      	movs	r2, #0
 80052c2:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80052da:	2181      	movs	r1, #129	; 0x81
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 fc4e 	bl	8006b7e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 fd33 	bl	8006d64 <USBD_static_free>
    pdev->pClassData = NULL;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005320:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800533a:	2b00      	cmp	r3, #0
 800533c:	d045      	beq.n	80053ca <USBD_HID_Setup+0xba>
 800533e:	2b20      	cmp	r3, #32
 8005340:	f040 80d3 	bne.w	80054ea <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	3b02      	subs	r3, #2
 800534a:	2b09      	cmp	r3, #9
 800534c:	d835      	bhi.n	80053ba <USBD_HID_Setup+0xaa>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <USBD_HID_Setup+0x44>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	080053ab 	.word	0x080053ab
 8005358:	0800538b 	.word	0x0800538b
 800535c:	080053bb 	.word	0x080053bb
 8005360:	080053bb 	.word	0x080053bb
 8005364:	080053bb 	.word	0x080053bb
 8005368:	080053bb 	.word	0x080053bb
 800536c:	080053bb 	.word	0x080053bb
 8005370:	080053bb 	.word	0x080053bb
 8005374:	08005399 	.word	0x08005399
 8005378:	0800537d 	.word	0x0800537d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	885b      	ldrh	r3, [r3, #2]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	601a      	str	r2, [r3, #0]
          break;
 8005388:	e01e      	b.n	80053c8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2201      	movs	r2, #1
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f001 f915 	bl	80065c0 <USBD_CtlSendData>
          break;
 8005396:	e017      	b.n	80053c8 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	885b      	ldrh	r3, [r3, #2]
 800539c:	0a1b      	lsrs	r3, r3, #8
 800539e:	b29b      	uxth	r3, r3
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]
          break;
 80053a8:	e00e      	b.n	80053c8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	3304      	adds	r3, #4
 80053ae:	2201      	movs	r2, #1
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f001 f904 	bl	80065c0 <USBD_CtlSendData>
          break;
 80053b8:	e006      	b.n	80053c8 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f001 f895 	bl	80064ec <USBD_CtlError>
          ret = USBD_FAIL;
 80053c2:	2302      	movs	r3, #2
 80053c4:	75fb      	strb	r3, [r7, #23]
          break;
 80053c6:	bf00      	nop
      }
      break;
 80053c8:	e096      	b.n	80054f8 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	785b      	ldrb	r3, [r3, #1]
 80053ce:	2b0b      	cmp	r3, #11
 80053d0:	f200 8083 	bhi.w	80054da <USBD_HID_Setup+0x1ca>
 80053d4:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <USBD_HID_Setup+0xcc>)
 80053d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053da:	bf00      	nop
 80053dc:	0800540d 	.word	0x0800540d
 80053e0:	080054db 	.word	0x080054db
 80053e4:	080054db 	.word	0x080054db
 80053e8:	080054db 	.word	0x080054db
 80053ec:	080054db 	.word	0x080054db
 80053f0:	080054db 	.word	0x080054db
 80053f4:	08005435 	.word	0x08005435
 80053f8:	080054db 	.word	0x080054db
 80053fc:	080054db 	.word	0x080054db
 8005400:	080054db 	.word	0x080054db
 8005404:	0800548d 	.word	0x0800548d
 8005408:	080054b5 	.word	0x080054b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005412:	2b03      	cmp	r3, #3
 8005414:	d107      	bne.n	8005426 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005416:	f107 030e 	add.w	r3, r7, #14
 800541a:	2202      	movs	r2, #2
 800541c:	4619      	mov	r1, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f001 f8ce 	bl	80065c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005424:	e060      	b.n	80054e8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f001 f85f 	bl	80064ec <USBD_CtlError>
            ret = USBD_FAIL;
 800542e:	2302      	movs	r3, #2
 8005430:	75fb      	strb	r3, [r7, #23]
          break;
 8005432:	e059      	b.n	80054e8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	885b      	ldrh	r3, [r3, #2]
 8005438:	0a1b      	lsrs	r3, r3, #8
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b22      	cmp	r3, #34	; 0x22
 800543e:	d108      	bne.n	8005452 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	88db      	ldrh	r3, [r3, #6]
 8005444:	2b4a      	cmp	r3, #74	; 0x4a
 8005446:	bf28      	it	cs
 8005448:	234a      	movcs	r3, #74	; 0x4a
 800544a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800544c:	4b2d      	ldr	r3, [pc, #180]	; (8005504 <USBD_HID_Setup+0x1f4>)
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	e015      	b.n	800547e <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	885b      	ldrh	r3, [r3, #2]
 8005456:	0a1b      	lsrs	r3, r3, #8
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b21      	cmp	r3, #33	; 0x21
 800545c:	d108      	bne.n	8005470 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800545e:	4b2a      	ldr	r3, [pc, #168]	; (8005508 <USBD_HID_Setup+0x1f8>)
 8005460:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	88db      	ldrh	r3, [r3, #6]
 8005466:	2b09      	cmp	r3, #9
 8005468:	bf28      	it	cs
 800546a:	2309      	movcs	r3, #9
 800546c:	83fb      	strh	r3, [r7, #30]
 800546e:	e006      	b.n	800547e <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f001 f83a 	bl	80064ec <USBD_CtlError>
            ret = USBD_FAIL;
 8005478:	2302      	movs	r3, #2
 800547a:	75fb      	strb	r3, [r7, #23]
            break;
 800547c:	e034      	b.n	80054e8 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800547e:	8bfb      	ldrh	r3, [r7, #30]
 8005480:	461a      	mov	r2, r3
 8005482:	69b9      	ldr	r1, [r7, #24]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f001 f89b 	bl	80065c0 <USBD_CtlSendData>
          break;
 800548a:	e02d      	b.n	80054e8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005492:	2b03      	cmp	r3, #3
 8005494:	d107      	bne.n	80054a6 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3308      	adds	r3, #8
 800549a:	2201      	movs	r2, #1
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f001 f88e 	bl	80065c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054a4:	e020      	b.n	80054e8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f001 f81f 	bl	80064ec <USBD_CtlError>
            ret = USBD_FAIL;
 80054ae:	2302      	movs	r3, #2
 80054b0:	75fb      	strb	r3, [r7, #23]
          break;
 80054b2:	e019      	b.n	80054e8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d106      	bne.n	80054cc <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	885b      	ldrh	r3, [r3, #2]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054ca:	e00d      	b.n	80054e8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f001 f80c 	bl	80064ec <USBD_CtlError>
            ret = USBD_FAIL;
 80054d4:	2302      	movs	r3, #2
 80054d6:	75fb      	strb	r3, [r7, #23]
          break;
 80054d8:	e006      	b.n	80054e8 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 f805 	bl	80064ec <USBD_CtlError>
          ret = USBD_FAIL;
 80054e2:	2302      	movs	r3, #2
 80054e4:	75fb      	strb	r3, [r7, #23]
          break;
 80054e6:	bf00      	nop
      }
      break;
 80054e8:	e006      	b.n	80054f8 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80054ea:	6839      	ldr	r1, [r7, #0]
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fffd 	bl	80064ec <USBD_CtlError>
      ret = USBD_FAIL;
 80054f2:	2302      	movs	r3, #2
 80054f4:	75fb      	strb	r3, [r7, #23]
      break;
 80054f6:	bf00      	nop
  }

  return ret;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	200000c8 	.word	0x200000c8
 8005508:	200000b0 	.word	0x200000b0

0800550c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2222      	movs	r2, #34	; 0x22
 8005518:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800551a:	4b03      	ldr	r3, [pc, #12]	; (8005528 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	20000044 	.word	0x20000044

0800552c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2222      	movs	r2, #34	; 0x22
 8005538:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800553a:	4b03      	ldr	r3, [pc, #12]	; (8005548 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	20000068 	.word	0x20000068

0800554c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2222      	movs	r2, #34	; 0x22
 8005558:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800555a:	4b03      	ldr	r3, [pc, #12]	; (8005568 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	2000008c 	.word	0x2000008c

0800556c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800557e:	2200      	movs	r2, #0
 8005580:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr
	...

08005590 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	220a      	movs	r2, #10
 800559c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800559e:	4b03      	ldr	r3, [pc, #12]	; (80055ac <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	200000bc 	.word	0x200000bc

080055b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	4613      	mov	r3, r2
 80055bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80055c4:	2302      	movs	r3, #2
 80055c6:	e01a      	b.n	80055fe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	79fa      	ldrb	r2, [r7, #7]
 80055f4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f001 fa38 	bl	8006a6c <USBD_LL_Init>

  return USBD_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d006      	beq.n	8005628 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	73fb      	strb	r3, [r7, #15]
 8005626:	e001      	b.n	800562c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005628:	2302      	movs	r3, #2
 800562a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 fa5b 	bl	8006afc <USBD_LL_Start>

  return USBD_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005670:	2302      	movs	r3, #2
 8005672:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00c      	beq.n	8005698 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	78fa      	ldrb	r2, [r7, #3]
 8005688:	4611      	mov	r1, r2
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	4798      	blx	r3
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b082      	sub	sp, #8
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	4611      	mov	r1, r2
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3

  return USBD_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 feca 	bl	8006474 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80056ee:	461a      	mov	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056fc:	f003 031f 	and.w	r3, r3, #31
 8005700:	2b01      	cmp	r3, #1
 8005702:	d00c      	beq.n	800571e <USBD_LL_SetupStage+0x56>
 8005704:	2b01      	cmp	r3, #1
 8005706:	d302      	bcc.n	800570e <USBD_LL_SetupStage+0x46>
 8005708:	2b02      	cmp	r3, #2
 800570a:	d010      	beq.n	800572e <USBD_LL_SetupStage+0x66>
 800570c:	e017      	b.n	800573e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f9ca 	bl	8005ab0 <USBD_StdDevReq>
      break;
 800571c:	e01a      	b.n	8005754 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fa2c 	bl	8005b84 <USBD_StdItfReq>
      break;
 800572c:	e012      	b.n	8005754 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa6a 	bl	8005c10 <USBD_StdEPReq>
      break;
 800573c:	e00a      	b.n	8005754 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005744:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005748:	b2db      	uxtb	r3, r3
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f001 fa35 	bl	8006bbc <USBD_LL_StallEP>
      break;
 8005752:	bf00      	nop
  }

  return USBD_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b086      	sub	sp, #24
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	460b      	mov	r3, r1
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800576c:	7afb      	ldrb	r3, [r7, #11]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d14b      	bne.n	800580a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005778:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005780:	2b03      	cmp	r3, #3
 8005782:	d134      	bne.n	80057ee <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	429a      	cmp	r2, r3
 800578e:	d919      	bls.n	80057c4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	1ad2      	subs	r2, r2, r3
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d203      	bcs.n	80057b2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	e002      	b.n	80057b8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 ff2d 	bl	800661c <USBD_CtlContinueRx>
 80057c2:	e038      	b.n	8005836 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d105      	bne.n	80057e6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 ff2a 	bl	8006640 <USBD_CtlSendStatus>
 80057ec:	e023      	b.n	8005836 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057f4:	2b05      	cmp	r3, #5
 80057f6:	d11e      	bne.n	8005836 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005800:	2100      	movs	r1, #0
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f001 f9da 	bl	8006bbc <USBD_LL_StallEP>
 8005808:	e015      	b.n	8005836 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00d      	beq.n	8005832 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800581c:	2b03      	cmp	r3, #3
 800581e:	d108      	bne.n	8005832 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	7afa      	ldrb	r2, [r7, #11]
 800582a:	4611      	mov	r1, r2
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	4798      	blx	r3
 8005830:	e001      	b.n	8005836 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005832:	2302      	movs	r3, #2
 8005834:	e000      	b.n	8005838 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	460b      	mov	r3, r1
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800584e:	7afb      	ldrb	r3, [r7, #11]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d17f      	bne.n	8005954 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3314      	adds	r3, #20
 8005858:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005860:	2b02      	cmp	r3, #2
 8005862:	d15c      	bne.n	800591e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	429a      	cmp	r2, r3
 800586e:	d915      	bls.n	800589c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	1ad2      	subs	r2, r2, r3
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	b29b      	uxth	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 feb5 	bl	80065f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800588e:	2300      	movs	r3, #0
 8005890:	2200      	movs	r2, #0
 8005892:	2100      	movs	r1, #0
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f001 fa36 	bl	8006d06 <USBD_LL_PrepareReceive>
 800589a:	e04e      	b.n	800593a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	6912      	ldr	r2, [r2, #16]
 80058a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80058a8:	fb02 f201 	mul.w	r2, r2, r1
 80058ac:	1a9b      	subs	r3, r3, r2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d11c      	bne.n	80058ec <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d316      	bcc.n	80058ec <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d20f      	bcs.n	80058ec <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058cc:	2200      	movs	r2, #0
 80058ce:	2100      	movs	r1, #0
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fe91 	bl	80065f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058de:	2300      	movs	r3, #0
 80058e0:	2200      	movs	r2, #0
 80058e2:	2100      	movs	r1, #0
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f001 fa0e 	bl	8006d06 <USBD_LL_PrepareReceive>
 80058ea:	e026      	b.n	800593a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00a      	beq.n	800590e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d105      	bne.n	800590e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800590e:	2180      	movs	r1, #128	; 0x80
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f001 f953 	bl	8006bbc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fea5 	bl	8006666 <USBD_CtlReceiveStatus>
 800591c:	e00d      	b.n	800593a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005924:	2b04      	cmp	r3, #4
 8005926:	d004      	beq.n	8005932 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800592e:	2b00      	cmp	r3, #0
 8005930:	d103      	bne.n	800593a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005932:	2180      	movs	r1, #128	; 0x80
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f001 f941 	bl	8006bbc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005940:	2b01      	cmp	r3, #1
 8005942:	d11d      	bne.n	8005980 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f7ff fe83 	bl	8005650 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005952:	e015      	b.n	8005980 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00d      	beq.n	800597c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005966:	2b03      	cmp	r3, #3
 8005968:	d108      	bne.n	800597c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	7afa      	ldrb	r2, [r7, #11]
 8005974:	4611      	mov	r1, r2
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	4798      	blx	r3
 800597a:	e001      	b.n	8005980 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800597c:	2302      	movs	r3, #2
 800597e:	e000      	b.n	8005982 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005992:	2340      	movs	r3, #64	; 0x40
 8005994:	2200      	movs	r2, #0
 8005996:	2100      	movs	r1, #0
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 f8ca 	bl	8006b32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2240      	movs	r2, #64	; 0x40
 80059aa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059ae:	2340      	movs	r3, #64	; 0x40
 80059b0:	2200      	movs	r2, #0
 80059b2:	2180      	movs	r1, #128	; 0x80
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 f8bc 	bl	8006b32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2240      	movs	r2, #64	; 0x40
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d009      	beq.n	8005a02 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6852      	ldr	r2, [r2, #4]
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	4611      	mov	r1, r2
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
  }

  return USBD_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	78fa      	ldrb	r2, [r7, #3]
 8005a1c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr

08005a2a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2204      	movs	r2, #4
 8005a42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr

08005a52 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d105      	bne.n	8005a70 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr

08005a7c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d10b      	bne.n	8005aa6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	d004      	beq.n	8005ad4 <USBD_StdDevReq+0x24>
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d002      	beq.n	8005ad4 <USBD_StdDevReq+0x24>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d008      	beq.n	8005ae4 <USBD_StdDevReq+0x34>
 8005ad2:	e04c      	b.n	8005b6e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	4798      	blx	r3
      break;
 8005ae2:	e049      	b.n	8005b78 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b09      	cmp	r3, #9
 8005aea:	d83a      	bhi.n	8005b62 <USBD_StdDevReq+0xb2>
 8005aec:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <USBD_StdDevReq+0x44>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b45 	.word	0x08005b45
 8005af8:	08005b59 	.word	0x08005b59
 8005afc:	08005b63 	.word	0x08005b63
 8005b00:	08005b4f 	.word	0x08005b4f
 8005b04:	08005b63 	.word	0x08005b63
 8005b08:	08005b27 	.word	0x08005b27
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005b63 	.word	0x08005b63
 8005b14:	08005b3b 	.word	0x08005b3b
 8005b18:	08005b31 	.word	0x08005b31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f9d4 	bl	8005ecc <USBD_GetDescriptor>
          break;
 8005b24:	e022      	b.n	8005b6c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fb37 	bl	800619c <USBD_SetAddress>
          break;
 8005b2e:	e01d      	b.n	8005b6c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fb74 	bl	8006220 <USBD_SetConfig>
          break;
 8005b38:	e018      	b.n	8005b6c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fbfd 	bl	800633c <USBD_GetConfig>
          break;
 8005b42:	e013      	b.n	8005b6c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fc2c 	bl	80063a4 <USBD_GetStatus>
          break;
 8005b4c:	e00e      	b.n	8005b6c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fc5a 	bl	800640a <USBD_SetFeature>
          break;
 8005b56:	e009      	b.n	8005b6c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fc69 	bl	8006432 <USBD_ClrFeature>
          break;
 8005b60:	e004      	b.n	8005b6c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fcc1 	bl	80064ec <USBD_CtlError>
          break;
 8005b6a:	bf00      	nop
      }
      break;
 8005b6c:	e004      	b.n	8005b78 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fcbb 	bl	80064ec <USBD_CtlError>
      break;
 8005b76:	bf00      	nop
  }

  return ret;
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop

08005b84 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d003      	beq.n	8005ba6 <USBD_StdItfReq+0x22>
 8005b9e:	2b40      	cmp	r3, #64	; 0x40
 8005ba0:	d001      	beq.n	8005ba6 <USBD_StdItfReq+0x22>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d12a      	bne.n	8005bfc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bac:	3b01      	subs	r3, #1
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d81d      	bhi.n	8005bee <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	889b      	ldrh	r3, [r3, #4]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d813      	bhi.n	8005be4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
 8005bca:	4603      	mov	r3, r0
 8005bcc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	88db      	ldrh	r3, [r3, #6]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d110      	bne.n	8005bf8 <USBD_StdItfReq+0x74>
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10d      	bne.n	8005bf8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fd2f 	bl	8006640 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005be2:	e009      	b.n	8005bf8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fc80 	bl	80064ec <USBD_CtlError>
          break;
 8005bec:	e004      	b.n	8005bf8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fc7b 	bl	80064ec <USBD_CtlError>
          break;
 8005bf6:	e000      	b.n	8005bfa <USBD_StdItfReq+0x76>
          break;
 8005bf8:	bf00      	nop
      }
      break;
 8005bfa:	e004      	b.n	8005c06 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fc74 	bl	80064ec <USBD_CtlError>
      break;
 8005c04:	bf00      	nop
  }

  return USBD_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	889b      	ldrh	r3, [r3, #4]
 8005c22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d004      	beq.n	8005c3a <USBD_StdEPReq+0x2a>
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d002      	beq.n	8005c3a <USBD_StdEPReq+0x2a>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <USBD_StdEPReq+0x3a>
 8005c38:	e13d      	b.n	8005eb6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	4798      	blx	r3
      break;
 8005c48:	e13a      	b.n	8005ec0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d10a      	bne.n	8005c6c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	4798      	blx	r3
 8005c64:	4603      	mov	r3, r0
 8005c66:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	e12a      	b.n	8005ec2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d03e      	beq.n	8005cf2 <USBD_StdEPReq+0xe2>
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d002      	beq.n	8005c7e <USBD_StdEPReq+0x6e>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d070      	beq.n	8005d5e <USBD_StdEPReq+0x14e>
 8005c7c:	e115      	b.n	8005eaa <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d002      	beq.n	8005c8e <USBD_StdEPReq+0x7e>
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d015      	beq.n	8005cb8 <USBD_StdEPReq+0xa8>
 8005c8c:	e02b      	b.n	8005ce6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c8e:	7bbb      	ldrb	r3, [r7, #14]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00c      	beq.n	8005cae <USBD_StdEPReq+0x9e>
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
 8005c96:	2b80      	cmp	r3, #128	; 0x80
 8005c98:	d009      	beq.n	8005cae <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005c9a:	7bbb      	ldrb	r3, [r7, #14]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 ff8c 	bl	8006bbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ca4:	2180      	movs	r1, #128	; 0x80
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 ff88 	bl	8006bbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005cac:	e020      	b.n	8005cf0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fc1b 	bl	80064ec <USBD_CtlError>
              break;
 8005cb6:	e01b      	b.n	8005cf0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	885b      	ldrh	r3, [r3, #2]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10e      	bne.n	8005cde <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005cc0:	7bbb      	ldrb	r3, [r7, #14]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00b      	beq.n	8005cde <USBD_StdEPReq+0xce>
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	2b80      	cmp	r3, #128	; 0x80
 8005cca:	d008      	beq.n	8005cde <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	88db      	ldrh	r3, [r3, #6]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d104      	bne.n	8005cde <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005cd4:	7bbb      	ldrb	r3, [r7, #14]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 ff6f 	bl	8006bbc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fcae 	bl	8006640 <USBD_CtlSendStatus>

              break;
 8005ce4:	e004      	b.n	8005cf0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fbff 	bl	80064ec <USBD_CtlError>
              break;
 8005cee:	bf00      	nop
          }
          break;
 8005cf0:	e0e0      	b.n	8005eb4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d002      	beq.n	8005d02 <USBD_StdEPReq+0xf2>
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d015      	beq.n	8005d2c <USBD_StdEPReq+0x11c>
 8005d00:	e026      	b.n	8005d50 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d02:	7bbb      	ldrb	r3, [r7, #14]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00c      	beq.n	8005d22 <USBD_StdEPReq+0x112>
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	2b80      	cmp	r3, #128	; 0x80
 8005d0c:	d009      	beq.n	8005d22 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005d0e:	7bbb      	ldrb	r3, [r7, #14]
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 ff52 	bl	8006bbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005d18:	2180      	movs	r1, #128	; 0x80
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 ff4e 	bl	8006bbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d20:	e01c      	b.n	8005d5c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fbe1 	bl	80064ec <USBD_CtlError>
              break;
 8005d2a:	e017      	b.n	8005d5c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	885b      	ldrh	r3, [r3, #2]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d112      	bne.n	8005d5a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005d34:	7bbb      	ldrb	r3, [r7, #14]
 8005d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005d3e:	7bbb      	ldrb	r3, [r7, #14]
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 ff59 	bl	8006bfa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fc79 	bl	8006640 <USBD_CtlSendStatus>
              }
              break;
 8005d4e:	e004      	b.n	8005d5a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fbca 	bl	80064ec <USBD_CtlError>
              break;
 8005d58:	e000      	b.n	8005d5c <USBD_StdEPReq+0x14c>
              break;
 8005d5a:	bf00      	nop
          }
          break;
 8005d5c:	e0aa      	b.n	8005eb4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d002      	beq.n	8005d6e <USBD_StdEPReq+0x15e>
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d032      	beq.n	8005dd2 <USBD_StdEPReq+0x1c2>
 8005d6c:	e097      	b.n	8005e9e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d6e:	7bbb      	ldrb	r3, [r7, #14]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <USBD_StdEPReq+0x174>
 8005d74:	7bbb      	ldrb	r3, [r7, #14]
 8005d76:	2b80      	cmp	r3, #128	; 0x80
 8005d78:	d004      	beq.n	8005d84 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fbb5 	bl	80064ec <USBD_CtlError>
                break;
 8005d82:	e091      	b.n	8005ea8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	da0b      	bge.n	8005da4 <USBD_StdEPReq+0x194>
 8005d8c:	7bbb      	ldrb	r3, [r7, #14]
 8005d8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	3310      	adds	r3, #16
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	4413      	add	r3, r2
 8005da0:	3304      	adds	r3, #4
 8005da2:	e00b      	b.n	8005dbc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005da4:	7bbb      	ldrb	r3, [r7, #14]
 8005da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	4413      	add	r3, r2
 8005dba:	3304      	adds	r3, #4
 8005dbc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fbf8 	bl	80065c0 <USBD_CtlSendData>
              break;
 8005dd0:	e06a      	b.n	8005ea8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005dd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	da11      	bge.n	8005dfe <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	f003 020f 	and.w	r2, r3, #15
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	3318      	adds	r3, #24
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d117      	bne.n	8005e24 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fb78 	bl	80064ec <USBD_CtlError>
                  break;
 8005dfc:	e054      	b.n	8005ea8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005dfe:	7bbb      	ldrb	r3, [r7, #14]
 8005e00:	f003 020f 	and.w	r2, r3, #15
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d104      	bne.n	8005e24 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fb65 	bl	80064ec <USBD_CtlError>
                  break;
 8005e22:	e041      	b.n	8005ea8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	da0b      	bge.n	8005e44 <USBD_StdEPReq+0x234>
 8005e2c:	7bbb      	ldrb	r3, [r7, #14]
 8005e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	3310      	adds	r3, #16
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4413      	add	r3, r2
 8005e40:	3304      	adds	r3, #4
 8005e42:	e00b      	b.n	8005e5c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e44:	7bbb      	ldrb	r3, [r7, #14]
 8005e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	4413      	add	r3, r2
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e5e:	7bbb      	ldrb	r3, [r7, #14]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <USBD_StdEPReq+0x25a>
 8005e64:	7bbb      	ldrb	r3, [r7, #14]
 8005e66:	2b80      	cmp	r3, #128	; 0x80
 8005e68:	d103      	bne.n	8005e72 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	e00e      	b.n	8005e90 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005e72:	7bbb      	ldrb	r3, [r7, #14]
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fede 	bl	8006c38 <USBD_LL_IsStallEP>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	e002      	b.n	8005e90 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2202      	movs	r2, #2
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fb92 	bl	80065c0 <USBD_CtlSendData>
              break;
 8005e9c:	e004      	b.n	8005ea8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fb23 	bl	80064ec <USBD_CtlError>
              break;
 8005ea6:	bf00      	nop
          }
          break;
 8005ea8:	e004      	b.n	8005eb4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fb1d 	bl	80064ec <USBD_CtlError>
          break;
 8005eb2:	bf00      	nop
      }
      break;
 8005eb4:	e004      	b.n	8005ec0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fb17 	bl	80064ec <USBD_CtlError>
      break;
 8005ebe:	bf00      	nop
  }

  return ret;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	885b      	ldrh	r3, [r3, #2]
 8005ee6:	0a1b      	lsrs	r3, r3, #8
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	2b06      	cmp	r3, #6
 8005eee:	f200 8128 	bhi.w	8006142 <USBD_GetDescriptor+0x276>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <USBD_GetDescriptor+0x2c>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f15 	.word	0x08005f15
 8005efc:	08005f2d 	.word	0x08005f2d
 8005f00:	08005f6d 	.word	0x08005f6d
 8005f04:	08006143 	.word	0x08006143
 8005f08:	08006143 	.word	0x08006143
 8005f0c:	080060e3 	.word	0x080060e3
 8005f10:	0800610f 	.word	0x0800610f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	7c12      	ldrb	r2, [r2, #16]
 8005f20:	f107 0108 	add.w	r1, r7, #8
 8005f24:	4610      	mov	r0, r2
 8005f26:	4798      	blx	r3
 8005f28:	60f8      	str	r0, [r7, #12]
      break;
 8005f2a:	e112      	b.n	8006152 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	7c1b      	ldrb	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10d      	bne.n	8005f50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	f107 0208 	add.w	r2, r7, #8
 8005f40:	4610      	mov	r0, r2
 8005f42:	4798      	blx	r3
 8005f44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f4e:	e100      	b.n	8006152 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	f107 0208 	add.w	r2, r7, #8
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4798      	blx	r3
 8005f60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3301      	adds	r3, #1
 8005f66:	2202      	movs	r2, #2
 8005f68:	701a      	strb	r2, [r3, #0]
      break;
 8005f6a:	e0f2      	b.n	8006152 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	885b      	ldrh	r3, [r3, #2]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b05      	cmp	r3, #5
 8005f74:	f200 80ac 	bhi.w	80060d0 <USBD_GetDescriptor+0x204>
 8005f78:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <USBD_GetDescriptor+0xb4>)
 8005f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7e:	bf00      	nop
 8005f80:	08005f99 	.word	0x08005f99
 8005f84:	08005fcd 	.word	0x08005fcd
 8005f88:	08006001 	.word	0x08006001
 8005f8c:	08006035 	.word	0x08006035
 8005f90:	08006069 	.word	0x08006069
 8005f94:	0800609d 	.word	0x0800609d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	7c12      	ldrb	r2, [r2, #16]
 8005fb0:	f107 0108 	add.w	r1, r7, #8
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4798      	blx	r3
 8005fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fba:	e091      	b.n	80060e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fa94 	bl	80064ec <USBD_CtlError>
            err++;
 8005fc4:	7afb      	ldrb	r3, [r7, #11]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8005fca:	e089      	b.n	80060e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00b      	beq.n	8005ff0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	7c12      	ldrb	r2, [r2, #16]
 8005fe4:	f107 0108 	add.w	r1, r7, #8
 8005fe8:	4610      	mov	r0, r2
 8005fea:	4798      	blx	r3
 8005fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fee:	e077      	b.n	80060e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fa7a 	bl	80064ec <USBD_CtlError>
            err++;
 8005ff8:	7afb      	ldrb	r3, [r7, #11]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8005ffe:	e06f      	b.n	80060e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00b      	beq.n	8006024 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	7c12      	ldrb	r2, [r2, #16]
 8006018:	f107 0108 	add.w	r1, r7, #8
 800601c:	4610      	mov	r0, r2
 800601e:	4798      	blx	r3
 8006020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006022:	e05d      	b.n	80060e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fa60 	bl	80064ec <USBD_CtlError>
            err++;
 800602c:	7afb      	ldrb	r3, [r7, #11]
 800602e:	3301      	adds	r3, #1
 8006030:	72fb      	strb	r3, [r7, #11]
          break;
 8006032:	e055      	b.n	80060e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	7c12      	ldrb	r2, [r2, #16]
 800604c:	f107 0108 	add.w	r1, r7, #8
 8006050:	4610      	mov	r0, r2
 8006052:	4798      	blx	r3
 8006054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006056:	e043      	b.n	80060e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa46 	bl	80064ec <USBD_CtlError>
            err++;
 8006060:	7afb      	ldrb	r3, [r7, #11]
 8006062:	3301      	adds	r3, #1
 8006064:	72fb      	strb	r3, [r7, #11]
          break;
 8006066:	e03b      	b.n	80060e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00b      	beq.n	800608c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	7c12      	ldrb	r2, [r2, #16]
 8006080:	f107 0108 	add.w	r1, r7, #8
 8006084:	4610      	mov	r0, r2
 8006086:	4798      	blx	r3
 8006088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800608a:	e029      	b.n	80060e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fa2c 	bl	80064ec <USBD_CtlError>
            err++;
 8006094:	7afb      	ldrb	r3, [r7, #11]
 8006096:	3301      	adds	r3, #1
 8006098:	72fb      	strb	r3, [r7, #11]
          break;
 800609a:	e021      	b.n	80060e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	7c12      	ldrb	r2, [r2, #16]
 80060b4:	f107 0108 	add.w	r1, r7, #8
 80060b8:	4610      	mov	r0, r2
 80060ba:	4798      	blx	r3
 80060bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060be:	e00f      	b.n	80060e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fa12 	bl	80064ec <USBD_CtlError>
            err++;
 80060c8:	7afb      	ldrb	r3, [r7, #11]
 80060ca:	3301      	adds	r3, #1
 80060cc:	72fb      	strb	r3, [r7, #11]
          break;
 80060ce:	e007      	b.n	80060e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa0a 	bl	80064ec <USBD_CtlError>
          err++;
 80060d8:	7afb      	ldrb	r3, [r7, #11]
 80060da:	3301      	adds	r3, #1
 80060dc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80060de:	e038      	b.n	8006152 <USBD_GetDescriptor+0x286>
 80060e0:	e037      	b.n	8006152 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	7c1b      	ldrb	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f2:	f107 0208 	add.w	r2, r7, #8
 80060f6:	4610      	mov	r0, r2
 80060f8:	4798      	blx	r3
 80060fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060fc:	e029      	b.n	8006152 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f9f3 	bl	80064ec <USBD_CtlError>
        err++;
 8006106:	7afb      	ldrb	r3, [r7, #11]
 8006108:	3301      	adds	r3, #1
 800610a:	72fb      	strb	r3, [r7, #11]
      break;
 800610c:	e021      	b.n	8006152 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	7c1b      	ldrb	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10d      	bne.n	8006132 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	f107 0208 	add.w	r2, r7, #8
 8006122:	4610      	mov	r0, r2
 8006124:	4798      	blx	r3
 8006126:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3301      	adds	r3, #1
 800612c:	2207      	movs	r2, #7
 800612e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006130:	e00f      	b.n	8006152 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f9d9 	bl	80064ec <USBD_CtlError>
        err++;
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	3301      	adds	r3, #1
 800613e:	72fb      	strb	r3, [r7, #11]
      break;
 8006140:	e007      	b.n	8006152 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f9d1 	bl	80064ec <USBD_CtlError>
      err++;
 800614a:	7afb      	ldrb	r3, [r7, #11]
 800614c:	3301      	adds	r3, #1
 800614e:	72fb      	strb	r3, [r7, #11]
      break;
 8006150:	bf00      	nop
  }

  if (err != 0U)
 8006152:	7afb      	ldrb	r3, [r7, #11]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d11c      	bne.n	8006192 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006158:	893b      	ldrh	r3, [r7, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d011      	beq.n	8006182 <USBD_GetDescriptor+0x2b6>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	88db      	ldrh	r3, [r3, #6]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00d      	beq.n	8006182 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	88da      	ldrh	r2, [r3, #6]
 800616a:	893b      	ldrh	r3, [r7, #8]
 800616c:	4293      	cmp	r3, r2
 800616e:	bf28      	it	cs
 8006170:	4613      	movcs	r3, r2
 8006172:	b29b      	uxth	r3, r3
 8006174:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006176:	893b      	ldrh	r3, [r7, #8]
 8006178:	461a      	mov	r2, r3
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fa1f 	bl	80065c0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	88db      	ldrh	r3, [r3, #6]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d104      	bne.n	8006194 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa58 	bl	8006640 <USBD_CtlSendStatus>
 8006190:	e000      	b.n	8006194 <USBD_GetDescriptor+0x2c8>
    return;
 8006192:	bf00      	nop
    }
  }
}
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop

0800619c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	889b      	ldrh	r3, [r3, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d130      	bne.n	8006210 <USBD_SetAddress+0x74>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	88db      	ldrh	r3, [r3, #6]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d12c      	bne.n	8006210 <USBD_SetAddress+0x74>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	885b      	ldrh	r3, [r3, #2]
 80061ba:	2b7f      	cmp	r3, #127	; 0x7f
 80061bc:	d828      	bhi.n	8006210 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	885b      	ldrh	r3, [r3, #2]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d104      	bne.n	80061de <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f988 	bl	80064ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061dc:	e01c      	b.n	8006218 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	7bfa      	ldrb	r2, [r7, #15]
 80061e2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fd49 	bl	8006c82 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fa25 	bl	8006640 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006204:	e008      	b.n	8006218 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620e:	e003      	b.n	8006218 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f96a 	bl	80064ec <USBD_CtlError>
  }
}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	885b      	ldrh	r3, [r3, #2]
 800622e:	b2da      	uxtb	r2, r3
 8006230:	4b41      	ldr	r3, [pc, #260]	; (8006338 <USBD_SetConfig+0x118>)
 8006232:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006234:	4b40      	ldr	r3, [pc, #256]	; (8006338 <USBD_SetConfig+0x118>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d904      	bls.n	8006246 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f954 	bl	80064ec <USBD_CtlError>
 8006244:	e075      	b.n	8006332 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800624c:	2b02      	cmp	r3, #2
 800624e:	d002      	beq.n	8006256 <USBD_SetConfig+0x36>
 8006250:	2b03      	cmp	r3, #3
 8006252:	d023      	beq.n	800629c <USBD_SetConfig+0x7c>
 8006254:	e062      	b.n	800631c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006256:	4b38      	ldr	r3, [pc, #224]	; (8006338 <USBD_SetConfig+0x118>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01a      	beq.n	8006294 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800625e:	4b36      	ldr	r3, [pc, #216]	; (8006338 <USBD_SetConfig+0x118>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2203      	movs	r2, #3
 800626c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006270:	4b31      	ldr	r3, [pc, #196]	; (8006338 <USBD_SetConfig+0x118>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff f9f4 	bl	8005664 <USBD_SetClassConfig>
 800627c:	4603      	mov	r3, r0
 800627e:	2b02      	cmp	r3, #2
 8006280:	d104      	bne.n	800628c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f931 	bl	80064ec <USBD_CtlError>
            return;
 800628a:	e052      	b.n	8006332 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f9d7 	bl	8006640 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006292:	e04e      	b.n	8006332 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f9d3 	bl	8006640 <USBD_CtlSendStatus>
        break;
 800629a:	e04a      	b.n	8006332 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800629c:	4b26      	ldr	r3, [pc, #152]	; (8006338 <USBD_SetConfig+0x118>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d112      	bne.n	80062ca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80062ac:	4b22      	ldr	r3, [pc, #136]	; (8006338 <USBD_SetConfig+0x118>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80062b6:	4b20      	ldr	r3, [pc, #128]	; (8006338 <USBD_SetConfig+0x118>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff f9f0 	bl	80056a2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f9bc 	bl	8006640 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80062c8:	e033      	b.n	8006332 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80062ca:	4b1b      	ldr	r3, [pc, #108]	; (8006338 <USBD_SetConfig+0x118>)
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d01d      	beq.n	8006314 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff f9de 	bl	80056a2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80062e6:	4b14      	ldr	r3, [pc, #80]	; (8006338 <USBD_SetConfig+0x118>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80062f0:	4b11      	ldr	r3, [pc, #68]	; (8006338 <USBD_SetConfig+0x118>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff f9b4 	bl	8005664 <USBD_SetClassConfig>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d104      	bne.n	800630c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f8f1 	bl	80064ec <USBD_CtlError>
            return;
 800630a:	e012      	b.n	8006332 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f997 	bl	8006640 <USBD_CtlSendStatus>
        break;
 8006312:	e00e      	b.n	8006332 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f993 	bl	8006640 <USBD_CtlSendStatus>
        break;
 800631a:	e00a      	b.n	8006332 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f8e4 	bl	80064ec <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006324:	4b04      	ldr	r3, [pc, #16]	; (8006338 <USBD_SetConfig+0x118>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff f9b9 	bl	80056a2 <USBD_ClrClassConfig>
        break;
 8006330:	bf00      	nop
    }
  }
}
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	200001e8 	.word	0x200001e8

0800633c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	88db      	ldrh	r3, [r3, #6]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d004      	beq.n	8006358 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f8cb 	bl	80064ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006356:	e021      	b.n	800639c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800635e:	2b01      	cmp	r3, #1
 8006360:	db17      	blt.n	8006392 <USBD_GetConfig+0x56>
 8006362:	2b02      	cmp	r3, #2
 8006364:	dd02      	ble.n	800636c <USBD_GetConfig+0x30>
 8006366:	2b03      	cmp	r3, #3
 8006368:	d00b      	beq.n	8006382 <USBD_GetConfig+0x46>
 800636a:	e012      	b.n	8006392 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3308      	adds	r3, #8
 8006376:	2201      	movs	r2, #1
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f920 	bl	80065c0 <USBD_CtlSendData>
        break;
 8006380:	e00c      	b.n	800639c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3304      	adds	r3, #4
 8006386:	2201      	movs	r2, #1
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f918 	bl	80065c0 <USBD_CtlSendData>
        break;
 8006390:	e004      	b.n	800639c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f8a9 	bl	80064ec <USBD_CtlError>
        break;
 800639a:	bf00      	nop
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b4:	3b01      	subs	r3, #1
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d81e      	bhi.n	80063f8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	88db      	ldrh	r3, [r3, #6]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d004      	beq.n	80063cc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f891 	bl	80064ec <USBD_CtlError>
        break;
 80063ca:	e01a      	b.n	8006402 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f043 0202 	orr.w	r2, r3, #2
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	330c      	adds	r3, #12
 80063ec:	2202      	movs	r2, #2
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f8e5 	bl	80065c0 <USBD_CtlSendData>
      break;
 80063f6:	e004      	b.n	8006402 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f876 	bl	80064ec <USBD_CtlError>
      break;
 8006400:	bf00      	nop
  }
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b082      	sub	sp, #8
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	885b      	ldrh	r3, [r3, #2]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d106      	bne.n	800642a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f90b 	bl	8006640 <USBD_CtlSendStatus>
  }
}
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b082      	sub	sp, #8
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006442:	3b01      	subs	r3, #1
 8006444:	2b02      	cmp	r3, #2
 8006446:	d80b      	bhi.n	8006460 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	885b      	ldrh	r3, [r3, #2]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d10c      	bne.n	800646a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f8f1 	bl	8006640 <USBD_CtlSendStatus>
      }
      break;
 800645e:	e004      	b.n	800646a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f842 	bl	80064ec <USBD_CtlError>
      break;
 8006468:	e000      	b.n	800646c <USBD_ClrFeature+0x3a>
      break;
 800646a:	bf00      	nop
  }
}
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	785a      	ldrb	r2, [r3, #1]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	3302      	adds	r3, #2
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	b29a      	uxth	r2, r3
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	3303      	adds	r3, #3
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	b29b      	uxth	r3, r3
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	4413      	add	r3, r2
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	3304      	adds	r3, #4
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	3305      	adds	r3, #5
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	b29b      	uxth	r3, r3
 80064be:	4413      	add	r3, r2
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	3306      	adds	r3, #6
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	3307      	adds	r3, #7
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	021b      	lsls	r3, r3, #8
 80064d8:	b29b      	uxth	r3, r3
 80064da:	4413      	add	r3, r2
 80064dc:	b29a      	uxth	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	80da      	strh	r2, [r3, #6]

}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80064f6:	2180      	movs	r1, #128	; 0x80
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fb5f 	bl	8006bbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80064fe:	2100      	movs	r1, #0
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fb5b 	bl	8006bbc <USBD_LL_StallEP>
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b086      	sub	sp, #24
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d032      	beq.n	800658a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f834 	bl	8006592 <USBD_GetLen>
 800652a:	4603      	mov	r3, r0
 800652c:	3301      	adds	r3, #1
 800652e:	b29b      	uxth	r3, r3
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006538:	7dfb      	ldrb	r3, [r7, #23]
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	75fa      	strb	r2, [r7, #23]
 800653e:	461a      	mov	r2, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4413      	add	r3, r2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	7812      	ldrb	r2, [r2, #0]
 8006548:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800654a:	7dfb      	ldrb	r3, [r7, #23]
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	75fa      	strb	r2, [r7, #23]
 8006550:	461a      	mov	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	4413      	add	r3, r2
 8006556:	2203      	movs	r2, #3
 8006558:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800655a:	e012      	b.n	8006582 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	60fa      	str	r2, [r7, #12]
 8006562:	7dfa      	ldrb	r2, [r7, #23]
 8006564:	1c51      	adds	r1, r2, #1
 8006566:	75f9      	strb	r1, [r7, #23]
 8006568:	4611      	mov	r1, r2
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	440a      	add	r2, r1
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	75fa      	strb	r2, [r7, #23]
 8006578:	461a      	mov	r2, r3
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4413      	add	r3, r2
 800657e:	2200      	movs	r2, #0
 8006580:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e8      	bne.n	800655c <USBD_GetString+0x4e>
    }
  }
}
 800658a:	bf00      	nop
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800659e:	e005      	b.n	80065ac <USBD_GetLen+0x1a>
  {
    len++;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	3301      	adds	r3, #1
 80065a4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3301      	adds	r3, #1
 80065aa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f5      	bne.n	80065a0 <USBD_GetLen+0xe>
  }

  return len;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr

080065c0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2202      	movs	r2, #2
 80065d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80065d6:	88fa      	ldrh	r2, [r7, #6]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80065dc:	88fa      	ldrh	r2, [r7, #6]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065e2:	88fb      	ldrh	r3, [r7, #6]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	2100      	movs	r1, #0
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fb69 	bl	8006cc0 <USBD_LL_Transmit>

  return USBD_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	4613      	mov	r3, r2
 8006604:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	2100      	movs	r1, #0
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fb57 	bl	8006cc0 <USBD_LL_Transmit>

  return USBD_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	4613      	mov	r3, r2
 8006628:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	2100      	movs	r1, #0
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 fb68 	bl	8006d06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2204      	movs	r2, #4
 800664c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006650:	2300      	movs	r3, #0
 8006652:	2200      	movs	r2, #0
 8006654:	2100      	movs	r1, #0
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fb32 	bl	8006cc0 <USBD_LL_Transmit>

  return USBD_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2205      	movs	r2, #5
 8006672:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006676:	2300      	movs	r3, #0
 8006678:	2200      	movs	r2, #0
 800667a:	2100      	movs	r1, #0
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fb42 	bl	8006d06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006690:	2200      	movs	r2, #0
 8006692:	490e      	ldr	r1, [pc, #56]	; (80066cc <MX_USB_DEVICE_Init+0x40>)
 8006694:	480e      	ldr	r0, [pc, #56]	; (80066d0 <MX_USB_DEVICE_Init+0x44>)
 8006696:	f7fe ff8b 	bl	80055b0 <USBD_Init>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80066a0:	f7fa fa88 	bl	8000bb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80066a4:	490b      	ldr	r1, [pc, #44]	; (80066d4 <MX_USB_DEVICE_Init+0x48>)
 80066a6:	480a      	ldr	r0, [pc, #40]	; (80066d0 <MX_USB_DEVICE_Init+0x44>)
 80066a8:	f7fe ffad 	bl	8005606 <USBD_RegisterClass>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80066b2:	f7fa fa7f 	bl	8000bb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80066b6:	4806      	ldr	r0, [pc, #24]	; (80066d0 <MX_USB_DEVICE_Init+0x44>)
 80066b8:	f7fe ffbe 	bl	8005638 <USBD_Start>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80066c2:	f7fa fa77 	bl	8000bb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80066c6:	bf00      	nop
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20000114 	.word	0x20000114
 80066d0:	200004f4 	.word	0x200004f4
 80066d4:	2000000c 	.word	0x2000000c

080066d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	6039      	str	r1, [r7, #0]
 80066e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2212      	movs	r2, #18
 80066e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80066ea:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	20000130 	.word	0x20000130

080066fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	6039      	str	r1, [r7, #0]
 8006706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2204      	movs	r2, #4
 800670c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800670e:	4b03      	ldr	r3, [pc, #12]	; (800671c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	bc80      	pop	{r7}
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	20000144 	.word	0x20000144

08006720 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	6039      	str	r1, [r7, #0]
 800672a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d105      	bne.n	800673e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	4907      	ldr	r1, [pc, #28]	; (8006754 <USBD_FS_ProductStrDescriptor+0x34>)
 8006736:	4808      	ldr	r0, [pc, #32]	; (8006758 <USBD_FS_ProductStrDescriptor+0x38>)
 8006738:	f7ff fee9 	bl	800650e <USBD_GetString>
 800673c:	e004      	b.n	8006748 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	4904      	ldr	r1, [pc, #16]	; (8006754 <USBD_FS_ProductStrDescriptor+0x34>)
 8006742:	4805      	ldr	r0, [pc, #20]	; (8006758 <USBD_FS_ProductStrDescriptor+0x38>)
 8006744:	f7ff fee3 	bl	800650e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006748:	4b02      	ldr	r3, [pc, #8]	; (8006754 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	200007b8 	.word	0x200007b8
 8006758:	08007efc 	.word	0x08007efc

0800675c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	6039      	str	r1, [r7, #0]
 8006766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	4904      	ldr	r1, [pc, #16]	; (800677c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800676c:	4804      	ldr	r0, [pc, #16]	; (8006780 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800676e:	f7ff fece 	bl	800650e <USBD_GetString>
  return USBD_StrDesc;
 8006772:	4b02      	ldr	r3, [pc, #8]	; (800677c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	200007b8 	.word	0x200007b8
 8006780:	08007f14 	.word	0x08007f14

08006784 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	6039      	str	r1, [r7, #0]
 800678e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	221a      	movs	r2, #26
 8006794:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006796:	f000 f843 	bl	8006820 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800679a:	4b02      	ldr	r3, [pc, #8]	; (80067a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	20000148 	.word	0x20000148

080067a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	6039      	str	r1, [r7, #0]
 80067b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d105      	bne.n	80067c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	4907      	ldr	r1, [pc, #28]	; (80067dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80067be:	4808      	ldr	r0, [pc, #32]	; (80067e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80067c0:	f7ff fea5 	bl	800650e <USBD_GetString>
 80067c4:	e004      	b.n	80067d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	4904      	ldr	r1, [pc, #16]	; (80067dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80067ca:	4805      	ldr	r0, [pc, #20]	; (80067e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80067cc:	f7ff fe9f 	bl	800650e <USBD_GetString>
  }
  return USBD_StrDesc;
 80067d0:	4b02      	ldr	r3, [pc, #8]	; (80067dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	200007b8 	.word	0x200007b8
 80067e0:	08007f28 	.word	0x08007f28

080067e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	6039      	str	r1, [r7, #0]
 80067ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d105      	bne.n	8006802 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	4907      	ldr	r1, [pc, #28]	; (8006818 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80067fa:	4808      	ldr	r0, [pc, #32]	; (800681c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80067fc:	f7ff fe87 	bl	800650e <USBD_GetString>
 8006800:	e004      	b.n	800680c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	4904      	ldr	r1, [pc, #16]	; (8006818 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006806:	4805      	ldr	r0, [pc, #20]	; (800681c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006808:	f7ff fe81 	bl	800650e <USBD_GetString>
  }
  return USBD_StrDesc;
 800680c:	4b02      	ldr	r3, [pc, #8]	; (8006818 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	200007b8 	.word	0x200007b8
 800681c:	08007f34 	.word	0x08007f34

08006820 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006826:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <Get_SerialNum+0x44>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800682c:	4b0e      	ldr	r3, [pc, #56]	; (8006868 <Get_SerialNum+0x48>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006832:	4b0e      	ldr	r3, [pc, #56]	; (800686c <Get_SerialNum+0x4c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d009      	beq.n	800685a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006846:	2208      	movs	r2, #8
 8006848:	4909      	ldr	r1, [pc, #36]	; (8006870 <Get_SerialNum+0x50>)
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f814 	bl	8006878 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006850:	2204      	movs	r2, #4
 8006852:	4908      	ldr	r1, [pc, #32]	; (8006874 <Get_SerialNum+0x54>)
 8006854:	68b8      	ldr	r0, [r7, #8]
 8006856:	f000 f80f 	bl	8006878 <IntToUnicode>
  }
}
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	1ffff7e8 	.word	0x1ffff7e8
 8006868:	1ffff7ec 	.word	0x1ffff7ec
 800686c:	1ffff7f0 	.word	0x1ffff7f0
 8006870:	2000014a 	.word	0x2000014a
 8006874:	2000015a 	.word	0x2000015a

08006878 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	4613      	mov	r3, r2
 8006884:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800688a:	2300      	movs	r3, #0
 800688c:	75fb      	strb	r3, [r7, #23]
 800688e:	e027      	b.n	80068e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	0f1b      	lsrs	r3, r3, #28
 8006894:	2b09      	cmp	r3, #9
 8006896:	d80b      	bhi.n	80068b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	0f1b      	lsrs	r3, r3, #28
 800689c:	b2da      	uxtb	r2, r3
 800689e:	7dfb      	ldrb	r3, [r7, #23]
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	4619      	mov	r1, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	440b      	add	r3, r1
 80068a8:	3230      	adds	r2, #48	; 0x30
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e00a      	b.n	80068c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	0f1b      	lsrs	r3, r3, #28
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	4619      	mov	r1, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	440b      	add	r3, r1
 80068c0:	3237      	adds	r2, #55	; 0x37
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	3301      	adds	r3, #1
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	4413      	add	r3, r2
 80068d6:	2200      	movs	r2, #0
 80068d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80068da:	7dfb      	ldrb	r3, [r7, #23]
 80068dc:	3301      	adds	r3, #1
 80068de:	75fb      	strb	r3, [r7, #23]
 80068e0:	7dfa      	ldrb	r2, [r7, #23]
 80068e2:	79fb      	ldrb	r3, [r7, #7]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d3d3      	bcc.n	8006890 <IntToUnicode+0x18>
  }
}
 80068e8:	bf00      	nop
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bc80      	pop	{r7}
 80068f0:	4770      	bx	lr
	...

080068f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a0d      	ldr	r2, [pc, #52]	; (8006938 <HAL_PCD_MspInit+0x44>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d113      	bne.n	800692e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006906:	4b0d      	ldr	r3, [pc, #52]	; (800693c <HAL_PCD_MspInit+0x48>)
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	4a0c      	ldr	r2, [pc, #48]	; (800693c <HAL_PCD_MspInit+0x48>)
 800690c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006910:	61d3      	str	r3, [r2, #28]
 8006912:	4b0a      	ldr	r3, [pc, #40]	; (800693c <HAL_PCD_MspInit+0x48>)
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800691e:	2200      	movs	r2, #0
 8006920:	2100      	movs	r1, #0
 8006922:	2014      	movs	r0, #20
 8006924:	f7fa fe6f 	bl	8001606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006928:	2014      	movs	r0, #20
 800692a:	f7fa fe88 	bl	800163e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800692e:	bf00      	nop
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	40005c00 	.word	0x40005c00
 800693c:	40021000 	.word	0x40021000

08006940 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f7fe feb6 	bl	80056c8 <USBD_LL_SetupStage>
}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	015b      	lsls	r3, r3, #5
 800697c:	4413      	add	r3, r2
 800697e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	4619      	mov	r1, r3
 8006988:	f7fe fee9 	bl	800575e <USBD_LL_DataOutStage>
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80069a6:	78fb      	ldrb	r3, [r7, #3]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	015b      	lsls	r3, r3, #5
 80069ac:	4413      	add	r3, r2
 80069ae:	333c      	adds	r3, #60	; 0x3c
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	4619      	mov	r1, r3
 80069b6:	f7fe ff43 	bl	8005840 <USBD_LL_DataInStage>
}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff f853 	bl	8005a7c <USBD_LL_SOF>
}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80069e6:	2301      	movs	r3, #1
 80069e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d001      	beq.n	80069f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80069f2:	f7fa f8df 	bl	8000bb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80069fc:	7bfa      	ldrb	r2, [r7, #15]
 80069fe:	4611      	mov	r1, r2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff f803 	bl	8005a0c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe ffbc 	bl	800598a <USBD_LL_Reset>
}
 8006a12:	bf00      	nop
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe fffd 	bl	8005a2a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d005      	beq.n	8006a44 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a38:	4b04      	ldr	r3, [pc, #16]	; (8006a4c <HAL_PCD_SuspendCallback+0x30>)
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	4a03      	ldr	r2, [pc, #12]	; (8006a4c <HAL_PCD_SuspendCallback+0x30>)
 8006a3e:	f043 0306 	orr.w	r3, r3, #6
 8006a42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a44:	bf00      	nop
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	e000ed00 	.word	0xe000ed00

08006a50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe fff7 	bl	8005a52 <USBD_LL_Resume>
}
 8006a64:	bf00      	nop
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006a74:	4a1f      	ldr	r2, [pc, #124]	; (8006af4 <USBD_LL_Init+0x88>)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a1d      	ldr	r2, [pc, #116]	; (8006af4 <USBD_LL_Init+0x88>)
 8006a80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006a84:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <USBD_LL_Init+0x88>)
 8006a86:	4a1c      	ldr	r2, [pc, #112]	; (8006af8 <USBD_LL_Init+0x8c>)
 8006a88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006a8a:	4b1a      	ldr	r3, [pc, #104]	; (8006af4 <USBD_LL_Init+0x88>)
 8006a8c:	2208      	movs	r2, #8
 8006a8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006a90:	4b18      	ldr	r3, [pc, #96]	; (8006af4 <USBD_LL_Init+0x88>)
 8006a92:	2202      	movs	r2, #2
 8006a94:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006a96:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <USBD_LL_Init+0x88>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006a9c:	4b15      	ldr	r3, [pc, #84]	; (8006af4 <USBD_LL_Init+0x88>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006aa2:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <USBD_LL_Init+0x88>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006aa8:	4812      	ldr	r0, [pc, #72]	; (8006af4 <USBD_LL_Init+0x88>)
 8006aaa:	f7fb f943 	bl	8001d34 <HAL_PCD_Init>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006ab4:	f7fa f87e 	bl	8000bb4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006abe:	2318      	movs	r3, #24
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	f7fb ffc8 	bl	8002a58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ace:	2358      	movs	r3, #88	; 0x58
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2180      	movs	r1, #128	; 0x80
 8006ad4:	f7fb ffc0 	bl	8002a58 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2181      	movs	r1, #129	; 0x81
 8006ae6:	f7fb ffb7 	bl	8002a58 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	200009b8 	.word	0x200009b8
 8006af8:	40005c00 	.word	0x40005c00

08006afc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fb f9ef 	bl	8001ef6 <HAL_PCD_Start>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 f934 	bl	8006d8c <USBD_Get_USB_Status>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	4608      	mov	r0, r1
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4603      	mov	r3, r0
 8006b42:	70fb      	strb	r3, [r7, #3]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70bb      	strb	r3, [r7, #2]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b5a:	78bb      	ldrb	r3, [r7, #2]
 8006b5c:	883a      	ldrh	r2, [r7, #0]
 8006b5e:	78f9      	ldrb	r1, [r7, #3]
 8006b60:	f7fb fb22 	bl	80021a8 <HAL_PCD_EP_Open>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 f90e 	bl	8006d8c <USBD_Get_USB_Status>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b98:	78fa      	ldrb	r2, [r7, #3]
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fb fb63 	bl	8002268 <HAL_PCD_EP_Close>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 f8ef 	bl	8006d8c <USBD_Get_USB_Status>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bd6:	78fa      	ldrb	r2, [r7, #3]
 8006bd8:	4611      	mov	r1, r2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fb fbf9 	bl	80023d2 <HAL_PCD_EP_SetStall>
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 f8d0 	bl	8006d8c <USBD_Get_USB_Status>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	460b      	mov	r3, r1
 8006c04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c14:	78fa      	ldrb	r2, [r7, #3]
 8006c16:	4611      	mov	r1, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fb fc34 	bl	8002486 <HAL_PCD_EP_ClrStall>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 f8b1 	bl	8006d8c <USBD_Get_USB_Status>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c4a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	da08      	bge.n	8006c66 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	015b      	lsls	r3, r3, #5
 8006c5e:	4413      	add	r3, r2
 8006c60:	332a      	adds	r3, #42	; 0x2a
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	e008      	b.n	8006c78 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	015b      	lsls	r3, r3, #5
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006c76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bc80      	pop	{r7}
 8006c80:	4770      	bx	lr

08006c82 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c9c:	78fa      	ldrb	r2, [r7, #3]
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fb fa5c 	bl	800215e <HAL_PCD_SetAddress>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f86d 	bl	8006d8c <USBD_Get_USB_Status>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	607a      	str	r2, [r7, #4]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	460b      	mov	r3, r1
 8006cce:	72fb      	strb	r3, [r7, #11]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ce2:	893b      	ldrh	r3, [r7, #8]
 8006ce4:	7af9      	ldrb	r1, [r7, #11]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	f7fb fb3a 	bl	8002360 <HAL_PCD_EP_Transmit>
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f84a 	bl	8006d8c <USBD_Get_USB_Status>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006cfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b086      	sub	sp, #24
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	461a      	mov	r2, r3
 8006d12:	460b      	mov	r3, r1
 8006d14:	72fb      	strb	r3, [r7, #11]
 8006d16:	4613      	mov	r3, r2
 8006d18:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d28:	893b      	ldrh	r3, [r7, #8]
 8006d2a:	7af9      	ldrb	r1, [r7, #11]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	f7fb fadd 	bl	80022ec <HAL_PCD_EP_Receive>
 8006d32:	4603      	mov	r3, r0
 8006d34:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f827 	bl	8006d8c <USBD_Get_USB_Status>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006d42:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006d54:	4b02      	ldr	r3, [pc, #8]	; (8006d60 <USBD_static_malloc+0x14>)
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr
 8006d60:	200001ec 	.word	0x200001ec

08006d64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]

}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr

08006d76 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr

08006d8c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d817      	bhi.n	8006dd0 <USBD_Get_USB_Status+0x44>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <USBD_Get_USB_Status+0x1c>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006db9 	.word	0x08006db9
 8006dac:	08006dbf 	.word	0x08006dbf
 8006db0:	08006dc5 	.word	0x08006dc5
 8006db4:	08006dcb 	.word	0x08006dcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	73fb      	strb	r3, [r7, #15]
    break;
 8006dbc:	e00b      	b.n	8006dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc2:	e008      	b.n	8006dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc8:	e005      	b.n	8006dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8006dce:	e002      	b.n	8006dd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8006dd4:	bf00      	nop
  }
  return usb_status;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bc80      	pop	{r7}
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop

08006de4 <__errno>:
 8006de4:	4b01      	ldr	r3, [pc, #4]	; (8006dec <__errno+0x8>)
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20000164 	.word	0x20000164

08006df0 <__libc_init_array>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	2500      	movs	r5, #0
 8006df4:	4e0c      	ldr	r6, [pc, #48]	; (8006e28 <__libc_init_array+0x38>)
 8006df6:	4c0d      	ldr	r4, [pc, #52]	; (8006e2c <__libc_init_array+0x3c>)
 8006df8:	1ba4      	subs	r4, r4, r6
 8006dfa:	10a4      	asrs	r4, r4, #2
 8006dfc:	42a5      	cmp	r5, r4
 8006dfe:	d109      	bne.n	8006e14 <__libc_init_array+0x24>
 8006e00:	f000 ff8c 	bl	8007d1c <_init>
 8006e04:	2500      	movs	r5, #0
 8006e06:	4e0a      	ldr	r6, [pc, #40]	; (8006e30 <__libc_init_array+0x40>)
 8006e08:	4c0a      	ldr	r4, [pc, #40]	; (8006e34 <__libc_init_array+0x44>)
 8006e0a:	1ba4      	subs	r4, r4, r6
 8006e0c:	10a4      	asrs	r4, r4, #2
 8006e0e:	42a5      	cmp	r5, r4
 8006e10:	d105      	bne.n	8006e1e <__libc_init_array+0x2e>
 8006e12:	bd70      	pop	{r4, r5, r6, pc}
 8006e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e18:	4798      	blx	r3
 8006e1a:	3501      	adds	r5, #1
 8006e1c:	e7ee      	b.n	8006dfc <__libc_init_array+0xc>
 8006e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e22:	4798      	blx	r3
 8006e24:	3501      	adds	r5, #1
 8006e26:	e7f2      	b.n	8006e0e <__libc_init_array+0x1e>
 8006e28:	08007fec 	.word	0x08007fec
 8006e2c:	08007fec 	.word	0x08007fec
 8006e30:	08007fec 	.word	0x08007fec
 8006e34:	08007ff0 	.word	0x08007ff0

08006e38 <malloc>:
 8006e38:	4b02      	ldr	r3, [pc, #8]	; (8006e44 <malloc+0xc>)
 8006e3a:	4601      	mov	r1, r0
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	f000 b86b 	b.w	8006f18 <_malloc_r>
 8006e42:	bf00      	nop
 8006e44:	20000164 	.word	0x20000164

08006e48 <free>:
 8006e48:	4b02      	ldr	r3, [pc, #8]	; (8006e54 <free+0xc>)
 8006e4a:	4601      	mov	r1, r0
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	f000 b817 	b.w	8006e80 <_free_r>
 8006e52:	bf00      	nop
 8006e54:	20000164 	.word	0x20000164

08006e58 <memcpy>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	1e43      	subs	r3, r0, #1
 8006e5c:	440a      	add	r2, r1
 8006e5e:	4291      	cmp	r1, r2
 8006e60:	d100      	bne.n	8006e64 <memcpy+0xc>
 8006e62:	bd10      	pop	{r4, pc}
 8006e64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e6c:	e7f7      	b.n	8006e5e <memcpy+0x6>

08006e6e <memset>:
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4402      	add	r2, r0
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d100      	bne.n	8006e78 <memset+0xa>
 8006e76:	4770      	bx	lr
 8006e78:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7c:	e7f9      	b.n	8006e72 <memset+0x4>
	...

08006e80 <_free_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4605      	mov	r5, r0
 8006e84:	2900      	cmp	r1, #0
 8006e86:	d043      	beq.n	8006f10 <_free_r+0x90>
 8006e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e8c:	1f0c      	subs	r4, r1, #4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bfb8      	it	lt
 8006e92:	18e4      	addlt	r4, r4, r3
 8006e94:	f000 f9b6 	bl	8007204 <__malloc_lock>
 8006e98:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <_free_r+0x94>)
 8006e9a:	6813      	ldr	r3, [r2, #0]
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	b933      	cbnz	r3, 8006eae <_free_r+0x2e>
 8006ea0:	6063      	str	r3, [r4, #4]
 8006ea2:	6014      	str	r4, [r2, #0]
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eaa:	f000 b9ac 	b.w	8007206 <__malloc_unlock>
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	d90b      	bls.n	8006eca <_free_r+0x4a>
 8006eb2:	6821      	ldr	r1, [r4, #0]
 8006eb4:	1862      	adds	r2, r4, r1
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	bf01      	itttt	eq
 8006eba:	681a      	ldreq	r2, [r3, #0]
 8006ebc:	685b      	ldreq	r3, [r3, #4]
 8006ebe:	1852      	addeq	r2, r2, r1
 8006ec0:	6022      	streq	r2, [r4, #0]
 8006ec2:	6063      	str	r3, [r4, #4]
 8006ec4:	6004      	str	r4, [r0, #0]
 8006ec6:	e7ed      	b.n	8006ea4 <_free_r+0x24>
 8006ec8:	4613      	mov	r3, r2
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	b10a      	cbz	r2, 8006ed2 <_free_r+0x52>
 8006ece:	42a2      	cmp	r2, r4
 8006ed0:	d9fa      	bls.n	8006ec8 <_free_r+0x48>
 8006ed2:	6819      	ldr	r1, [r3, #0]
 8006ed4:	1858      	adds	r0, r3, r1
 8006ed6:	42a0      	cmp	r0, r4
 8006ed8:	d10b      	bne.n	8006ef2 <_free_r+0x72>
 8006eda:	6820      	ldr	r0, [r4, #0]
 8006edc:	4401      	add	r1, r0
 8006ede:	1858      	adds	r0, r3, r1
 8006ee0:	4282      	cmp	r2, r0
 8006ee2:	6019      	str	r1, [r3, #0]
 8006ee4:	d1de      	bne.n	8006ea4 <_free_r+0x24>
 8006ee6:	6810      	ldr	r0, [r2, #0]
 8006ee8:	6852      	ldr	r2, [r2, #4]
 8006eea:	4401      	add	r1, r0
 8006eec:	6019      	str	r1, [r3, #0]
 8006eee:	605a      	str	r2, [r3, #4]
 8006ef0:	e7d8      	b.n	8006ea4 <_free_r+0x24>
 8006ef2:	d902      	bls.n	8006efa <_free_r+0x7a>
 8006ef4:	230c      	movs	r3, #12
 8006ef6:	602b      	str	r3, [r5, #0]
 8006ef8:	e7d4      	b.n	8006ea4 <_free_r+0x24>
 8006efa:	6820      	ldr	r0, [r4, #0]
 8006efc:	1821      	adds	r1, r4, r0
 8006efe:	428a      	cmp	r2, r1
 8006f00:	bf01      	itttt	eq
 8006f02:	6811      	ldreq	r1, [r2, #0]
 8006f04:	6852      	ldreq	r2, [r2, #4]
 8006f06:	1809      	addeq	r1, r1, r0
 8006f08:	6021      	streq	r1, [r4, #0]
 8006f0a:	6062      	str	r2, [r4, #4]
 8006f0c:	605c      	str	r4, [r3, #4]
 8006f0e:	e7c9      	b.n	8006ea4 <_free_r+0x24>
 8006f10:	bd38      	pop	{r3, r4, r5, pc}
 8006f12:	bf00      	nop
 8006f14:	20000200 	.word	0x20000200

08006f18 <_malloc_r>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	1ccd      	adds	r5, r1, #3
 8006f1c:	f025 0503 	bic.w	r5, r5, #3
 8006f20:	3508      	adds	r5, #8
 8006f22:	2d0c      	cmp	r5, #12
 8006f24:	bf38      	it	cc
 8006f26:	250c      	movcc	r5, #12
 8006f28:	2d00      	cmp	r5, #0
 8006f2a:	4606      	mov	r6, r0
 8006f2c:	db01      	blt.n	8006f32 <_malloc_r+0x1a>
 8006f2e:	42a9      	cmp	r1, r5
 8006f30:	d903      	bls.n	8006f3a <_malloc_r+0x22>
 8006f32:	230c      	movs	r3, #12
 8006f34:	6033      	str	r3, [r6, #0]
 8006f36:	2000      	movs	r0, #0
 8006f38:	bd70      	pop	{r4, r5, r6, pc}
 8006f3a:	f000 f963 	bl	8007204 <__malloc_lock>
 8006f3e:	4a21      	ldr	r2, [pc, #132]	; (8006fc4 <_malloc_r+0xac>)
 8006f40:	6814      	ldr	r4, [r2, #0]
 8006f42:	4621      	mov	r1, r4
 8006f44:	b991      	cbnz	r1, 8006f6c <_malloc_r+0x54>
 8006f46:	4c20      	ldr	r4, [pc, #128]	; (8006fc8 <_malloc_r+0xb0>)
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	b91b      	cbnz	r3, 8006f54 <_malloc_r+0x3c>
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f000 f869 	bl	8007024 <_sbrk_r>
 8006f52:	6020      	str	r0, [r4, #0]
 8006f54:	4629      	mov	r1, r5
 8006f56:	4630      	mov	r0, r6
 8006f58:	f000 f864 	bl	8007024 <_sbrk_r>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d124      	bne.n	8006faa <_malloc_r+0x92>
 8006f60:	230c      	movs	r3, #12
 8006f62:	4630      	mov	r0, r6
 8006f64:	6033      	str	r3, [r6, #0]
 8006f66:	f000 f94e 	bl	8007206 <__malloc_unlock>
 8006f6a:	e7e4      	b.n	8006f36 <_malloc_r+0x1e>
 8006f6c:	680b      	ldr	r3, [r1, #0]
 8006f6e:	1b5b      	subs	r3, r3, r5
 8006f70:	d418      	bmi.n	8006fa4 <_malloc_r+0x8c>
 8006f72:	2b0b      	cmp	r3, #11
 8006f74:	d90f      	bls.n	8006f96 <_malloc_r+0x7e>
 8006f76:	600b      	str	r3, [r1, #0]
 8006f78:	18cc      	adds	r4, r1, r3
 8006f7a:	50cd      	str	r5, [r1, r3]
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f000 f942 	bl	8007206 <__malloc_unlock>
 8006f82:	f104 000b 	add.w	r0, r4, #11
 8006f86:	1d23      	adds	r3, r4, #4
 8006f88:	f020 0007 	bic.w	r0, r0, #7
 8006f8c:	1ac3      	subs	r3, r0, r3
 8006f8e:	d0d3      	beq.n	8006f38 <_malloc_r+0x20>
 8006f90:	425a      	negs	r2, r3
 8006f92:	50e2      	str	r2, [r4, r3]
 8006f94:	e7d0      	b.n	8006f38 <_malloc_r+0x20>
 8006f96:	684b      	ldr	r3, [r1, #4]
 8006f98:	428c      	cmp	r4, r1
 8006f9a:	bf16      	itet	ne
 8006f9c:	6063      	strne	r3, [r4, #4]
 8006f9e:	6013      	streq	r3, [r2, #0]
 8006fa0:	460c      	movne	r4, r1
 8006fa2:	e7eb      	b.n	8006f7c <_malloc_r+0x64>
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	6849      	ldr	r1, [r1, #4]
 8006fa8:	e7cc      	b.n	8006f44 <_malloc_r+0x2c>
 8006faa:	1cc4      	adds	r4, r0, #3
 8006fac:	f024 0403 	bic.w	r4, r4, #3
 8006fb0:	42a0      	cmp	r0, r4
 8006fb2:	d005      	beq.n	8006fc0 <_malloc_r+0xa8>
 8006fb4:	1a21      	subs	r1, r4, r0
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f000 f834 	bl	8007024 <_sbrk_r>
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d0cf      	beq.n	8006f60 <_malloc_r+0x48>
 8006fc0:	6025      	str	r5, [r4, #0]
 8006fc2:	e7db      	b.n	8006f7c <_malloc_r+0x64>
 8006fc4:	20000200 	.word	0x20000200
 8006fc8:	20000204 	.word	0x20000204

08006fcc <iprintf>:
 8006fcc:	b40f      	push	{r0, r1, r2, r3}
 8006fce:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <iprintf+0x2c>)
 8006fd0:	b513      	push	{r0, r1, r4, lr}
 8006fd2:	681c      	ldr	r4, [r3, #0]
 8006fd4:	b124      	cbz	r4, 8006fe0 <iprintf+0x14>
 8006fd6:	69a3      	ldr	r3, [r4, #24]
 8006fd8:	b913      	cbnz	r3, 8006fe0 <iprintf+0x14>
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 f888 	bl	80070f0 <__sinit>
 8006fe0:	ab05      	add	r3, sp, #20
 8006fe2:	9a04      	ldr	r2, [sp, #16]
 8006fe4:	68a1      	ldr	r1, [r4, #8]
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	f000 f935 	bl	8007258 <_vfiprintf_r>
 8006fee:	b002      	add	sp, #8
 8006ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff4:	b004      	add	sp, #16
 8006ff6:	4770      	bx	lr
 8006ff8:	20000164 	.word	0x20000164

08006ffc <putchar>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4b08      	ldr	r3, [pc, #32]	; (8007020 <putchar+0x24>)
 8007000:	4605      	mov	r5, r0
 8007002:	681c      	ldr	r4, [r3, #0]
 8007004:	b124      	cbz	r4, 8007010 <putchar+0x14>
 8007006:	69a3      	ldr	r3, [r4, #24]
 8007008:	b913      	cbnz	r3, 8007010 <putchar+0x14>
 800700a:	4620      	mov	r0, r4
 800700c:	f000 f870 	bl	80070f0 <__sinit>
 8007010:	68a2      	ldr	r2, [r4, #8]
 8007012:	4629      	mov	r1, r5
 8007014:	4620      	mov	r0, r4
 8007016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800701a:	f000 bbbb 	b.w	8007794 <_putc_r>
 800701e:	bf00      	nop
 8007020:	20000164 	.word	0x20000164

08007024 <_sbrk_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	2300      	movs	r3, #0
 8007028:	4c05      	ldr	r4, [pc, #20]	; (8007040 <_sbrk_r+0x1c>)
 800702a:	4605      	mov	r5, r0
 800702c:	4608      	mov	r0, r1
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	f7fa f908 	bl	8001244 <_sbrk>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_sbrk_r+0x1a>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	b103      	cbz	r3, 800703e <_sbrk_r+0x1a>
 800703c:	602b      	str	r3, [r5, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	20000c24 	.word	0x20000c24

08007044 <viprintf>:
 8007044:	4b09      	ldr	r3, [pc, #36]	; (800706c <viprintf+0x28>)
 8007046:	b570      	push	{r4, r5, r6, lr}
 8007048:	681c      	ldr	r4, [r3, #0]
 800704a:	4605      	mov	r5, r0
 800704c:	460e      	mov	r6, r1
 800704e:	b124      	cbz	r4, 800705a <viprintf+0x16>
 8007050:	69a3      	ldr	r3, [r4, #24]
 8007052:	b913      	cbnz	r3, 800705a <viprintf+0x16>
 8007054:	4620      	mov	r0, r4
 8007056:	f000 f84b 	bl	80070f0 <__sinit>
 800705a:	4633      	mov	r3, r6
 800705c:	462a      	mov	r2, r5
 800705e:	68a1      	ldr	r1, [r4, #8]
 8007060:	4620      	mov	r0, r4
 8007062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007066:	f000 b8f7 	b.w	8007258 <_vfiprintf_r>
 800706a:	bf00      	nop
 800706c:	20000164 	.word	0x20000164

08007070 <std>:
 8007070:	2300      	movs	r3, #0
 8007072:	b510      	push	{r4, lr}
 8007074:	4604      	mov	r4, r0
 8007076:	e9c0 3300 	strd	r3, r3, [r0]
 800707a:	6083      	str	r3, [r0, #8]
 800707c:	8181      	strh	r1, [r0, #12]
 800707e:	6643      	str	r3, [r0, #100]	; 0x64
 8007080:	81c2      	strh	r2, [r0, #14]
 8007082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007086:	6183      	str	r3, [r0, #24]
 8007088:	4619      	mov	r1, r3
 800708a:	2208      	movs	r2, #8
 800708c:	305c      	adds	r0, #92	; 0x5c
 800708e:	f7ff feee 	bl	8006e6e <memset>
 8007092:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <std+0x38>)
 8007094:	6224      	str	r4, [r4, #32]
 8007096:	6263      	str	r3, [r4, #36]	; 0x24
 8007098:	4b04      	ldr	r3, [pc, #16]	; (80070ac <std+0x3c>)
 800709a:	62a3      	str	r3, [r4, #40]	; 0x28
 800709c:	4b04      	ldr	r3, [pc, #16]	; (80070b0 <std+0x40>)
 800709e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070a0:	4b04      	ldr	r3, [pc, #16]	; (80070b4 <std+0x44>)
 80070a2:	6323      	str	r3, [r4, #48]	; 0x30
 80070a4:	bd10      	pop	{r4, pc}
 80070a6:	bf00      	nop
 80070a8:	08007801 	.word	0x08007801
 80070ac:	08007823 	.word	0x08007823
 80070b0:	0800785b 	.word	0x0800785b
 80070b4:	0800787f 	.word	0x0800787f

080070b8 <_cleanup_r>:
 80070b8:	4901      	ldr	r1, [pc, #4]	; (80070c0 <_cleanup_r+0x8>)
 80070ba:	f000 b885 	b.w	80071c8 <_fwalk_reent>
 80070be:	bf00      	nop
 80070c0:	08007b59 	.word	0x08007b59

080070c4 <__sfmoreglue>:
 80070c4:	b570      	push	{r4, r5, r6, lr}
 80070c6:	2568      	movs	r5, #104	; 0x68
 80070c8:	1e4a      	subs	r2, r1, #1
 80070ca:	4355      	muls	r5, r2
 80070cc:	460e      	mov	r6, r1
 80070ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070d2:	f7ff ff21 	bl	8006f18 <_malloc_r>
 80070d6:	4604      	mov	r4, r0
 80070d8:	b140      	cbz	r0, 80070ec <__sfmoreglue+0x28>
 80070da:	2100      	movs	r1, #0
 80070dc:	e9c0 1600 	strd	r1, r6, [r0]
 80070e0:	300c      	adds	r0, #12
 80070e2:	60a0      	str	r0, [r4, #8]
 80070e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070e8:	f7ff fec1 	bl	8006e6e <memset>
 80070ec:	4620      	mov	r0, r4
 80070ee:	bd70      	pop	{r4, r5, r6, pc}

080070f0 <__sinit>:
 80070f0:	6983      	ldr	r3, [r0, #24]
 80070f2:	b510      	push	{r4, lr}
 80070f4:	4604      	mov	r4, r0
 80070f6:	bb33      	cbnz	r3, 8007146 <__sinit+0x56>
 80070f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80070fc:	6503      	str	r3, [r0, #80]	; 0x50
 80070fe:	4b12      	ldr	r3, [pc, #72]	; (8007148 <__sinit+0x58>)
 8007100:	4a12      	ldr	r2, [pc, #72]	; (800714c <__sinit+0x5c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6282      	str	r2, [r0, #40]	; 0x28
 8007106:	4298      	cmp	r0, r3
 8007108:	bf04      	itt	eq
 800710a:	2301      	moveq	r3, #1
 800710c:	6183      	streq	r3, [r0, #24]
 800710e:	f000 f81f 	bl	8007150 <__sfp>
 8007112:	6060      	str	r0, [r4, #4]
 8007114:	4620      	mov	r0, r4
 8007116:	f000 f81b 	bl	8007150 <__sfp>
 800711a:	60a0      	str	r0, [r4, #8]
 800711c:	4620      	mov	r0, r4
 800711e:	f000 f817 	bl	8007150 <__sfp>
 8007122:	2200      	movs	r2, #0
 8007124:	60e0      	str	r0, [r4, #12]
 8007126:	2104      	movs	r1, #4
 8007128:	6860      	ldr	r0, [r4, #4]
 800712a:	f7ff ffa1 	bl	8007070 <std>
 800712e:	2201      	movs	r2, #1
 8007130:	2109      	movs	r1, #9
 8007132:	68a0      	ldr	r0, [r4, #8]
 8007134:	f7ff ff9c 	bl	8007070 <std>
 8007138:	2202      	movs	r2, #2
 800713a:	2112      	movs	r1, #18
 800713c:	68e0      	ldr	r0, [r4, #12]
 800713e:	f7ff ff97 	bl	8007070 <std>
 8007142:	2301      	movs	r3, #1
 8007144:	61a3      	str	r3, [r4, #24]
 8007146:	bd10      	pop	{r4, pc}
 8007148:	08007f54 	.word	0x08007f54
 800714c:	080070b9 	.word	0x080070b9

08007150 <__sfp>:
 8007150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007152:	4b1b      	ldr	r3, [pc, #108]	; (80071c0 <__sfp+0x70>)
 8007154:	4607      	mov	r7, r0
 8007156:	681e      	ldr	r6, [r3, #0]
 8007158:	69b3      	ldr	r3, [r6, #24]
 800715a:	b913      	cbnz	r3, 8007162 <__sfp+0x12>
 800715c:	4630      	mov	r0, r6
 800715e:	f7ff ffc7 	bl	80070f0 <__sinit>
 8007162:	3648      	adds	r6, #72	; 0x48
 8007164:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007168:	3b01      	subs	r3, #1
 800716a:	d503      	bpl.n	8007174 <__sfp+0x24>
 800716c:	6833      	ldr	r3, [r6, #0]
 800716e:	b133      	cbz	r3, 800717e <__sfp+0x2e>
 8007170:	6836      	ldr	r6, [r6, #0]
 8007172:	e7f7      	b.n	8007164 <__sfp+0x14>
 8007174:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007178:	b16d      	cbz	r5, 8007196 <__sfp+0x46>
 800717a:	3468      	adds	r4, #104	; 0x68
 800717c:	e7f4      	b.n	8007168 <__sfp+0x18>
 800717e:	2104      	movs	r1, #4
 8007180:	4638      	mov	r0, r7
 8007182:	f7ff ff9f 	bl	80070c4 <__sfmoreglue>
 8007186:	6030      	str	r0, [r6, #0]
 8007188:	2800      	cmp	r0, #0
 800718a:	d1f1      	bne.n	8007170 <__sfp+0x20>
 800718c:	230c      	movs	r3, #12
 800718e:	4604      	mov	r4, r0
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	4620      	mov	r0, r4
 8007194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007196:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <__sfp+0x74>)
 8007198:	6665      	str	r5, [r4, #100]	; 0x64
 800719a:	e9c4 5500 	strd	r5, r5, [r4]
 800719e:	60a5      	str	r5, [r4, #8]
 80071a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80071a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80071a8:	2208      	movs	r2, #8
 80071aa:	4629      	mov	r1, r5
 80071ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071b0:	f7ff fe5d 	bl	8006e6e <memset>
 80071b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071bc:	e7e9      	b.n	8007192 <__sfp+0x42>
 80071be:	bf00      	nop
 80071c0:	08007f54 	.word	0x08007f54
 80071c4:	ffff0001 	.word	0xffff0001

080071c8 <_fwalk_reent>:
 80071c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071cc:	4680      	mov	r8, r0
 80071ce:	4689      	mov	r9, r1
 80071d0:	2600      	movs	r6, #0
 80071d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071d6:	b914      	cbnz	r4, 80071de <_fwalk_reent+0x16>
 80071d8:	4630      	mov	r0, r6
 80071da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80071e2:	3f01      	subs	r7, #1
 80071e4:	d501      	bpl.n	80071ea <_fwalk_reent+0x22>
 80071e6:	6824      	ldr	r4, [r4, #0]
 80071e8:	e7f5      	b.n	80071d6 <_fwalk_reent+0xe>
 80071ea:	89ab      	ldrh	r3, [r5, #12]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d907      	bls.n	8007200 <_fwalk_reent+0x38>
 80071f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071f4:	3301      	adds	r3, #1
 80071f6:	d003      	beq.n	8007200 <_fwalk_reent+0x38>
 80071f8:	4629      	mov	r1, r5
 80071fa:	4640      	mov	r0, r8
 80071fc:	47c8      	blx	r9
 80071fe:	4306      	orrs	r6, r0
 8007200:	3568      	adds	r5, #104	; 0x68
 8007202:	e7ee      	b.n	80071e2 <_fwalk_reent+0x1a>

08007204 <__malloc_lock>:
 8007204:	4770      	bx	lr

08007206 <__malloc_unlock>:
 8007206:	4770      	bx	lr

08007208 <__sfputc_r>:
 8007208:	6893      	ldr	r3, [r2, #8]
 800720a:	b410      	push	{r4}
 800720c:	3b01      	subs	r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	6093      	str	r3, [r2, #8]
 8007212:	da07      	bge.n	8007224 <__sfputc_r+0x1c>
 8007214:	6994      	ldr	r4, [r2, #24]
 8007216:	42a3      	cmp	r3, r4
 8007218:	db01      	blt.n	800721e <__sfputc_r+0x16>
 800721a:	290a      	cmp	r1, #10
 800721c:	d102      	bne.n	8007224 <__sfputc_r+0x1c>
 800721e:	bc10      	pop	{r4}
 8007220:	f000 bb32 	b.w	8007888 <__swbuf_r>
 8007224:	6813      	ldr	r3, [r2, #0]
 8007226:	1c58      	adds	r0, r3, #1
 8007228:	6010      	str	r0, [r2, #0]
 800722a:	7019      	strb	r1, [r3, #0]
 800722c:	4608      	mov	r0, r1
 800722e:	bc10      	pop	{r4}
 8007230:	4770      	bx	lr

08007232 <__sfputs_r>:
 8007232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007234:	4606      	mov	r6, r0
 8007236:	460f      	mov	r7, r1
 8007238:	4614      	mov	r4, r2
 800723a:	18d5      	adds	r5, r2, r3
 800723c:	42ac      	cmp	r4, r5
 800723e:	d101      	bne.n	8007244 <__sfputs_r+0x12>
 8007240:	2000      	movs	r0, #0
 8007242:	e007      	b.n	8007254 <__sfputs_r+0x22>
 8007244:	463a      	mov	r2, r7
 8007246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724a:	4630      	mov	r0, r6
 800724c:	f7ff ffdc 	bl	8007208 <__sfputc_r>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d1f3      	bne.n	800723c <__sfputs_r+0xa>
 8007254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007258 <_vfiprintf_r>:
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	460c      	mov	r4, r1
 800725e:	b09d      	sub	sp, #116	; 0x74
 8007260:	4617      	mov	r7, r2
 8007262:	461d      	mov	r5, r3
 8007264:	4606      	mov	r6, r0
 8007266:	b118      	cbz	r0, 8007270 <_vfiprintf_r+0x18>
 8007268:	6983      	ldr	r3, [r0, #24]
 800726a:	b90b      	cbnz	r3, 8007270 <_vfiprintf_r+0x18>
 800726c:	f7ff ff40 	bl	80070f0 <__sinit>
 8007270:	4b7c      	ldr	r3, [pc, #496]	; (8007464 <_vfiprintf_r+0x20c>)
 8007272:	429c      	cmp	r4, r3
 8007274:	d158      	bne.n	8007328 <_vfiprintf_r+0xd0>
 8007276:	6874      	ldr	r4, [r6, #4]
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	0718      	lsls	r0, r3, #28
 800727c:	d55e      	bpl.n	800733c <_vfiprintf_r+0xe4>
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d05b      	beq.n	800733c <_vfiprintf_r+0xe4>
 8007284:	2300      	movs	r3, #0
 8007286:	9309      	str	r3, [sp, #36]	; 0x24
 8007288:	2320      	movs	r3, #32
 800728a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800728e:	2330      	movs	r3, #48	; 0x30
 8007290:	f04f 0b01 	mov.w	fp, #1
 8007294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007298:	9503      	str	r5, [sp, #12]
 800729a:	46b8      	mov	r8, r7
 800729c:	4645      	mov	r5, r8
 800729e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80072a2:	b10b      	cbz	r3, 80072a8 <_vfiprintf_r+0x50>
 80072a4:	2b25      	cmp	r3, #37	; 0x25
 80072a6:	d154      	bne.n	8007352 <_vfiprintf_r+0xfa>
 80072a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80072ac:	d00b      	beq.n	80072c6 <_vfiprintf_r+0x6e>
 80072ae:	4653      	mov	r3, sl
 80072b0:	463a      	mov	r2, r7
 80072b2:	4621      	mov	r1, r4
 80072b4:	4630      	mov	r0, r6
 80072b6:	f7ff ffbc 	bl	8007232 <__sfputs_r>
 80072ba:	3001      	adds	r0, #1
 80072bc:	f000 80c2 	beq.w	8007444 <_vfiprintf_r+0x1ec>
 80072c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c2:	4453      	add	r3, sl
 80072c4:	9309      	str	r3, [sp, #36]	; 0x24
 80072c6:	f898 3000 	ldrb.w	r3, [r8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 80ba 	beq.w	8007444 <_vfiprintf_r+0x1ec>
 80072d0:	2300      	movs	r3, #0
 80072d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072da:	9304      	str	r3, [sp, #16]
 80072dc:	9307      	str	r3, [sp, #28]
 80072de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072e2:	931a      	str	r3, [sp, #104]	; 0x68
 80072e4:	46a8      	mov	r8, r5
 80072e6:	2205      	movs	r2, #5
 80072e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80072ec:	485e      	ldr	r0, [pc, #376]	; (8007468 <_vfiprintf_r+0x210>)
 80072ee:	f000 fcd3 	bl	8007c98 <memchr>
 80072f2:	9b04      	ldr	r3, [sp, #16]
 80072f4:	bb78      	cbnz	r0, 8007356 <_vfiprintf_r+0xfe>
 80072f6:	06d9      	lsls	r1, r3, #27
 80072f8:	bf44      	itt	mi
 80072fa:	2220      	movmi	r2, #32
 80072fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007300:	071a      	lsls	r2, r3, #28
 8007302:	bf44      	itt	mi
 8007304:	222b      	movmi	r2, #43	; 0x2b
 8007306:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800730a:	782a      	ldrb	r2, [r5, #0]
 800730c:	2a2a      	cmp	r2, #42	; 0x2a
 800730e:	d02a      	beq.n	8007366 <_vfiprintf_r+0x10e>
 8007310:	46a8      	mov	r8, r5
 8007312:	2000      	movs	r0, #0
 8007314:	250a      	movs	r5, #10
 8007316:	9a07      	ldr	r2, [sp, #28]
 8007318:	4641      	mov	r1, r8
 800731a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800731e:	3b30      	subs	r3, #48	; 0x30
 8007320:	2b09      	cmp	r3, #9
 8007322:	d969      	bls.n	80073f8 <_vfiprintf_r+0x1a0>
 8007324:	b360      	cbz	r0, 8007380 <_vfiprintf_r+0x128>
 8007326:	e024      	b.n	8007372 <_vfiprintf_r+0x11a>
 8007328:	4b50      	ldr	r3, [pc, #320]	; (800746c <_vfiprintf_r+0x214>)
 800732a:	429c      	cmp	r4, r3
 800732c:	d101      	bne.n	8007332 <_vfiprintf_r+0xda>
 800732e:	68b4      	ldr	r4, [r6, #8]
 8007330:	e7a2      	b.n	8007278 <_vfiprintf_r+0x20>
 8007332:	4b4f      	ldr	r3, [pc, #316]	; (8007470 <_vfiprintf_r+0x218>)
 8007334:	429c      	cmp	r4, r3
 8007336:	bf08      	it	eq
 8007338:	68f4      	ldreq	r4, [r6, #12]
 800733a:	e79d      	b.n	8007278 <_vfiprintf_r+0x20>
 800733c:	4621      	mov	r1, r4
 800733e:	4630      	mov	r0, r6
 8007340:	f000 fb06 	bl	8007950 <__swsetup_r>
 8007344:	2800      	cmp	r0, #0
 8007346:	d09d      	beq.n	8007284 <_vfiprintf_r+0x2c>
 8007348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800734c:	b01d      	add	sp, #116	; 0x74
 800734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007352:	46a8      	mov	r8, r5
 8007354:	e7a2      	b.n	800729c <_vfiprintf_r+0x44>
 8007356:	4a44      	ldr	r2, [pc, #272]	; (8007468 <_vfiprintf_r+0x210>)
 8007358:	4645      	mov	r5, r8
 800735a:	1a80      	subs	r0, r0, r2
 800735c:	fa0b f000 	lsl.w	r0, fp, r0
 8007360:	4318      	orrs	r0, r3
 8007362:	9004      	str	r0, [sp, #16]
 8007364:	e7be      	b.n	80072e4 <_vfiprintf_r+0x8c>
 8007366:	9a03      	ldr	r2, [sp, #12]
 8007368:	1d11      	adds	r1, r2, #4
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	9103      	str	r1, [sp, #12]
 800736e:	2a00      	cmp	r2, #0
 8007370:	db01      	blt.n	8007376 <_vfiprintf_r+0x11e>
 8007372:	9207      	str	r2, [sp, #28]
 8007374:	e004      	b.n	8007380 <_vfiprintf_r+0x128>
 8007376:	4252      	negs	r2, r2
 8007378:	f043 0302 	orr.w	r3, r3, #2
 800737c:	9207      	str	r2, [sp, #28]
 800737e:	9304      	str	r3, [sp, #16]
 8007380:	f898 3000 	ldrb.w	r3, [r8]
 8007384:	2b2e      	cmp	r3, #46	; 0x2e
 8007386:	d10e      	bne.n	80073a6 <_vfiprintf_r+0x14e>
 8007388:	f898 3001 	ldrb.w	r3, [r8, #1]
 800738c:	2b2a      	cmp	r3, #42	; 0x2a
 800738e:	d138      	bne.n	8007402 <_vfiprintf_r+0x1aa>
 8007390:	9b03      	ldr	r3, [sp, #12]
 8007392:	f108 0802 	add.w	r8, r8, #2
 8007396:	1d1a      	adds	r2, r3, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	9203      	str	r2, [sp, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	bfb8      	it	lt
 80073a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073a4:	9305      	str	r3, [sp, #20]
 80073a6:	4d33      	ldr	r5, [pc, #204]	; (8007474 <_vfiprintf_r+0x21c>)
 80073a8:	2203      	movs	r2, #3
 80073aa:	f898 1000 	ldrb.w	r1, [r8]
 80073ae:	4628      	mov	r0, r5
 80073b0:	f000 fc72 	bl	8007c98 <memchr>
 80073b4:	b140      	cbz	r0, 80073c8 <_vfiprintf_r+0x170>
 80073b6:	2340      	movs	r3, #64	; 0x40
 80073b8:	1b40      	subs	r0, r0, r5
 80073ba:	fa03 f000 	lsl.w	r0, r3, r0
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	f108 0801 	add.w	r8, r8, #1
 80073c4:	4303      	orrs	r3, r0
 80073c6:	9304      	str	r3, [sp, #16]
 80073c8:	f898 1000 	ldrb.w	r1, [r8]
 80073cc:	2206      	movs	r2, #6
 80073ce:	482a      	ldr	r0, [pc, #168]	; (8007478 <_vfiprintf_r+0x220>)
 80073d0:	f108 0701 	add.w	r7, r8, #1
 80073d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073d8:	f000 fc5e 	bl	8007c98 <memchr>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d037      	beq.n	8007450 <_vfiprintf_r+0x1f8>
 80073e0:	4b26      	ldr	r3, [pc, #152]	; (800747c <_vfiprintf_r+0x224>)
 80073e2:	bb1b      	cbnz	r3, 800742c <_vfiprintf_r+0x1d4>
 80073e4:	9b03      	ldr	r3, [sp, #12]
 80073e6:	3307      	adds	r3, #7
 80073e8:	f023 0307 	bic.w	r3, r3, #7
 80073ec:	3308      	adds	r3, #8
 80073ee:	9303      	str	r3, [sp, #12]
 80073f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f2:	444b      	add	r3, r9
 80073f4:	9309      	str	r3, [sp, #36]	; 0x24
 80073f6:	e750      	b.n	800729a <_vfiprintf_r+0x42>
 80073f8:	fb05 3202 	mla	r2, r5, r2, r3
 80073fc:	2001      	movs	r0, #1
 80073fe:	4688      	mov	r8, r1
 8007400:	e78a      	b.n	8007318 <_vfiprintf_r+0xc0>
 8007402:	2300      	movs	r3, #0
 8007404:	250a      	movs	r5, #10
 8007406:	4619      	mov	r1, r3
 8007408:	f108 0801 	add.w	r8, r8, #1
 800740c:	9305      	str	r3, [sp, #20]
 800740e:	4640      	mov	r0, r8
 8007410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007414:	3a30      	subs	r2, #48	; 0x30
 8007416:	2a09      	cmp	r2, #9
 8007418:	d903      	bls.n	8007422 <_vfiprintf_r+0x1ca>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0c3      	beq.n	80073a6 <_vfiprintf_r+0x14e>
 800741e:	9105      	str	r1, [sp, #20]
 8007420:	e7c1      	b.n	80073a6 <_vfiprintf_r+0x14e>
 8007422:	fb05 2101 	mla	r1, r5, r1, r2
 8007426:	2301      	movs	r3, #1
 8007428:	4680      	mov	r8, r0
 800742a:	e7f0      	b.n	800740e <_vfiprintf_r+0x1b6>
 800742c:	ab03      	add	r3, sp, #12
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	4622      	mov	r2, r4
 8007432:	4b13      	ldr	r3, [pc, #76]	; (8007480 <_vfiprintf_r+0x228>)
 8007434:	a904      	add	r1, sp, #16
 8007436:	4630      	mov	r0, r6
 8007438:	f3af 8000 	nop.w
 800743c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007440:	4681      	mov	r9, r0
 8007442:	d1d5      	bne.n	80073f0 <_vfiprintf_r+0x198>
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	065b      	lsls	r3, r3, #25
 8007448:	f53f af7e 	bmi.w	8007348 <_vfiprintf_r+0xf0>
 800744c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800744e:	e77d      	b.n	800734c <_vfiprintf_r+0xf4>
 8007450:	ab03      	add	r3, sp, #12
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4622      	mov	r2, r4
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <_vfiprintf_r+0x228>)
 8007458:	a904      	add	r1, sp, #16
 800745a:	4630      	mov	r0, r6
 800745c:	f000 f888 	bl	8007570 <_printf_i>
 8007460:	e7ec      	b.n	800743c <_vfiprintf_r+0x1e4>
 8007462:	bf00      	nop
 8007464:	08007f78 	.word	0x08007f78
 8007468:	08007fb8 	.word	0x08007fb8
 800746c:	08007f98 	.word	0x08007f98
 8007470:	08007f58 	.word	0x08007f58
 8007474:	08007fbe 	.word	0x08007fbe
 8007478:	08007fc2 	.word	0x08007fc2
 800747c:	00000000 	.word	0x00000000
 8007480:	08007233 	.word	0x08007233

08007484 <_printf_common>:
 8007484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	4691      	mov	r9, r2
 800748a:	461f      	mov	r7, r3
 800748c:	688a      	ldr	r2, [r1, #8]
 800748e:	690b      	ldr	r3, [r1, #16]
 8007490:	4606      	mov	r6, r0
 8007492:	4293      	cmp	r3, r2
 8007494:	bfb8      	it	lt
 8007496:	4613      	movlt	r3, r2
 8007498:	f8c9 3000 	str.w	r3, [r9]
 800749c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074a0:	460c      	mov	r4, r1
 80074a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074a6:	b112      	cbz	r2, 80074ae <_printf_common+0x2a>
 80074a8:	3301      	adds	r3, #1
 80074aa:	f8c9 3000 	str.w	r3, [r9]
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	0699      	lsls	r1, r3, #26
 80074b2:	bf42      	ittt	mi
 80074b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80074b8:	3302      	addmi	r3, #2
 80074ba:	f8c9 3000 	strmi.w	r3, [r9]
 80074be:	6825      	ldr	r5, [r4, #0]
 80074c0:	f015 0506 	ands.w	r5, r5, #6
 80074c4:	d107      	bne.n	80074d6 <_printf_common+0x52>
 80074c6:	f104 0a19 	add.w	sl, r4, #25
 80074ca:	68e3      	ldr	r3, [r4, #12]
 80074cc:	f8d9 2000 	ldr.w	r2, [r9]
 80074d0:	1a9b      	subs	r3, r3, r2
 80074d2:	42ab      	cmp	r3, r5
 80074d4:	dc29      	bgt.n	800752a <_printf_common+0xa6>
 80074d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80074da:	6822      	ldr	r2, [r4, #0]
 80074dc:	3300      	adds	r3, #0
 80074de:	bf18      	it	ne
 80074e0:	2301      	movne	r3, #1
 80074e2:	0692      	lsls	r2, r2, #26
 80074e4:	d42e      	bmi.n	8007544 <_printf_common+0xc0>
 80074e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074ea:	4639      	mov	r1, r7
 80074ec:	4630      	mov	r0, r6
 80074ee:	47c0      	blx	r8
 80074f0:	3001      	adds	r0, #1
 80074f2:	d021      	beq.n	8007538 <_printf_common+0xb4>
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	68e5      	ldr	r5, [r4, #12]
 80074f8:	f003 0306 	and.w	r3, r3, #6
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	bf18      	it	ne
 8007500:	2500      	movne	r5, #0
 8007502:	f8d9 2000 	ldr.w	r2, [r9]
 8007506:	f04f 0900 	mov.w	r9, #0
 800750a:	bf08      	it	eq
 800750c:	1aad      	subeq	r5, r5, r2
 800750e:	68a3      	ldr	r3, [r4, #8]
 8007510:	6922      	ldr	r2, [r4, #16]
 8007512:	bf08      	it	eq
 8007514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007518:	4293      	cmp	r3, r2
 800751a:	bfc4      	itt	gt
 800751c:	1a9b      	subgt	r3, r3, r2
 800751e:	18ed      	addgt	r5, r5, r3
 8007520:	341a      	adds	r4, #26
 8007522:	454d      	cmp	r5, r9
 8007524:	d11a      	bne.n	800755c <_printf_common+0xd8>
 8007526:	2000      	movs	r0, #0
 8007528:	e008      	b.n	800753c <_printf_common+0xb8>
 800752a:	2301      	movs	r3, #1
 800752c:	4652      	mov	r2, sl
 800752e:	4639      	mov	r1, r7
 8007530:	4630      	mov	r0, r6
 8007532:	47c0      	blx	r8
 8007534:	3001      	adds	r0, #1
 8007536:	d103      	bne.n	8007540 <_printf_common+0xbc>
 8007538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800753c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007540:	3501      	adds	r5, #1
 8007542:	e7c2      	b.n	80074ca <_printf_common+0x46>
 8007544:	2030      	movs	r0, #48	; 0x30
 8007546:	18e1      	adds	r1, r4, r3
 8007548:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007552:	4422      	add	r2, r4
 8007554:	3302      	adds	r3, #2
 8007556:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800755a:	e7c4      	b.n	80074e6 <_printf_common+0x62>
 800755c:	2301      	movs	r3, #1
 800755e:	4622      	mov	r2, r4
 8007560:	4639      	mov	r1, r7
 8007562:	4630      	mov	r0, r6
 8007564:	47c0      	blx	r8
 8007566:	3001      	adds	r0, #1
 8007568:	d0e6      	beq.n	8007538 <_printf_common+0xb4>
 800756a:	f109 0901 	add.w	r9, r9, #1
 800756e:	e7d8      	b.n	8007522 <_printf_common+0x9e>

08007570 <_printf_i>:
 8007570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007574:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007578:	460c      	mov	r4, r1
 800757a:	7e09      	ldrb	r1, [r1, #24]
 800757c:	b085      	sub	sp, #20
 800757e:	296e      	cmp	r1, #110	; 0x6e
 8007580:	4617      	mov	r7, r2
 8007582:	4606      	mov	r6, r0
 8007584:	4698      	mov	r8, r3
 8007586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007588:	f000 80b3 	beq.w	80076f2 <_printf_i+0x182>
 800758c:	d822      	bhi.n	80075d4 <_printf_i+0x64>
 800758e:	2963      	cmp	r1, #99	; 0x63
 8007590:	d036      	beq.n	8007600 <_printf_i+0x90>
 8007592:	d80a      	bhi.n	80075aa <_printf_i+0x3a>
 8007594:	2900      	cmp	r1, #0
 8007596:	f000 80b9 	beq.w	800770c <_printf_i+0x19c>
 800759a:	2958      	cmp	r1, #88	; 0x58
 800759c:	f000 8083 	beq.w	80076a6 <_printf_i+0x136>
 80075a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80075a8:	e032      	b.n	8007610 <_printf_i+0xa0>
 80075aa:	2964      	cmp	r1, #100	; 0x64
 80075ac:	d001      	beq.n	80075b2 <_printf_i+0x42>
 80075ae:	2969      	cmp	r1, #105	; 0x69
 80075b0:	d1f6      	bne.n	80075a0 <_printf_i+0x30>
 80075b2:	6820      	ldr	r0, [r4, #0]
 80075b4:	6813      	ldr	r3, [r2, #0]
 80075b6:	0605      	lsls	r5, r0, #24
 80075b8:	f103 0104 	add.w	r1, r3, #4
 80075bc:	d52a      	bpl.n	8007614 <_printf_i+0xa4>
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6011      	str	r1, [r2, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	da03      	bge.n	80075ce <_printf_i+0x5e>
 80075c6:	222d      	movs	r2, #45	; 0x2d
 80075c8:	425b      	negs	r3, r3
 80075ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80075ce:	486f      	ldr	r0, [pc, #444]	; (800778c <_printf_i+0x21c>)
 80075d0:	220a      	movs	r2, #10
 80075d2:	e039      	b.n	8007648 <_printf_i+0xd8>
 80075d4:	2973      	cmp	r1, #115	; 0x73
 80075d6:	f000 809d 	beq.w	8007714 <_printf_i+0x1a4>
 80075da:	d808      	bhi.n	80075ee <_printf_i+0x7e>
 80075dc:	296f      	cmp	r1, #111	; 0x6f
 80075de:	d020      	beq.n	8007622 <_printf_i+0xb2>
 80075e0:	2970      	cmp	r1, #112	; 0x70
 80075e2:	d1dd      	bne.n	80075a0 <_printf_i+0x30>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	f043 0320 	orr.w	r3, r3, #32
 80075ea:	6023      	str	r3, [r4, #0]
 80075ec:	e003      	b.n	80075f6 <_printf_i+0x86>
 80075ee:	2975      	cmp	r1, #117	; 0x75
 80075f0:	d017      	beq.n	8007622 <_printf_i+0xb2>
 80075f2:	2978      	cmp	r1, #120	; 0x78
 80075f4:	d1d4      	bne.n	80075a0 <_printf_i+0x30>
 80075f6:	2378      	movs	r3, #120	; 0x78
 80075f8:	4865      	ldr	r0, [pc, #404]	; (8007790 <_printf_i+0x220>)
 80075fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075fe:	e055      	b.n	80076ac <_printf_i+0x13c>
 8007600:	6813      	ldr	r3, [r2, #0]
 8007602:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007606:	1d19      	adds	r1, r3, #4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6011      	str	r1, [r2, #0]
 800760c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007610:	2301      	movs	r3, #1
 8007612:	e08c      	b.n	800772e <_printf_i+0x1be>
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f010 0f40 	tst.w	r0, #64	; 0x40
 800761a:	6011      	str	r1, [r2, #0]
 800761c:	bf18      	it	ne
 800761e:	b21b      	sxthne	r3, r3
 8007620:	e7cf      	b.n	80075c2 <_printf_i+0x52>
 8007622:	6813      	ldr	r3, [r2, #0]
 8007624:	6825      	ldr	r5, [r4, #0]
 8007626:	1d18      	adds	r0, r3, #4
 8007628:	6010      	str	r0, [r2, #0]
 800762a:	0628      	lsls	r0, r5, #24
 800762c:	d501      	bpl.n	8007632 <_printf_i+0xc2>
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	e002      	b.n	8007638 <_printf_i+0xc8>
 8007632:	0668      	lsls	r0, r5, #25
 8007634:	d5fb      	bpl.n	800762e <_printf_i+0xbe>
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	296f      	cmp	r1, #111	; 0x6f
 800763a:	bf14      	ite	ne
 800763c:	220a      	movne	r2, #10
 800763e:	2208      	moveq	r2, #8
 8007640:	4852      	ldr	r0, [pc, #328]	; (800778c <_printf_i+0x21c>)
 8007642:	2100      	movs	r1, #0
 8007644:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007648:	6865      	ldr	r5, [r4, #4]
 800764a:	2d00      	cmp	r5, #0
 800764c:	60a5      	str	r5, [r4, #8]
 800764e:	f2c0 8095 	blt.w	800777c <_printf_i+0x20c>
 8007652:	6821      	ldr	r1, [r4, #0]
 8007654:	f021 0104 	bic.w	r1, r1, #4
 8007658:	6021      	str	r1, [r4, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d13d      	bne.n	80076da <_printf_i+0x16a>
 800765e:	2d00      	cmp	r5, #0
 8007660:	f040 808e 	bne.w	8007780 <_printf_i+0x210>
 8007664:	4665      	mov	r5, ip
 8007666:	2a08      	cmp	r2, #8
 8007668:	d10b      	bne.n	8007682 <_printf_i+0x112>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	07db      	lsls	r3, r3, #31
 800766e:	d508      	bpl.n	8007682 <_printf_i+0x112>
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	6862      	ldr	r2, [r4, #4]
 8007674:	429a      	cmp	r2, r3
 8007676:	bfde      	ittt	le
 8007678:	2330      	movle	r3, #48	; 0x30
 800767a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800767e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007682:	ebac 0305 	sub.w	r3, ip, r5
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	f8cd 8000 	str.w	r8, [sp]
 800768c:	463b      	mov	r3, r7
 800768e:	aa03      	add	r2, sp, #12
 8007690:	4621      	mov	r1, r4
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff fef6 	bl	8007484 <_printf_common>
 8007698:	3001      	adds	r0, #1
 800769a:	d14d      	bne.n	8007738 <_printf_i+0x1c8>
 800769c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076a0:	b005      	add	sp, #20
 80076a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076a6:	4839      	ldr	r0, [pc, #228]	; (800778c <_printf_i+0x21c>)
 80076a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80076ac:	6813      	ldr	r3, [r2, #0]
 80076ae:	6821      	ldr	r1, [r4, #0]
 80076b0:	1d1d      	adds	r5, r3, #4
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6015      	str	r5, [r2, #0]
 80076b6:	060a      	lsls	r2, r1, #24
 80076b8:	d50b      	bpl.n	80076d2 <_printf_i+0x162>
 80076ba:	07ca      	lsls	r2, r1, #31
 80076bc:	bf44      	itt	mi
 80076be:	f041 0120 	orrmi.w	r1, r1, #32
 80076c2:	6021      	strmi	r1, [r4, #0]
 80076c4:	b91b      	cbnz	r3, 80076ce <_printf_i+0x15e>
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	f022 0220 	bic.w	r2, r2, #32
 80076cc:	6022      	str	r2, [r4, #0]
 80076ce:	2210      	movs	r2, #16
 80076d0:	e7b7      	b.n	8007642 <_printf_i+0xd2>
 80076d2:	064d      	lsls	r5, r1, #25
 80076d4:	bf48      	it	mi
 80076d6:	b29b      	uxthmi	r3, r3
 80076d8:	e7ef      	b.n	80076ba <_printf_i+0x14a>
 80076da:	4665      	mov	r5, ip
 80076dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80076e0:	fb02 3311 	mls	r3, r2, r1, r3
 80076e4:	5cc3      	ldrb	r3, [r0, r3]
 80076e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80076ea:	460b      	mov	r3, r1
 80076ec:	2900      	cmp	r1, #0
 80076ee:	d1f5      	bne.n	80076dc <_printf_i+0x16c>
 80076f0:	e7b9      	b.n	8007666 <_printf_i+0xf6>
 80076f2:	6813      	ldr	r3, [r2, #0]
 80076f4:	6825      	ldr	r5, [r4, #0]
 80076f6:	1d18      	adds	r0, r3, #4
 80076f8:	6961      	ldr	r1, [r4, #20]
 80076fa:	6010      	str	r0, [r2, #0]
 80076fc:	0628      	lsls	r0, r5, #24
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	d501      	bpl.n	8007706 <_printf_i+0x196>
 8007702:	6019      	str	r1, [r3, #0]
 8007704:	e002      	b.n	800770c <_printf_i+0x19c>
 8007706:	066a      	lsls	r2, r5, #25
 8007708:	d5fb      	bpl.n	8007702 <_printf_i+0x192>
 800770a:	8019      	strh	r1, [r3, #0]
 800770c:	2300      	movs	r3, #0
 800770e:	4665      	mov	r5, ip
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	e7b9      	b.n	8007688 <_printf_i+0x118>
 8007714:	6813      	ldr	r3, [r2, #0]
 8007716:	1d19      	adds	r1, r3, #4
 8007718:	6011      	str	r1, [r2, #0]
 800771a:	681d      	ldr	r5, [r3, #0]
 800771c:	6862      	ldr	r2, [r4, #4]
 800771e:	2100      	movs	r1, #0
 8007720:	4628      	mov	r0, r5
 8007722:	f000 fab9 	bl	8007c98 <memchr>
 8007726:	b108      	cbz	r0, 800772c <_printf_i+0x1bc>
 8007728:	1b40      	subs	r0, r0, r5
 800772a:	6060      	str	r0, [r4, #4]
 800772c:	6863      	ldr	r3, [r4, #4]
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	2300      	movs	r3, #0
 8007732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007736:	e7a7      	b.n	8007688 <_printf_i+0x118>
 8007738:	6923      	ldr	r3, [r4, #16]
 800773a:	462a      	mov	r2, r5
 800773c:	4639      	mov	r1, r7
 800773e:	4630      	mov	r0, r6
 8007740:	47c0      	blx	r8
 8007742:	3001      	adds	r0, #1
 8007744:	d0aa      	beq.n	800769c <_printf_i+0x12c>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	079b      	lsls	r3, r3, #30
 800774a:	d413      	bmi.n	8007774 <_printf_i+0x204>
 800774c:	68e0      	ldr	r0, [r4, #12]
 800774e:	9b03      	ldr	r3, [sp, #12]
 8007750:	4298      	cmp	r0, r3
 8007752:	bfb8      	it	lt
 8007754:	4618      	movlt	r0, r3
 8007756:	e7a3      	b.n	80076a0 <_printf_i+0x130>
 8007758:	2301      	movs	r3, #1
 800775a:	464a      	mov	r2, r9
 800775c:	4639      	mov	r1, r7
 800775e:	4630      	mov	r0, r6
 8007760:	47c0      	blx	r8
 8007762:	3001      	adds	r0, #1
 8007764:	d09a      	beq.n	800769c <_printf_i+0x12c>
 8007766:	3501      	adds	r5, #1
 8007768:	68e3      	ldr	r3, [r4, #12]
 800776a:	9a03      	ldr	r2, [sp, #12]
 800776c:	1a9b      	subs	r3, r3, r2
 800776e:	42ab      	cmp	r3, r5
 8007770:	dcf2      	bgt.n	8007758 <_printf_i+0x1e8>
 8007772:	e7eb      	b.n	800774c <_printf_i+0x1dc>
 8007774:	2500      	movs	r5, #0
 8007776:	f104 0919 	add.w	r9, r4, #25
 800777a:	e7f5      	b.n	8007768 <_printf_i+0x1f8>
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1ac      	bne.n	80076da <_printf_i+0x16a>
 8007780:	7803      	ldrb	r3, [r0, #0]
 8007782:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007786:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800778a:	e76c      	b.n	8007666 <_printf_i+0xf6>
 800778c:	08007fc9 	.word	0x08007fc9
 8007790:	08007fda 	.word	0x08007fda

08007794 <_putc_r>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	460d      	mov	r5, r1
 8007798:	4614      	mov	r4, r2
 800779a:	4606      	mov	r6, r0
 800779c:	b118      	cbz	r0, 80077a6 <_putc_r+0x12>
 800779e:	6983      	ldr	r3, [r0, #24]
 80077a0:	b90b      	cbnz	r3, 80077a6 <_putc_r+0x12>
 80077a2:	f7ff fca5 	bl	80070f0 <__sinit>
 80077a6:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <_putc_r+0x60>)
 80077a8:	429c      	cmp	r4, r3
 80077aa:	d112      	bne.n	80077d2 <_putc_r+0x3e>
 80077ac:	6874      	ldr	r4, [r6, #4]
 80077ae:	68a3      	ldr	r3, [r4, #8]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	60a3      	str	r3, [r4, #8]
 80077b6:	da16      	bge.n	80077e6 <_putc_r+0x52>
 80077b8:	69a2      	ldr	r2, [r4, #24]
 80077ba:	4293      	cmp	r3, r2
 80077bc:	db02      	blt.n	80077c4 <_putc_r+0x30>
 80077be:	b2eb      	uxtb	r3, r5
 80077c0:	2b0a      	cmp	r3, #10
 80077c2:	d110      	bne.n	80077e6 <_putc_r+0x52>
 80077c4:	4622      	mov	r2, r4
 80077c6:	4629      	mov	r1, r5
 80077c8:	4630      	mov	r0, r6
 80077ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077ce:	f000 b85b 	b.w	8007888 <__swbuf_r>
 80077d2:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <_putc_r+0x64>)
 80077d4:	429c      	cmp	r4, r3
 80077d6:	d101      	bne.n	80077dc <_putc_r+0x48>
 80077d8:	68b4      	ldr	r4, [r6, #8]
 80077da:	e7e8      	b.n	80077ae <_putc_r+0x1a>
 80077dc:	4b07      	ldr	r3, [pc, #28]	; (80077fc <_putc_r+0x68>)
 80077de:	429c      	cmp	r4, r3
 80077e0:	bf08      	it	eq
 80077e2:	68f4      	ldreq	r4, [r6, #12]
 80077e4:	e7e3      	b.n	80077ae <_putc_r+0x1a>
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	b2e8      	uxtb	r0, r5
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	6022      	str	r2, [r4, #0]
 80077ee:	701d      	strb	r5, [r3, #0]
 80077f0:	bd70      	pop	{r4, r5, r6, pc}
 80077f2:	bf00      	nop
 80077f4:	08007f78 	.word	0x08007f78
 80077f8:	08007f98 	.word	0x08007f98
 80077fc:	08007f58 	.word	0x08007f58

08007800 <__sread>:
 8007800:	b510      	push	{r4, lr}
 8007802:	460c      	mov	r4, r1
 8007804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007808:	f000 fa54 	bl	8007cb4 <_read_r>
 800780c:	2800      	cmp	r0, #0
 800780e:	bfab      	itete	ge
 8007810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007812:	89a3      	ldrhlt	r3, [r4, #12]
 8007814:	181b      	addge	r3, r3, r0
 8007816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800781a:	bfac      	ite	ge
 800781c:	6563      	strge	r3, [r4, #84]	; 0x54
 800781e:	81a3      	strhlt	r3, [r4, #12]
 8007820:	bd10      	pop	{r4, pc}

08007822 <__swrite>:
 8007822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007826:	461f      	mov	r7, r3
 8007828:	898b      	ldrh	r3, [r1, #12]
 800782a:	4605      	mov	r5, r0
 800782c:	05db      	lsls	r3, r3, #23
 800782e:	460c      	mov	r4, r1
 8007830:	4616      	mov	r6, r2
 8007832:	d505      	bpl.n	8007840 <__swrite+0x1e>
 8007834:	2302      	movs	r3, #2
 8007836:	2200      	movs	r2, #0
 8007838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783c:	f000 f9b6 	bl	8007bac <_lseek_r>
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	4632      	mov	r2, r6
 8007844:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007848:	81a3      	strh	r3, [r4, #12]
 800784a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800784e:	463b      	mov	r3, r7
 8007850:	4628      	mov	r0, r5
 8007852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007856:	f000 b869 	b.w	800792c <_write_r>

0800785a <__sseek>:
 800785a:	b510      	push	{r4, lr}
 800785c:	460c      	mov	r4, r1
 800785e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007862:	f000 f9a3 	bl	8007bac <_lseek_r>
 8007866:	1c43      	adds	r3, r0, #1
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	bf15      	itete	ne
 800786c:	6560      	strne	r0, [r4, #84]	; 0x54
 800786e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007876:	81a3      	strheq	r3, [r4, #12]
 8007878:	bf18      	it	ne
 800787a:	81a3      	strhne	r3, [r4, #12]
 800787c:	bd10      	pop	{r4, pc}

0800787e <__sclose>:
 800787e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007882:	f000 b8d3 	b.w	8007a2c <_close_r>
	...

08007888 <__swbuf_r>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	460e      	mov	r6, r1
 800788c:	4614      	mov	r4, r2
 800788e:	4605      	mov	r5, r0
 8007890:	b118      	cbz	r0, 800789a <__swbuf_r+0x12>
 8007892:	6983      	ldr	r3, [r0, #24]
 8007894:	b90b      	cbnz	r3, 800789a <__swbuf_r+0x12>
 8007896:	f7ff fc2b 	bl	80070f0 <__sinit>
 800789a:	4b21      	ldr	r3, [pc, #132]	; (8007920 <__swbuf_r+0x98>)
 800789c:	429c      	cmp	r4, r3
 800789e:	d12a      	bne.n	80078f6 <__swbuf_r+0x6e>
 80078a0:	686c      	ldr	r4, [r5, #4]
 80078a2:	69a3      	ldr	r3, [r4, #24]
 80078a4:	60a3      	str	r3, [r4, #8]
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	071a      	lsls	r2, r3, #28
 80078aa:	d52e      	bpl.n	800790a <__swbuf_r+0x82>
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	b363      	cbz	r3, 800790a <__swbuf_r+0x82>
 80078b0:	6923      	ldr	r3, [r4, #16]
 80078b2:	6820      	ldr	r0, [r4, #0]
 80078b4:	b2f6      	uxtb	r6, r6
 80078b6:	1ac0      	subs	r0, r0, r3
 80078b8:	6963      	ldr	r3, [r4, #20]
 80078ba:	4637      	mov	r7, r6
 80078bc:	4283      	cmp	r3, r0
 80078be:	dc04      	bgt.n	80078ca <__swbuf_r+0x42>
 80078c0:	4621      	mov	r1, r4
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f948 	bl	8007b58 <_fflush_r>
 80078c8:	bb28      	cbnz	r0, 8007916 <__swbuf_r+0x8e>
 80078ca:	68a3      	ldr	r3, [r4, #8]
 80078cc:	3001      	adds	r0, #1
 80078ce:	3b01      	subs	r3, #1
 80078d0:	60a3      	str	r3, [r4, #8]
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	6022      	str	r2, [r4, #0]
 80078d8:	701e      	strb	r6, [r3, #0]
 80078da:	6963      	ldr	r3, [r4, #20]
 80078dc:	4283      	cmp	r3, r0
 80078de:	d004      	beq.n	80078ea <__swbuf_r+0x62>
 80078e0:	89a3      	ldrh	r3, [r4, #12]
 80078e2:	07db      	lsls	r3, r3, #31
 80078e4:	d519      	bpl.n	800791a <__swbuf_r+0x92>
 80078e6:	2e0a      	cmp	r6, #10
 80078e8:	d117      	bne.n	800791a <__swbuf_r+0x92>
 80078ea:	4621      	mov	r1, r4
 80078ec:	4628      	mov	r0, r5
 80078ee:	f000 f933 	bl	8007b58 <_fflush_r>
 80078f2:	b190      	cbz	r0, 800791a <__swbuf_r+0x92>
 80078f4:	e00f      	b.n	8007916 <__swbuf_r+0x8e>
 80078f6:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <__swbuf_r+0x9c>)
 80078f8:	429c      	cmp	r4, r3
 80078fa:	d101      	bne.n	8007900 <__swbuf_r+0x78>
 80078fc:	68ac      	ldr	r4, [r5, #8]
 80078fe:	e7d0      	b.n	80078a2 <__swbuf_r+0x1a>
 8007900:	4b09      	ldr	r3, [pc, #36]	; (8007928 <__swbuf_r+0xa0>)
 8007902:	429c      	cmp	r4, r3
 8007904:	bf08      	it	eq
 8007906:	68ec      	ldreq	r4, [r5, #12]
 8007908:	e7cb      	b.n	80078a2 <__swbuf_r+0x1a>
 800790a:	4621      	mov	r1, r4
 800790c:	4628      	mov	r0, r5
 800790e:	f000 f81f 	bl	8007950 <__swsetup_r>
 8007912:	2800      	cmp	r0, #0
 8007914:	d0cc      	beq.n	80078b0 <__swbuf_r+0x28>
 8007916:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800791a:	4638      	mov	r0, r7
 800791c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800791e:	bf00      	nop
 8007920:	08007f78 	.word	0x08007f78
 8007924:	08007f98 	.word	0x08007f98
 8007928:	08007f58 	.word	0x08007f58

0800792c <_write_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4605      	mov	r5, r0
 8007930:	4608      	mov	r0, r1
 8007932:	4611      	mov	r1, r2
 8007934:	2200      	movs	r2, #0
 8007936:	4c05      	ldr	r4, [pc, #20]	; (800794c <_write_r+0x20>)
 8007938:	6022      	str	r2, [r4, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	f7f9 fc36 	bl	80011ac <_write>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_write_r+0x1e>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	b103      	cbz	r3, 800794a <_write_r+0x1e>
 8007948:	602b      	str	r3, [r5, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	20000c24 	.word	0x20000c24

08007950 <__swsetup_r>:
 8007950:	4b32      	ldr	r3, [pc, #200]	; (8007a1c <__swsetup_r+0xcc>)
 8007952:	b570      	push	{r4, r5, r6, lr}
 8007954:	681d      	ldr	r5, [r3, #0]
 8007956:	4606      	mov	r6, r0
 8007958:	460c      	mov	r4, r1
 800795a:	b125      	cbz	r5, 8007966 <__swsetup_r+0x16>
 800795c:	69ab      	ldr	r3, [r5, #24]
 800795e:	b913      	cbnz	r3, 8007966 <__swsetup_r+0x16>
 8007960:	4628      	mov	r0, r5
 8007962:	f7ff fbc5 	bl	80070f0 <__sinit>
 8007966:	4b2e      	ldr	r3, [pc, #184]	; (8007a20 <__swsetup_r+0xd0>)
 8007968:	429c      	cmp	r4, r3
 800796a:	d10f      	bne.n	800798c <__swsetup_r+0x3c>
 800796c:	686c      	ldr	r4, [r5, #4]
 800796e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007972:	b29a      	uxth	r2, r3
 8007974:	0715      	lsls	r5, r2, #28
 8007976:	d42c      	bmi.n	80079d2 <__swsetup_r+0x82>
 8007978:	06d0      	lsls	r0, r2, #27
 800797a:	d411      	bmi.n	80079a0 <__swsetup_r+0x50>
 800797c:	2209      	movs	r2, #9
 800797e:	6032      	str	r2, [r6, #0]
 8007980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007984:	81a3      	strh	r3, [r4, #12]
 8007986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800798a:	e03e      	b.n	8007a0a <__swsetup_r+0xba>
 800798c:	4b25      	ldr	r3, [pc, #148]	; (8007a24 <__swsetup_r+0xd4>)
 800798e:	429c      	cmp	r4, r3
 8007990:	d101      	bne.n	8007996 <__swsetup_r+0x46>
 8007992:	68ac      	ldr	r4, [r5, #8]
 8007994:	e7eb      	b.n	800796e <__swsetup_r+0x1e>
 8007996:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <__swsetup_r+0xd8>)
 8007998:	429c      	cmp	r4, r3
 800799a:	bf08      	it	eq
 800799c:	68ec      	ldreq	r4, [r5, #12]
 800799e:	e7e6      	b.n	800796e <__swsetup_r+0x1e>
 80079a0:	0751      	lsls	r1, r2, #29
 80079a2:	d512      	bpl.n	80079ca <__swsetup_r+0x7a>
 80079a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079a6:	b141      	cbz	r1, 80079ba <__swsetup_r+0x6a>
 80079a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079ac:	4299      	cmp	r1, r3
 80079ae:	d002      	beq.n	80079b6 <__swsetup_r+0x66>
 80079b0:	4630      	mov	r0, r6
 80079b2:	f7ff fa65 	bl	8006e80 <_free_r>
 80079b6:	2300      	movs	r3, #0
 80079b8:	6363      	str	r3, [r4, #52]	; 0x34
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079c0:	81a3      	strh	r3, [r4, #12]
 80079c2:	2300      	movs	r3, #0
 80079c4:	6063      	str	r3, [r4, #4]
 80079c6:	6923      	ldr	r3, [r4, #16]
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	f043 0308 	orr.w	r3, r3, #8
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	b94b      	cbnz	r3, 80079ea <__swsetup_r+0x9a>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079e0:	d003      	beq.n	80079ea <__swsetup_r+0x9a>
 80079e2:	4621      	mov	r1, r4
 80079e4:	4630      	mov	r0, r6
 80079e6:	f000 f917 	bl	8007c18 <__smakebuf_r>
 80079ea:	89a2      	ldrh	r2, [r4, #12]
 80079ec:	f012 0301 	ands.w	r3, r2, #1
 80079f0:	d00c      	beq.n	8007a0c <__swsetup_r+0xbc>
 80079f2:	2300      	movs	r3, #0
 80079f4:	60a3      	str	r3, [r4, #8]
 80079f6:	6963      	ldr	r3, [r4, #20]
 80079f8:	425b      	negs	r3, r3
 80079fa:	61a3      	str	r3, [r4, #24]
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	b953      	cbnz	r3, 8007a16 <__swsetup_r+0xc6>
 8007a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007a08:	d1ba      	bne.n	8007980 <__swsetup_r+0x30>
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
 8007a0c:	0792      	lsls	r2, r2, #30
 8007a0e:	bf58      	it	pl
 8007a10:	6963      	ldrpl	r3, [r4, #20]
 8007a12:	60a3      	str	r3, [r4, #8]
 8007a14:	e7f2      	b.n	80079fc <__swsetup_r+0xac>
 8007a16:	2000      	movs	r0, #0
 8007a18:	e7f7      	b.n	8007a0a <__swsetup_r+0xba>
 8007a1a:	bf00      	nop
 8007a1c:	20000164 	.word	0x20000164
 8007a20:	08007f78 	.word	0x08007f78
 8007a24:	08007f98 	.word	0x08007f98
 8007a28:	08007f58 	.word	0x08007f58

08007a2c <_close_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	2300      	movs	r3, #0
 8007a30:	4c05      	ldr	r4, [pc, #20]	; (8007a48 <_close_r+0x1c>)
 8007a32:	4605      	mov	r5, r0
 8007a34:	4608      	mov	r0, r1
 8007a36:	6023      	str	r3, [r4, #0]
 8007a38:	f7f9 fbd4 	bl	80011e4 <_close>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d102      	bne.n	8007a46 <_close_r+0x1a>
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	b103      	cbz	r3, 8007a46 <_close_r+0x1a>
 8007a44:	602b      	str	r3, [r5, #0]
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
 8007a48:	20000c24 	.word	0x20000c24

08007a4c <__sflush_r>:
 8007a4c:	898a      	ldrh	r2, [r1, #12]
 8007a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a52:	4605      	mov	r5, r0
 8007a54:	0710      	lsls	r0, r2, #28
 8007a56:	460c      	mov	r4, r1
 8007a58:	d458      	bmi.n	8007b0c <__sflush_r+0xc0>
 8007a5a:	684b      	ldr	r3, [r1, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dc05      	bgt.n	8007a6c <__sflush_r+0x20>
 8007a60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	dc02      	bgt.n	8007a6c <__sflush_r+0x20>
 8007a66:	2000      	movs	r0, #0
 8007a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a6e:	2e00      	cmp	r6, #0
 8007a70:	d0f9      	beq.n	8007a66 <__sflush_r+0x1a>
 8007a72:	2300      	movs	r3, #0
 8007a74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a78:	682f      	ldr	r7, [r5, #0]
 8007a7a:	6a21      	ldr	r1, [r4, #32]
 8007a7c:	602b      	str	r3, [r5, #0]
 8007a7e:	d032      	beq.n	8007ae6 <__sflush_r+0x9a>
 8007a80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	075a      	lsls	r2, r3, #29
 8007a86:	d505      	bpl.n	8007a94 <__sflush_r+0x48>
 8007a88:	6863      	ldr	r3, [r4, #4]
 8007a8a:	1ac0      	subs	r0, r0, r3
 8007a8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a8e:	b10b      	cbz	r3, 8007a94 <__sflush_r+0x48>
 8007a90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a92:	1ac0      	subs	r0, r0, r3
 8007a94:	2300      	movs	r3, #0
 8007a96:	4602      	mov	r2, r0
 8007a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a9a:	6a21      	ldr	r1, [r4, #32]
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	47b0      	blx	r6
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	d106      	bne.n	8007ab4 <__sflush_r+0x68>
 8007aa6:	6829      	ldr	r1, [r5, #0]
 8007aa8:	291d      	cmp	r1, #29
 8007aaa:	d848      	bhi.n	8007b3e <__sflush_r+0xf2>
 8007aac:	4a29      	ldr	r2, [pc, #164]	; (8007b54 <__sflush_r+0x108>)
 8007aae:	40ca      	lsrs	r2, r1
 8007ab0:	07d6      	lsls	r6, r2, #31
 8007ab2:	d544      	bpl.n	8007b3e <__sflush_r+0xf2>
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	6062      	str	r2, [r4, #4]
 8007ab8:	6922      	ldr	r2, [r4, #16]
 8007aba:	04d9      	lsls	r1, r3, #19
 8007abc:	6022      	str	r2, [r4, #0]
 8007abe:	d504      	bpl.n	8007aca <__sflush_r+0x7e>
 8007ac0:	1c42      	adds	r2, r0, #1
 8007ac2:	d101      	bne.n	8007ac8 <__sflush_r+0x7c>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b903      	cbnz	r3, 8007aca <__sflush_r+0x7e>
 8007ac8:	6560      	str	r0, [r4, #84]	; 0x54
 8007aca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007acc:	602f      	str	r7, [r5, #0]
 8007ace:	2900      	cmp	r1, #0
 8007ad0:	d0c9      	beq.n	8007a66 <__sflush_r+0x1a>
 8007ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ad6:	4299      	cmp	r1, r3
 8007ad8:	d002      	beq.n	8007ae0 <__sflush_r+0x94>
 8007ada:	4628      	mov	r0, r5
 8007adc:	f7ff f9d0 	bl	8006e80 <_free_r>
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ae4:	e7c0      	b.n	8007a68 <__sflush_r+0x1c>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b0      	blx	r6
 8007aec:	1c41      	adds	r1, r0, #1
 8007aee:	d1c8      	bne.n	8007a82 <__sflush_r+0x36>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0c5      	beq.n	8007a82 <__sflush_r+0x36>
 8007af6:	2b1d      	cmp	r3, #29
 8007af8:	d001      	beq.n	8007afe <__sflush_r+0xb2>
 8007afa:	2b16      	cmp	r3, #22
 8007afc:	d101      	bne.n	8007b02 <__sflush_r+0xb6>
 8007afe:	602f      	str	r7, [r5, #0]
 8007b00:	e7b1      	b.n	8007a66 <__sflush_r+0x1a>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b08:	81a3      	strh	r3, [r4, #12]
 8007b0a:	e7ad      	b.n	8007a68 <__sflush_r+0x1c>
 8007b0c:	690f      	ldr	r7, [r1, #16]
 8007b0e:	2f00      	cmp	r7, #0
 8007b10:	d0a9      	beq.n	8007a66 <__sflush_r+0x1a>
 8007b12:	0793      	lsls	r3, r2, #30
 8007b14:	bf18      	it	ne
 8007b16:	2300      	movne	r3, #0
 8007b18:	680e      	ldr	r6, [r1, #0]
 8007b1a:	bf08      	it	eq
 8007b1c:	694b      	ldreq	r3, [r1, #20]
 8007b1e:	eba6 0807 	sub.w	r8, r6, r7
 8007b22:	600f      	str	r7, [r1, #0]
 8007b24:	608b      	str	r3, [r1, #8]
 8007b26:	f1b8 0f00 	cmp.w	r8, #0
 8007b2a:	dd9c      	ble.n	8007a66 <__sflush_r+0x1a>
 8007b2c:	4643      	mov	r3, r8
 8007b2e:	463a      	mov	r2, r7
 8007b30:	6a21      	ldr	r1, [r4, #32]
 8007b32:	4628      	mov	r0, r5
 8007b34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b36:	47b0      	blx	r6
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	dc06      	bgt.n	8007b4a <__sflush_r+0xfe>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b48:	e78e      	b.n	8007a68 <__sflush_r+0x1c>
 8007b4a:	4407      	add	r7, r0
 8007b4c:	eba8 0800 	sub.w	r8, r8, r0
 8007b50:	e7e9      	b.n	8007b26 <__sflush_r+0xda>
 8007b52:	bf00      	nop
 8007b54:	20400001 	.word	0x20400001

08007b58 <_fflush_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	690b      	ldr	r3, [r1, #16]
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	b1db      	cbz	r3, 8007b9a <_fflush_r+0x42>
 8007b62:	b118      	cbz	r0, 8007b6c <_fflush_r+0x14>
 8007b64:	6983      	ldr	r3, [r0, #24]
 8007b66:	b90b      	cbnz	r3, 8007b6c <_fflush_r+0x14>
 8007b68:	f7ff fac2 	bl	80070f0 <__sinit>
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <_fflush_r+0x48>)
 8007b6e:	429c      	cmp	r4, r3
 8007b70:	d109      	bne.n	8007b86 <_fflush_r+0x2e>
 8007b72:	686c      	ldr	r4, [r5, #4]
 8007b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b78:	b17b      	cbz	r3, 8007b9a <_fflush_r+0x42>
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b82:	f7ff bf63 	b.w	8007a4c <__sflush_r>
 8007b86:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <_fflush_r+0x4c>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	d101      	bne.n	8007b90 <_fflush_r+0x38>
 8007b8c:	68ac      	ldr	r4, [r5, #8]
 8007b8e:	e7f1      	b.n	8007b74 <_fflush_r+0x1c>
 8007b90:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <_fflush_r+0x50>)
 8007b92:	429c      	cmp	r4, r3
 8007b94:	bf08      	it	eq
 8007b96:	68ec      	ldreq	r4, [r5, #12]
 8007b98:	e7ec      	b.n	8007b74 <_fflush_r+0x1c>
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	bd38      	pop	{r3, r4, r5, pc}
 8007b9e:	bf00      	nop
 8007ba0:	08007f78 	.word	0x08007f78
 8007ba4:	08007f98 	.word	0x08007f98
 8007ba8:	08007f58 	.word	0x08007f58

08007bac <_lseek_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4605      	mov	r5, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	4c05      	ldr	r4, [pc, #20]	; (8007bcc <_lseek_r+0x20>)
 8007bb8:	6022      	str	r2, [r4, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f7f9 fb36 	bl	800122c <_lseek>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_lseek_r+0x1e>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_lseek_r+0x1e>
 8007bc8:	602b      	str	r3, [r5, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	20000c24 	.word	0x20000c24

08007bd0 <__swhatbuf_r>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	460e      	mov	r6, r1
 8007bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd8:	b096      	sub	sp, #88	; 0x58
 8007bda:	2900      	cmp	r1, #0
 8007bdc:	4614      	mov	r4, r2
 8007bde:	461d      	mov	r5, r3
 8007be0:	da07      	bge.n	8007bf2 <__swhatbuf_r+0x22>
 8007be2:	2300      	movs	r3, #0
 8007be4:	602b      	str	r3, [r5, #0]
 8007be6:	89b3      	ldrh	r3, [r6, #12]
 8007be8:	061a      	lsls	r2, r3, #24
 8007bea:	d410      	bmi.n	8007c0e <__swhatbuf_r+0x3e>
 8007bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bf0:	e00e      	b.n	8007c10 <__swhatbuf_r+0x40>
 8007bf2:	466a      	mov	r2, sp
 8007bf4:	f000 f870 	bl	8007cd8 <_fstat_r>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	dbf2      	blt.n	8007be2 <__swhatbuf_r+0x12>
 8007bfc:	9a01      	ldr	r2, [sp, #4]
 8007bfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c06:	425a      	negs	r2, r3
 8007c08:	415a      	adcs	r2, r3
 8007c0a:	602a      	str	r2, [r5, #0]
 8007c0c:	e7ee      	b.n	8007bec <__swhatbuf_r+0x1c>
 8007c0e:	2340      	movs	r3, #64	; 0x40
 8007c10:	2000      	movs	r0, #0
 8007c12:	6023      	str	r3, [r4, #0]
 8007c14:	b016      	add	sp, #88	; 0x58
 8007c16:	bd70      	pop	{r4, r5, r6, pc}

08007c18 <__smakebuf_r>:
 8007c18:	898b      	ldrh	r3, [r1, #12]
 8007c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c1c:	079d      	lsls	r5, r3, #30
 8007c1e:	4606      	mov	r6, r0
 8007c20:	460c      	mov	r4, r1
 8007c22:	d507      	bpl.n	8007c34 <__smakebuf_r+0x1c>
 8007c24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	6123      	str	r3, [r4, #16]
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	6163      	str	r3, [r4, #20]
 8007c30:	b002      	add	sp, #8
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	ab01      	add	r3, sp, #4
 8007c36:	466a      	mov	r2, sp
 8007c38:	f7ff ffca 	bl	8007bd0 <__swhatbuf_r>
 8007c3c:	9900      	ldr	r1, [sp, #0]
 8007c3e:	4605      	mov	r5, r0
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7ff f969 	bl	8006f18 <_malloc_r>
 8007c46:	b948      	cbnz	r0, 8007c5c <__smakebuf_r+0x44>
 8007c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4c:	059a      	lsls	r2, r3, #22
 8007c4e:	d4ef      	bmi.n	8007c30 <__smakebuf_r+0x18>
 8007c50:	f023 0303 	bic.w	r3, r3, #3
 8007c54:	f043 0302 	orr.w	r3, r3, #2
 8007c58:	81a3      	strh	r3, [r4, #12]
 8007c5a:	e7e3      	b.n	8007c24 <__smakebuf_r+0xc>
 8007c5c:	4b0d      	ldr	r3, [pc, #52]	; (8007c94 <__smakebuf_r+0x7c>)
 8007c5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	6020      	str	r0, [r4, #0]
 8007c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c68:	81a3      	strh	r3, [r4, #12]
 8007c6a:	9b00      	ldr	r3, [sp, #0]
 8007c6c:	6120      	str	r0, [r4, #16]
 8007c6e:	6163      	str	r3, [r4, #20]
 8007c70:	9b01      	ldr	r3, [sp, #4]
 8007c72:	b15b      	cbz	r3, 8007c8c <__smakebuf_r+0x74>
 8007c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f000 f83f 	bl	8007cfc <_isatty_r>
 8007c7e:	b128      	cbz	r0, 8007c8c <__smakebuf_r+0x74>
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	f023 0303 	bic.w	r3, r3, #3
 8007c86:	f043 0301 	orr.w	r3, r3, #1
 8007c8a:	81a3      	strh	r3, [r4, #12]
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	431d      	orrs	r5, r3
 8007c90:	81a5      	strh	r5, [r4, #12]
 8007c92:	e7cd      	b.n	8007c30 <__smakebuf_r+0x18>
 8007c94:	080070b9 	.word	0x080070b9

08007c98 <memchr>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	b2c9      	uxtb	r1, r1
 8007c9c:	4402      	add	r2, r0
 8007c9e:	4290      	cmp	r0, r2
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	d101      	bne.n	8007ca8 <memchr+0x10>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e003      	b.n	8007cb0 <memchr+0x18>
 8007ca8:	781c      	ldrb	r4, [r3, #0]
 8007caa:	3001      	adds	r0, #1
 8007cac:	428c      	cmp	r4, r1
 8007cae:	d1f6      	bne.n	8007c9e <memchr+0x6>
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	bd10      	pop	{r4, pc}

08007cb4 <_read_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4c05      	ldr	r4, [pc, #20]	; (8007cd4 <_read_r+0x20>)
 8007cc0:	6022      	str	r2, [r4, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f7f9 fa55 	bl	8001172 <_read>
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	d102      	bne.n	8007cd2 <_read_r+0x1e>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	b103      	cbz	r3, 8007cd2 <_read_r+0x1e>
 8007cd0:	602b      	str	r3, [r5, #0]
 8007cd2:	bd38      	pop	{r3, r4, r5, pc}
 8007cd4:	20000c24 	.word	0x20000c24

08007cd8 <_fstat_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4c06      	ldr	r4, [pc, #24]	; (8007cf8 <_fstat_r+0x20>)
 8007cde:	4605      	mov	r5, r0
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	f7f9 fa88 	bl	80011fa <_fstat>
 8007cea:	1c43      	adds	r3, r0, #1
 8007cec:	d102      	bne.n	8007cf4 <_fstat_r+0x1c>
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	b103      	cbz	r3, 8007cf4 <_fstat_r+0x1c>
 8007cf2:	602b      	str	r3, [r5, #0]
 8007cf4:	bd38      	pop	{r3, r4, r5, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000c24 	.word	0x20000c24

08007cfc <_isatty_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4c05      	ldr	r4, [pc, #20]	; (8007d18 <_isatty_r+0x1c>)
 8007d02:	4605      	mov	r5, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	f7f9 fa86 	bl	8001218 <_isatty>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_isatty_r+0x1a>
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_isatty_r+0x1a>
 8007d14:	602b      	str	r3, [r5, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	20000c24 	.word	0x20000c24

08007d1c <_init>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	bf00      	nop
 8007d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d22:	bc08      	pop	{r3}
 8007d24:	469e      	mov	lr, r3
 8007d26:	4770      	bx	lr

08007d28 <_fini>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr
