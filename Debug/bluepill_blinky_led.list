
bluepill_blinky_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003294  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034a8  080034a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034a8  080034a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034a8  080034a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034a8  080034a8  000134a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000070  08003520  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08003520  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec23  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000232b  00000000  00000000  0002ecbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  00030fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  00031d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016209  00000000  00000000  00032900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7ed  00000000  00000000  00048b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072a99  00000000  00000000  000532f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5d8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d78  00000000  00000000  000c5e0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003388 	.word	0x08003388

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003388 	.word	0x08003388

0800014c <rtc_get_time_usec>:
 *  Created on: Mar 25, 2020
 *      Author: felix
 */
#include "debug_log.h"

uint32_t rtc_get_time_usec(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint32_t tick = HAL_GetTick();
 8000152:	f000 fdb7 	bl	8000cc4 <HAL_GetTick>
 8000156:	6078      	str	r0, [r7, #4]
	return tick;
 8000158:	687b      	ldr	r3, [r7, #4]
}
 800015a:	4618      	mov	r0, r3
 800015c:	3708      	adds	r7, #8
 800015e:	46bd      	mov	sp, r7
 8000160:	bd80      	pop	{r7, pc}
	...

08000164 <debug_log>:

void debug_log(char *msg, ...)
{
 8000164:	b40f      	push	{r0, r1, r2, r3}
 8000166:	b580      	push	{r7, lr}
 8000168:	b082      	sub	sp, #8
 800016a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, msg);
 800016c:	f107 0314 	add.w	r3, r7, #20
 8000170:	603b      	str	r3, [r7, #0]

    int time = rtc_get_time_usec();
 8000172:	f7ff ffeb 	bl	800014c <rtc_get_time_usec>
 8000176:	4603      	mov	r3, r0
 8000178:	607b      	str	r3, [r7, #4]
    printf("%d.%03d: ", time / 1000, time % 1000);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	4a11      	ldr	r2, [pc, #68]	; (80001c4 <debug_log+0x60>)
 800017e:	fb82 1203 	smull	r1, r2, r2, r3
 8000182:	1192      	asrs	r2, r2, #6
 8000184:	17db      	asrs	r3, r3, #31
 8000186:	1ad0      	subs	r0, r2, r3
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4a0e      	ldr	r2, [pc, #56]	; (80001c4 <debug_log+0x60>)
 800018c:	fb82 1203 	smull	r1, r2, r2, r3
 8000190:	1191      	asrs	r1, r2, #6
 8000192:	17da      	asrs	r2, r3, #31
 8000194:	1a8a      	subs	r2, r1, r2
 8000196:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800019a:	fb01 f202 	mul.w	r2, r1, r2
 800019e:	1a9a      	subs	r2, r3, r2
 80001a0:	4601      	mov	r1, r0
 80001a2:	4809      	ldr	r0, [pc, #36]	; (80001c8 <debug_log+0x64>)
 80001a4:	f002 fa48 	bl	8002638 <iprintf>
    vprintf(msg, args);
 80001a8:	6839      	ldr	r1, [r7, #0]
 80001aa:	6938      	ldr	r0, [r7, #16]
 80001ac:	f002 fa80 	bl	80026b0 <viprintf>
    printf("\n");
 80001b0:	200a      	movs	r0, #10
 80001b2:	f002 fa59 	bl	8002668 <putchar>
}
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr
 80001c4:	10624dd3 	.word	0x10624dd3
 80001c8:	080033a0 	.word	0x080033a0

080001cc <initializeLEDApplication>:
led_pattern_queue_t Bus1_LEDStripeQueue = { };
led_pattern_queue_t Bus2_LEDStripeQueue = { };
uint32_t notif;

void initializeLEDApplication(TIM_HandleTypeDef *htim1,
		TIM_HandleTypeDef *htim2) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	6039      	str	r1, [r7, #0]
	Bus1_LEDStripeQueue.head = NULL;
 80001d6:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <initializeLEDApplication+0x34>)
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
	Bus2_LEDStripeQueue.head = NULL;
 80001dc:	4b09      	ldr	r3, [pc, #36]	; (8000204 <initializeLEDApplication+0x38>)
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]

	memcpy(&bus1_timer, htim1, sizeof(TIM_HandleTypeDef));
 80001e2:	2240      	movs	r2, #64	; 0x40
 80001e4:	6879      	ldr	r1, [r7, #4]
 80001e6:	4808      	ldr	r0, [pc, #32]	; (8000208 <initializeLEDApplication+0x3c>)
 80001e8:	f002 f96c 	bl	80024c4 <memcpy>
	memcpy(&bus2_timer, htim2, sizeof(TIM_HandleTypeDef));
 80001ec:	2240      	movs	r2, #64	; 0x40
 80001ee:	6839      	ldr	r1, [r7, #0]
 80001f0:	4806      	ldr	r0, [pc, #24]	; (800020c <initializeLEDApplication+0x40>)
 80001f2:	f002 f967 	bl	80024c4 <memcpy>
}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	2000008c 	.word	0x2000008c
 8000204:	20000094 	.word	0x20000094
 8000208:	20000100 	.word	0x20000100
 800020c:	20000140 	.word	0x20000140

08000210 <HAL_TIM_PeriodElapsedCallback>:
//			bus_2);

}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	if (htim->Instance == LED_BUS1_TIMER) {
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000220:	d103      	bne.n	800022a <HAL_TIM_PeriodElapsedCallback+0x1a>
		debug_log("LED_BUS1_TIMER");
 8000222:	4809      	ldr	r0, [pc, #36]	; (8000248 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000224:	f7ff ff9e 	bl	8000164 <debug_log>
 8000228:	e007      	b.n	800023a <HAL_TIM_PeriodElapsedCallback+0x2a>
	} else if (htim->Instance == LED_BUS2_TIMER) {
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d102      	bne.n	800023a <HAL_TIM_PeriodElapsedCallback+0x2a>
		debug_log("LED_BUS2_TIMER");
 8000234:	4806      	ldr	r0, [pc, #24]	; (8000250 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000236:	f7ff ff95 	bl	8000164 <debug_log>
	}
	notif = 1;
 800023a:	4b06      	ldr	r3, [pc, #24]	; (8000254 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	bf00      	nop
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	080033ac 	.word	0x080033ac
 800024c:	40000400 	.word	0x40000400
 8000250:	080033bc 	.word	0x080033bc
 8000254:	2000021c 	.word	0x2000021c

08000258 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800025c:	f000 fcda 	bl	8000c14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000260:	f000 f840 	bl	80002e4 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	debug_log("Q-loud LEDController Init ...");
 8000264:	4819      	ldr	r0, [pc, #100]	; (80002cc <main+0x74>)
 8000266:	f7ff ff7d 	bl	8000164 <debug_log>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800026a:	f000 f9ad 	bl	80005c8 <MX_GPIO_Init>
	MX_DMA_Init();
 800026e:	f000 f985 	bl	800057c <MX_DMA_Init>
	MX_SPI2_Init();
 8000272:	f000 f8af 	bl	80003d4 <MX_SPI2_Init>
	MX_SPI1_Init();
 8000276:	f000 f877 	bl	8000368 <MX_SPI1_Init>
	MX_TIM2_Init();
 800027a:	f000 f8e1 	bl	8000440 <MX_TIM2_Init>
	MX_TIM3_Init();
 800027e:	f000 f92f 	bl	80004e0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000288:	4811      	ldr	r0, [pc, #68]	; (80002d0 <main+0x78>)
 800028a:	f001 f90f 	bl	80014ac <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800028e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000292:	f000 fd21 	bl	8000cd8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <main+0x78>)
 800029e:	f001 f905 	bl	80014ac <HAL_GPIO_WritePin>
	initializeSPIAdapter(&hspi1, &hspi2);
 80002a2:	490c      	ldr	r1, [pc, #48]	; (80002d4 <main+0x7c>)
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <main+0x80>)
 80002a6:	f000 f9ed 	bl	8000684 <initializeSPIAdapter>
	initializeLEDApplication(&htim2, &htim3);
 80002aa:	490c      	ldr	r1, [pc, #48]	; (80002dc <main+0x84>)
 80002ac:	480c      	ldr	r0, [pc, #48]	; (80002e0 <main+0x88>)
 80002ae:	f7ff ff8d 	bl	80001cc <initializeLEDApplication>
	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <main+0x84>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f06f 0201 	mvn.w	r2, #1
 80002ba:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim3);
 80002bc:	4807      	ldr	r0, [pc, #28]	; (80002dc <main+0x84>)
 80002be:	f001 fd83 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//test_run();
		HAL_Delay(1000);
 80002c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c6:	f000 fd07 	bl	8000cd8 <HAL_Delay>
 80002ca:	e7fa      	b.n	80002c2 <main+0x6a>
 80002cc:	080033cc 	.word	0x080033cc
 80002d0:	40011000 	.word	0x40011000
 80002d4:	20000220 	.word	0x20000220
 80002d8:	200002b8 	.word	0x200002b8
 80002dc:	20000278 	.word	0x20000278
 80002e0:	20000310 	.word	0x20000310

080002e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b090      	sub	sp, #64	; 0x40
 80002e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	2228      	movs	r2, #40	; 0x28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f002 f8f1 	bl	80024da <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000306:	2302      	movs	r3, #2
 8000308:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	2310      	movs	r3, #16
 8000310:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000316:	2300      	movs	r3, #0
 8000318:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800031a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800031e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000320:	f107 0318 	add.w	r3, r7, #24
 8000324:	4618      	mov	r0, r3
 8000326:	f001 f8d9 	bl	80014dc <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x50>
		Error_Handler();
 8000330:	f000 f9a2 	bl	8000678 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	2302      	movs	r3, #2
 800033a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000344:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2102      	movs	r1, #2
 800034e:	4618      	mov	r0, r3
 8000350:	f001 fb44 	bl	80019dc <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x7a>
		Error_Handler();
 800035a:	f000 f98d 	bl	8000678 <Error_Handler>
	}
}
 800035e:	bf00      	nop
 8000360:	3740      	adds	r7, #64	; 0x40
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800036c:	4b17      	ldr	r3, [pc, #92]	; (80003cc <MX_SPI1_Init+0x64>)
 800036e:	4a18      	ldr	r2, [pc, #96]	; (80003d0 <MX_SPI1_Init+0x68>)
 8000370:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000372:	4b16      	ldr	r3, [pc, #88]	; (80003cc <MX_SPI1_Init+0x64>)
 8000374:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000378:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_SPI1_Init+0x64>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_SPI1_Init+0x64>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_SPI1_Init+0x64>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_SPI1_Init+0x64>)
 800038e:	2200      	movs	r2, #0
 8000390:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_SPI1_Init+0x64>)
 8000394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000398:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_SPI1_Init+0x64>)
 800039c:	2210      	movs	r2, #16
 800039e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <MX_SPI1_Init+0x64>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_SPI1_Init+0x64>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <MX_SPI1_Init+0x64>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_SPI1_Init+0x64>)
 80003b4:	220a      	movs	r2, #10
 80003b6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <MX_SPI1_Init+0x64>)
 80003ba:	f001 fc79 	bl	8001cb0 <HAL_SPI_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80003c4:	f000 f958 	bl	8000678 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	200002b8 	.word	0x200002b8
 80003d0:	40013000 	.word	0x40013000

080003d4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <MX_SPI2_Init+0x64>)
 80003da:	4a18      	ldr	r2, [pc, #96]	; (800043c <MX_SPI2_Init+0x68>)
 80003dc:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80003de:	4b16      	ldr	r3, [pc, #88]	; (8000438 <MX_SPI2_Init+0x64>)
 80003e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003e4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003e6:	4b14      	ldr	r3, [pc, #80]	; (8000438 <MX_SPI2_Init+0x64>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <MX_SPI2_Init+0x64>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003f2:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_SPI2_Init+0x64>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_SPI2_Init+0x64>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_SPI2_Init+0x64>)
 8000400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000404:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_SPI2_Init+0x64>)
 8000408:	2208      	movs	r2, #8
 800040a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <MX_SPI2_Init+0x64>)
 800040e:	2200      	movs	r2, #0
 8000410:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_SPI2_Init+0x64>)
 8000414:	2200      	movs	r2, #0
 8000416:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <MX_SPI2_Init+0x64>)
 800041a:	2200      	movs	r2, #0
 800041c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_SPI2_Init+0x64>)
 8000420:	220a      	movs	r2, #10
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000424:	4804      	ldr	r0, [pc, #16]	; (8000438 <MX_SPI2_Init+0x64>)
 8000426:	f001 fc43 	bl	8001cb0 <HAL_SPI_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000430:	f000 f922 	bl	8000678 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000220 	.word	0x20000220
 800043c:	40003800 	.word	0x40003800

08000440 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000446:	f107 0308 	add.w	r3, r7, #8
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000454:	463b      	mov	r3, r7
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */
	htim2.Init.RepetitionCounter = 1;
 800045c:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <MX_TIM2_Init+0x9c>)
 800045e:	2201      	movs	r2, #1
 8000460:	615a      	str	r2, [r3, #20]
	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000462:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <MX_TIM2_Init+0x9c>)
 8000464:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000468:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 64000;
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <MX_TIM2_Init+0x9c>)
 800046c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000470:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <MX_TIM2_Init+0x9c>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3000;
 8000478:	4b18      	ldr	r3, [pc, #96]	; (80004dc <MX_TIM2_Init+0x9c>)
 800047a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800047e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <MX_TIM2_Init+0x9c>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <MX_TIM2_Init+0x9c>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800048c:	4813      	ldr	r0, [pc, #76]	; (80004dc <MX_TIM2_Init+0x9c>)
 800048e:	f001 fc70 	bl	8001d72 <HAL_TIM_Base_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM2_Init+0x5c>
		Error_Handler();
 8000498:	f000 f8ee 	bl	8000678 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80004a2:	f107 0308 	add.w	r3, r7, #8
 80004a6:	4619      	mov	r1, r3
 80004a8:	480c      	ldr	r0, [pc, #48]	; (80004dc <MX_TIM2_Init+0x9c>)
 80004aa:	f001 fdb8 	bl	800201e <HAL_TIM_ConfigClockSource>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM2_Init+0x78>
		Error_Handler();
 80004b4:	f000 f8e0 	bl	8000678 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b8:	2300      	movs	r3, #0
 80004ba:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80004c0:	463b      	mov	r3, r7
 80004c2:	4619      	mov	r1, r3
 80004c4:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_TIM2_Init+0x9c>)
 80004c6:	f001 ff7d 	bl	80023c4 <HAL_TIMEx_MasterConfigSynchronization>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM2_Init+0x94>
			!= HAL_OK) {
		Error_Handler();
 80004d0:	f000 f8d2 	bl	8000678 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	3718      	adds	r7, #24
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000310 	.word	0x20000310

080004e0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <MX_TIM3_Init+0x94>)
 80004fe:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <MX_TIM3_Init+0x98>)
 8000500:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 64000;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_TIM3_Init+0x94>)
 8000504:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000508:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_TIM3_Init+0x94>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3000;
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_TIM3_Init+0x94>)
 8000512:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000516:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000518:	4b16      	ldr	r3, [pc, #88]	; (8000574 <MX_TIM3_Init+0x94>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_TIM3_Init+0x94>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000524:	4813      	ldr	r0, [pc, #76]	; (8000574 <MX_TIM3_Init+0x94>)
 8000526:	f001 fc24 	bl	8001d72 <HAL_TIM_Base_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM3_Init+0x54>
		Error_Handler();
 8000530:	f000 f8a2 	bl	8000678 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000538:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	4619      	mov	r1, r3
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <MX_TIM3_Init+0x94>)
 8000542:	f001 fd6c 	bl	800201e <HAL_TIM_ConfigClockSource>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM3_Init+0x70>
		Error_Handler();
 800054c:	f000 f894 	bl	8000678 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_TIM3_Init+0x94>)
 800055e:	f001 ff31 	bl	80023c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000568:	f000 f886 	bl	8000678 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000278 	.word	0x20000278
 8000578:	40000400 	.word	0x40000400

0800057c <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <MX_DMA_Init+0x48>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a0f      	ldr	r2, [pc, #60]	; (80005c4 <MX_DMA_Init+0x48>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <MX_DMA_Init+0x48>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	200d      	movs	r0, #13
 80005a0:	f000 fc93 	bl	8000eca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80005a4:	200d      	movs	r0, #13
 80005a6:	f000 fcac 	bl	8000f02 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	200f      	movs	r0, #15
 80005b0:	f000 fc8b 	bl	8000eca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005b4:	200f      	movs	r0, #15
 80005b6:	f000 fca4 	bl	8000f02 <HAL_NVIC_EnableIRQ>

}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <MX_GPIO_Init+0xa8>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a23      	ldr	r2, [pc, #140]	; (8000670 <MX_GPIO_Init+0xa8>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_GPIO_Init+0xa8>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0310 	and.w	r3, r3, #16
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_GPIO_Init+0xa8>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a1d      	ldr	r2, [pc, #116]	; (8000670 <MX_GPIO_Init+0xa8>)
 80005fa:	f043 0320 	orr.w	r3, r3, #32
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_GPIO_Init+0xa8>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0320 	and.w	r3, r3, #32
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_GPIO_Init+0xa8>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a17      	ldr	r2, [pc, #92]	; (8000670 <MX_GPIO_Init+0xa8>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_GPIO_Init+0xa8>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_GPIO_Init+0xa8>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a11      	ldr	r2, [pc, #68]	; (8000670 <MX_GPIO_Init+0xa8>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_GPIO_Init+0xa8>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_GPIO_Init+0xac>)
 8000644:	f000 ff32 	bl	80014ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800064c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2302      	movs	r3, #2
 8000658:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4619      	mov	r1, r3
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_GPIO_Init+0xac>)
 8000662:	f000 fdc9 	bl	80011f8 <HAL_GPIO_Init>

}
 8000666:	bf00      	nop
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000
 8000674:	40011000 	.word	0x40011000

08000678 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <initializeSPIAdapter>:
#include "sk6812_rgbw.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void initializeSPIAdapter(SPI_HandleTypeDef *hspi_1, SPI_HandleTypeDef *hspi_2) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	memcpy(&bus1, hspi_1, sizeof(SPI_HandleTypeDef));
 800068e:	2258      	movs	r2, #88	; 0x58
 8000690:	6879      	ldr	r1, [r7, #4]
 8000692:	4809      	ldr	r0, [pc, #36]	; (80006b8 <initializeSPIAdapter+0x34>)
 8000694:	f001 ff16 	bl	80024c4 <memcpy>
	memcpy(&bus2, hspi_2, sizeof(SPI_HandleTypeDef));
 8000698:	2258      	movs	r2, #88	; 0x58
 800069a:	6839      	ldr	r1, [r7, #0]
 800069c:	4807      	ldr	r0, [pc, #28]	; (80006bc <initializeSPIAdapter+0x38>)
 800069e:	f001 ff11 	bl	80024c4 <memcpy>

	HAL_SPI_MspInit(&bus1);
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <initializeSPIAdapter+0x34>)
 80006a4:	f000 f83e 	bl	8000724 <HAL_SPI_MspInit>
	HAL_SPI_MspInit(&bus2);
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <initializeSPIAdapter+0x38>)
 80006aa:	f000 f83b 	bl	8000724 <HAL_SPI_MspInit>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200001c4 	.word	0x200001c4
 80006bc:	200000a8 	.word	0x200000a8

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_MspInit+0x5c>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	4a14      	ldr	r2, [pc, #80]	; (800071c <HAL_MspInit+0x5c>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_MspInit+0x5c>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_MspInit+0x5c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_MspInit+0x5c>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_MspInit+0x5c>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_MspInit+0x60>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <HAL_MspInit+0x60>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	40021000 	.word	0x40021000
 8000720:	40010000 	.word	0x40010000

08000724 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0318 	add.w	r3, r7, #24
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a52      	ldr	r2, [pc, #328]	; (8000888 <HAL_SPI_MspInit+0x164>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d14b      	bne.n	80007dc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000744:	4b51      	ldr	r3, [pc, #324]	; (800088c <HAL_SPI_MspInit+0x168>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a50      	ldr	r2, [pc, #320]	; (800088c <HAL_SPI_MspInit+0x168>)
 800074a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b4e      	ldr	r3, [pc, #312]	; (800088c <HAL_SPI_MspInit+0x168>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b4b      	ldr	r3, [pc, #300]	; (800088c <HAL_SPI_MspInit+0x168>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a4a      	ldr	r2, [pc, #296]	; (800088c <HAL_SPI_MspInit+0x168>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b48      	ldr	r3, [pc, #288]	; (800088c <HAL_SPI_MspInit+0x168>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0304 	and.w	r3, r3, #4
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000774:	23a0      	movs	r3, #160	; 0xa0
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0318 	add.w	r3, r7, #24
 8000784:	4619      	mov	r1, r3
 8000786:	4842      	ldr	r0, [pc, #264]	; (8000890 <HAL_SPI_MspInit+0x16c>)
 8000788:	f000 fd36 	bl	80011f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800078c:	4b41      	ldr	r3, [pc, #260]	; (8000894 <HAL_SPI_MspInit+0x170>)
 800078e:	4a42      	ldr	r2, [pc, #264]	; (8000898 <HAL_SPI_MspInit+0x174>)
 8000790:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000792:	4b40      	ldr	r3, [pc, #256]	; (8000894 <HAL_SPI_MspInit+0x170>)
 8000794:	2210      	movs	r2, #16
 8000796:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000798:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <HAL_SPI_MspInit+0x170>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <HAL_SPI_MspInit+0x170>)
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007a4:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <HAL_SPI_MspInit+0x170>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007aa:	4b3a      	ldr	r3, [pc, #232]	; (8000894 <HAL_SPI_MspInit+0x170>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80007b0:	4b38      	ldr	r3, [pc, #224]	; (8000894 <HAL_SPI_MspInit+0x170>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80007b6:	4b37      	ldr	r3, [pc, #220]	; (8000894 <HAL_SPI_MspInit+0x170>)
 80007b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80007be:	4835      	ldr	r0, [pc, #212]	; (8000894 <HAL_SPI_MspInit+0x170>)
 80007c0:	f000 fbba 	bl	8000f38 <HAL_DMA_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 80007ca:	f7ff ff55 	bl	8000678 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a30      	ldr	r2, [pc, #192]	; (8000894 <HAL_SPI_MspInit+0x170>)
 80007d2:	649a      	str	r2, [r3, #72]	; 0x48
 80007d4:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <HAL_SPI_MspInit+0x170>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007da:	e050      	b.n	800087e <HAL_SPI_MspInit+0x15a>
  else if(hspi->Instance==SPI2)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a2e      	ldr	r2, [pc, #184]	; (800089c <HAL_SPI_MspInit+0x178>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d14b      	bne.n	800087e <HAL_SPI_MspInit+0x15a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <HAL_SPI_MspInit+0x168>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	4a28      	ldr	r2, [pc, #160]	; (800088c <HAL_SPI_MspInit+0x168>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	61d3      	str	r3, [r2, #28]
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <HAL_SPI_MspInit+0x168>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <HAL_SPI_MspInit+0x168>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <HAL_SPI_MspInit+0x168>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6193      	str	r3, [r2, #24]
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <HAL_SPI_MspInit+0x168>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000816:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800081a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	4619      	mov	r1, r3
 800082a:	481d      	ldr	r0, [pc, #116]	; (80008a0 <HAL_SPI_MspInit+0x17c>)
 800082c:	f000 fce4 	bl	80011f8 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_SPI_MspInit+0x180>)
 8000832:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <HAL_SPI_MspInit+0x184>)
 8000834:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <HAL_SPI_MspInit+0x180>)
 8000838:	2210      	movs	r2, #16
 800083a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HAL_SPI_MspInit+0x180>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_SPI_MspInit+0x180>)
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_SPI_MspInit+0x180>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_SPI_MspInit+0x180>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <HAL_SPI_MspInit+0x180>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_SPI_MspInit+0x180>)
 800085c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000860:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000862:	4810      	ldr	r0, [pc, #64]	; (80008a4 <HAL_SPI_MspInit+0x180>)
 8000864:	f000 fb68 	bl	8000f38 <HAL_DMA_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_SPI_MspInit+0x14e>
      Error_Handler();
 800086e:	f7ff ff03 	bl	8000678 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <HAL_SPI_MspInit+0x180>)
 8000876:	649a      	str	r2, [r3, #72]	; 0x48
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_SPI_MspInit+0x180>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40013000 	.word	0x40013000
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800
 8000894:	20000394 	.word	0x20000394
 8000898:	40020030 	.word	0x40020030
 800089c:	40003800 	.word	0x40003800
 80008a0:	40010c00 	.word	0x40010c00
 80008a4:	20000350 	.word	0x20000350
 80008a8:	40020058 	.word	0x40020058

080008ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008bc:	d114      	bne.n	80008e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_TIM_Base_MspInit+0x78>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <HAL_TIM_Base_MspInit+0x78>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_TIM_Base_MspInit+0x78>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	201c      	movs	r0, #28
 80008dc:	f000 faf5 	bl	8000eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008e0:	201c      	movs	r0, #28
 80008e2:	f000 fb0e 	bl	8000f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008e6:	e018      	b.n	800091a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_TIM_Base_MspInit+0x7c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d113      	bne.n	800091a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_TIM_Base_MspInit+0x78>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <HAL_TIM_Base_MspInit+0x78>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	61d3      	str	r3, [r2, #28]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_TIM_Base_MspInit+0x78>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	201d      	movs	r0, #29
 8000910:	f000 fadb 	bl	8000eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000914:	201d      	movs	r0, #29
 8000916:	f000 faf4 	bl	8000f02 <HAL_NVIC_EnableIRQ>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000
 8000928:	40000400 	.word	0x40000400

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <HardFault_Handler+0x4>

0800093e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <MemManage_Handler+0x4>

08000944 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <BusFault_Handler+0x4>

0800094a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f992 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <DMA1_Channel3_IRQHandler+0x10>)
 8000986:	f000 fb31 	bl	8000fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000394 	.word	0x20000394

08000994 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <DMA1_Channel5_IRQHandler+0x10>)
 800099a:	f000 fb27 	bl	8000fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000350 	.word	0x20000350

080009a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <TIM2_IRQHandler+0x10>)
 80009ae:	f001 fa2e 	bl	8001e0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000310 	.word	0x20000310

080009bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <TIM3_IRQHandler+0x10>)
 80009c2:	f001 fa24 	bl	8001e0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000278 	.word	0x20000278

080009d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d013      	beq.n	8000a10 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80009f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00b      	beq.n	8000a10 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009f8:	e000      	b.n	80009fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80009fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f9      	beq.n	80009fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a06:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <__io_putchar>:
char **environ = __env;

/* Functions */
#include "stdio.h"
int __io_putchar(int ch)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 ITM_SendChar(ch);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ffd2 	bl	80009d0 <ITM_SendChar>
 return(ch);
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	e00a      	b.n	8000a5e <_read+0x28>
		*ptr++ = __io_getchar();
 8000a48:	f3af 8000 	nop.w
 8000a4c:	4601      	mov	r1, r0
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	60ba      	str	r2, [r7, #8]
 8000a54:	b2ca      	uxtb	r2, r1
 8000a56:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	697a      	ldr	r2, [r7, #20]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	dbf0      	blt.n	8000a48 <_read+0x12>
	}

	return len;
 8000a66:	687b      	ldr	r3, [r7, #4]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e009      	b.n	8000a96 <_write+0x26>
		__io_putchar(*ptr++);
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	60ba      	str	r2, [r7, #8]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ffc6 	bl	8000a1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3301      	adds	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	dbf1      	blt.n	8000a82 <_write+0x12>
	}
	return len;
 8000a9e:	687b      	ldr	r3, [r7, #4]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_close>:

int _close(int file) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	return -1;
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <_fstat>:

int _fstat(int file, struct stat *st) {
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ace:	605a      	str	r2, [r3, #4]
	return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <_isatty>:

int _isatty(int file) {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	return 1;
 8000ae4:	2301      	movs	r3, #1
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <_sbrk+0x50>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x16>
		heap_end = &end;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <_sbrk+0x50>)
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <_sbrk+0x54>)
 8000b1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <_sbrk+0x50>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <_sbrk+0x50>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	466a      	mov	r2, sp
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d907      	bls.n	8000b42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b32:	f001 fc9d 	bl	8002470 <__errno>
 8000b36:	4602      	mov	r2, r0
 8000b38:	230c      	movs	r3, #12
 8000b3a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b40:	e006      	b.n	8000b50 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <_sbrk+0x50>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a03      	ldr	r2, [pc, #12]	; (8000b58 <_sbrk+0x50>)
 8000b4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000009c 	.word	0x2000009c
 8000b5c:	200003e0 	.word	0x200003e0

08000b60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <SystemInit+0x5c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <SystemInit+0x5c>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <SystemInit+0x5c>)
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	4911      	ldr	r1, [pc, #68]	; (8000bbc <SystemInit+0x5c>)
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <SystemInit+0x60>)
 8000b78:	4013      	ands	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <SystemInit+0x5c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <SystemInit+0x5c>)
 8000b82:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b8a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <SystemInit+0x5c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SystemInit+0x5c>)
 8000b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b96:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <SystemInit+0x5c>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <SystemInit+0x5c>)
 8000b9e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ba2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SystemInit+0x5c>)
 8000ba6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000baa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <SystemInit+0x64>)
 8000bae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bb2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	f8ff0000 	.word	0xf8ff0000
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bca:	e003      	b.n	8000bd4 <LoopCopyDataInit>

08000bcc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bd2:	3104      	adds	r1, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bd4:	480a      	ldr	r0, [pc, #40]	; (8000c00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bdc:	d3f6      	bcc.n	8000bcc <CopyDataInit>
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000be0:	e002      	b.n	8000be8 <LoopFillZerobss>

08000be2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000be4:	f842 3b04 	str.w	r3, [r2], #4

08000be8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bec:	d3f9      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bee:	f7ff ffb7 	bl	8000b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f001 fc43 	bl	800247c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf6:	f7ff fb2f 	bl	8000258 <main>
  bx lr
 8000bfa:	4770      	bx	lr
  ldr r3, =_sidata
 8000bfc:	080034b0 	.word	0x080034b0
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c04:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000c08:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000c0c:	200003e0 	.word	0x200003e0

08000c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_2_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_Init+0x28>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_Init+0x28>)
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 f945 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f808 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c30:	f7ff fd46 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40022000 	.word	0x40022000

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x54>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x58>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f95d 	bl	8000f1e <HAL_SYSTICK_Config>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00e      	b.n	8000c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d80a      	bhi.n	8000c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 f925 	bl	8000eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_InitTick+0x5c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e000      	b.n	8000c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000004 	.word	0x20000004

08000ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <HAL_IncTick+0x1c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_IncTick+0x20>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a03      	ldr	r2, [pc, #12]	; (8000cc0 <HAL_IncTick+0x20>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	200003d8 	.word	0x200003d8

08000cc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b02      	ldr	r3, [pc, #8]	; (8000cd4 <HAL_GetTick+0x10>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	200003d8 	.word	0x200003d8

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff fff0 	bl	8000cc4 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_Delay+0x40>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffe0 	bl	8000cc4 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000008 	.word	0x20000008

08000d1c <__NVIC_SetPriorityGrouping>:
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4906      	ldr	r1, [pc, #24]	; (8000db4 <__NVIC_EnableIRQ+0x34>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Config>:
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e94:	f7ff ff90 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff2d 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff42 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff90 	bl	8000e0c <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5f 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff35 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffa2 	bl	8000e70 <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e043      	b.n	8000fd6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <HAL_DMA_Init+0xa8>)
 8000f56:	4413      	add	r3, r2
 8000f58:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <HAL_DMA_Init+0xac>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	009a      	lsls	r2, r3, #2
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <HAL_DMA_Init+0xb0>)
 8000f6a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f82:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	bffdfff8 	.word	0xbffdfff8
 8000fe4:	cccccccd 	.word	0xcccccccd
 8000fe8:	40020000 	.word	0x40020000

08000fec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	2204      	movs	r2, #4
 800100a:	409a      	lsls	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4013      	ands	r3, r2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d04f      	beq.n	80010b4 <HAL_DMA_IRQHandler+0xc8>
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	2b00      	cmp	r3, #0
 800101c:	d04a      	beq.n	80010b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0320 	and.w	r3, r3, #32
 8001028:	2b00      	cmp	r3, #0
 800102a:	d107      	bne.n	800103c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0204 	bic.w	r2, r2, #4
 800103a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a66      	ldr	r2, [pc, #408]	; (80011dc <HAL_DMA_IRQHandler+0x1f0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d029      	beq.n	800109a <HAL_DMA_IRQHandler+0xae>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a65      	ldr	r2, [pc, #404]	; (80011e0 <HAL_DMA_IRQHandler+0x1f4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d022      	beq.n	8001096 <HAL_DMA_IRQHandler+0xaa>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a63      	ldr	r2, [pc, #396]	; (80011e4 <HAL_DMA_IRQHandler+0x1f8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d01a      	beq.n	8001090 <HAL_DMA_IRQHandler+0xa4>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a62      	ldr	r2, [pc, #392]	; (80011e8 <HAL_DMA_IRQHandler+0x1fc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d012      	beq.n	800108a <HAL_DMA_IRQHandler+0x9e>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a60      	ldr	r2, [pc, #384]	; (80011ec <HAL_DMA_IRQHandler+0x200>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00a      	beq.n	8001084 <HAL_DMA_IRQHandler+0x98>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a5f      	ldr	r2, [pc, #380]	; (80011f0 <HAL_DMA_IRQHandler+0x204>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d102      	bne.n	800107e <HAL_DMA_IRQHandler+0x92>
 8001078:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800107c:	e00e      	b.n	800109c <HAL_DMA_IRQHandler+0xb0>
 800107e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001082:	e00b      	b.n	800109c <HAL_DMA_IRQHandler+0xb0>
 8001084:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001088:	e008      	b.n	800109c <HAL_DMA_IRQHandler+0xb0>
 800108a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800108e:	e005      	b.n	800109c <HAL_DMA_IRQHandler+0xb0>
 8001090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001094:	e002      	b.n	800109c <HAL_DMA_IRQHandler+0xb0>
 8001096:	2340      	movs	r3, #64	; 0x40
 8001098:	e000      	b.n	800109c <HAL_DMA_IRQHandler+0xb0>
 800109a:	2304      	movs	r3, #4
 800109c:	4a55      	ldr	r2, [pc, #340]	; (80011f4 <HAL_DMA_IRQHandler+0x208>)
 800109e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 8094 	beq.w	80011d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010b2:	e08e      	b.n	80011d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	2202      	movs	r2, #2
 80010ba:	409a      	lsls	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4013      	ands	r3, r2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d056      	beq.n	8001172 <HAL_DMA_IRQHandler+0x186>
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d051      	beq.n	8001172 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0320 	and.w	r3, r3, #32
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10b      	bne.n	80010f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 020a 	bic.w	r2, r2, #10
 80010ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a38      	ldr	r2, [pc, #224]	; (80011dc <HAL_DMA_IRQHandler+0x1f0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d029      	beq.n	8001152 <HAL_DMA_IRQHandler+0x166>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a37      	ldr	r2, [pc, #220]	; (80011e0 <HAL_DMA_IRQHandler+0x1f4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d022      	beq.n	800114e <HAL_DMA_IRQHandler+0x162>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a35      	ldr	r2, [pc, #212]	; (80011e4 <HAL_DMA_IRQHandler+0x1f8>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d01a      	beq.n	8001148 <HAL_DMA_IRQHandler+0x15c>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a34      	ldr	r2, [pc, #208]	; (80011e8 <HAL_DMA_IRQHandler+0x1fc>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d012      	beq.n	8001142 <HAL_DMA_IRQHandler+0x156>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a32      	ldr	r2, [pc, #200]	; (80011ec <HAL_DMA_IRQHandler+0x200>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00a      	beq.n	800113c <HAL_DMA_IRQHandler+0x150>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <HAL_DMA_IRQHandler+0x204>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d102      	bne.n	8001136 <HAL_DMA_IRQHandler+0x14a>
 8001130:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001134:	e00e      	b.n	8001154 <HAL_DMA_IRQHandler+0x168>
 8001136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800113a:	e00b      	b.n	8001154 <HAL_DMA_IRQHandler+0x168>
 800113c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001140:	e008      	b.n	8001154 <HAL_DMA_IRQHandler+0x168>
 8001142:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001146:	e005      	b.n	8001154 <HAL_DMA_IRQHandler+0x168>
 8001148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800114c:	e002      	b.n	8001154 <HAL_DMA_IRQHandler+0x168>
 800114e:	2320      	movs	r3, #32
 8001150:	e000      	b.n	8001154 <HAL_DMA_IRQHandler+0x168>
 8001152:	2302      	movs	r3, #2
 8001154:	4a27      	ldr	r2, [pc, #156]	; (80011f4 <HAL_DMA_IRQHandler+0x208>)
 8001156:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	2b00      	cmp	r3, #0
 8001166:	d034      	beq.n	80011d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001170:	e02f      	b.n	80011d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	2208      	movs	r2, #8
 8001178:	409a      	lsls	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d028      	beq.n	80011d4 <HAL_DMA_IRQHandler+0x1e8>
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d023      	beq.n	80011d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 020e 	bic.w	r2, r2, #14
 800119a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a4:	2101      	movs	r1, #1
 80011a6:	fa01 f202 	lsl.w	r2, r1, r2
 80011aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d004      	beq.n	80011d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	4798      	blx	r3
    }
  }
  return;
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
}
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40020008 	.word	0x40020008
 80011e0:	4002001c 	.word	0x4002001c
 80011e4:	40020030 	.word	0x40020030
 80011e8:	40020044 	.word	0x40020044
 80011ec:	40020058 	.word	0x40020058
 80011f0:	4002006c 	.word	0x4002006c
 80011f4:	40020000 	.word	0x40020000

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b08b      	sub	sp, #44	; 0x2c
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120a:	e127      	b.n	800145c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800120c:	2201      	movs	r2, #1
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	429a      	cmp	r2, r3
 8001226:	f040 8116 	bne.w	8001456 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b12      	cmp	r3, #18
 8001230:	d034      	beq.n	800129c <HAL_GPIO_Init+0xa4>
 8001232:	2b12      	cmp	r3, #18
 8001234:	d80d      	bhi.n	8001252 <HAL_GPIO_Init+0x5a>
 8001236:	2b02      	cmp	r3, #2
 8001238:	d02b      	beq.n	8001292 <HAL_GPIO_Init+0x9a>
 800123a:	2b02      	cmp	r3, #2
 800123c:	d804      	bhi.n	8001248 <HAL_GPIO_Init+0x50>
 800123e:	2b00      	cmp	r3, #0
 8001240:	d031      	beq.n	80012a6 <HAL_GPIO_Init+0xae>
 8001242:	2b01      	cmp	r3, #1
 8001244:	d01c      	beq.n	8001280 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001246:	e048      	b.n	80012da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001248:	2b03      	cmp	r3, #3
 800124a:	d043      	beq.n	80012d4 <HAL_GPIO_Init+0xdc>
 800124c:	2b11      	cmp	r3, #17
 800124e:	d01b      	beq.n	8001288 <HAL_GPIO_Init+0x90>
          break;
 8001250:	e043      	b.n	80012da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001252:	4a89      	ldr	r2, [pc, #548]	; (8001478 <HAL_GPIO_Init+0x280>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d026      	beq.n	80012a6 <HAL_GPIO_Init+0xae>
 8001258:	4a87      	ldr	r2, [pc, #540]	; (8001478 <HAL_GPIO_Init+0x280>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d806      	bhi.n	800126c <HAL_GPIO_Init+0x74>
 800125e:	4a87      	ldr	r2, [pc, #540]	; (800147c <HAL_GPIO_Init+0x284>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d020      	beq.n	80012a6 <HAL_GPIO_Init+0xae>
 8001264:	4a86      	ldr	r2, [pc, #536]	; (8001480 <HAL_GPIO_Init+0x288>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d01d      	beq.n	80012a6 <HAL_GPIO_Init+0xae>
          break;
 800126a:	e036      	b.n	80012da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800126c:	4a85      	ldr	r2, [pc, #532]	; (8001484 <HAL_GPIO_Init+0x28c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0xae>
 8001272:	4a85      	ldr	r2, [pc, #532]	; (8001488 <HAL_GPIO_Init+0x290>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d016      	beq.n	80012a6 <HAL_GPIO_Init+0xae>
 8001278:	4a84      	ldr	r2, [pc, #528]	; (800148c <HAL_GPIO_Init+0x294>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0xae>
          break;
 800127e:	e02c      	b.n	80012da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e028      	b.n	80012da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	3304      	adds	r3, #4
 800128e:	623b      	str	r3, [r7, #32]
          break;
 8001290:	e023      	b.n	80012da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	3308      	adds	r3, #8
 8001298:	623b      	str	r3, [r7, #32]
          break;
 800129a:	e01e      	b.n	80012da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	330c      	adds	r3, #12
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	e019      	b.n	80012da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ae:	2304      	movs	r3, #4
 80012b0:	623b      	str	r3, [r7, #32]
          break;
 80012b2:	e012      	b.n	80012da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d105      	bne.n	80012c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012bc:	2308      	movs	r3, #8
 80012be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	611a      	str	r2, [r3, #16]
          break;
 80012c6:	e008      	b.n	80012da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c8:	2308      	movs	r3, #8
 80012ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	615a      	str	r2, [r3, #20]
          break;
 80012d2:	e002      	b.n	80012da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
          break;
 80012d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2bff      	cmp	r3, #255	; 0xff
 80012de:	d801      	bhi.n	80012e4 <HAL_GPIO_Init+0xec>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	e001      	b.n	80012e8 <HAL_GPIO_Init+0xf0>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3304      	adds	r3, #4
 80012e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	2bff      	cmp	r3, #255	; 0xff
 80012ee:	d802      	bhi.n	80012f6 <HAL_GPIO_Init+0xfe>
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x104>
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	3b08      	subs	r3, #8
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	210f      	movs	r1, #15
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	401a      	ands	r2, r3
 800130e:	6a39      	ldr	r1, [r7, #32]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	431a      	orrs	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8096 	beq.w	8001456 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800132a:	4b59      	ldr	r3, [pc, #356]	; (8001490 <HAL_GPIO_Init+0x298>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4a58      	ldr	r2, [pc, #352]	; (8001490 <HAL_GPIO_Init+0x298>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6193      	str	r3, [r2, #24]
 8001336:	4b56      	ldr	r3, [pc, #344]	; (8001490 <HAL_GPIO_Init+0x298>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001342:	4a54      	ldr	r2, [pc, #336]	; (8001494 <HAL_GPIO_Init+0x29c>)
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4013      	ands	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <HAL_GPIO_Init+0x2a0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d013      	beq.n	8001396 <HAL_GPIO_Init+0x19e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4a      	ldr	r2, [pc, #296]	; (800149c <HAL_GPIO_Init+0x2a4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d00d      	beq.n	8001392 <HAL_GPIO_Init+0x19a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <HAL_GPIO_Init+0x2a8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d007      	beq.n	800138e <HAL_GPIO_Init+0x196>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <HAL_GPIO_Init+0x2ac>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d101      	bne.n	800138a <HAL_GPIO_Init+0x192>
 8001386:	2303      	movs	r3, #3
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x1a0>
 800138a:	2304      	movs	r3, #4
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x1a0>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x1a0>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x1a0>
 8001396:	2300      	movs	r3, #0
 8001398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013a8:	493a      	ldr	r1, [pc, #232]	; (8001494 <HAL_GPIO_Init+0x29c>)
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c2:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4938      	ldr	r1, [pc, #224]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
 80013ce:	e006      	b.n	80013de <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	4933      	ldr	r1, [pc, #204]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 80013da:	4013      	ands	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013ea:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	492e      	ldr	r1, [pc, #184]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013f8:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	43db      	mvns	r3, r3
 8001400:	4929      	ldr	r1, [pc, #164]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 8001402:	4013      	ands	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	4924      	ldr	r1, [pc, #144]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	608b      	str	r3, [r1, #8]
 800141e:	e006      	b.n	800142e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	43db      	mvns	r3, r3
 8001428:	491f      	ldr	r1, [pc, #124]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 800142a:	4013      	ands	r3, r2
 800142c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d006      	beq.n	8001448 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	491a      	ldr	r1, [pc, #104]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	60cb      	str	r3, [r1, #12]
 8001446:	e006      	b.n	8001456 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	43db      	mvns	r3, r3
 8001450:	4915      	ldr	r1, [pc, #84]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 8001452:	4013      	ands	r3, r2
 8001454:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	3301      	adds	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	fa22 f303 	lsr.w	r3, r2, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	f47f aed0 	bne.w	800120c <HAL_GPIO_Init+0x14>
  }
}
 800146c:	bf00      	nop
 800146e:	372c      	adds	r7, #44	; 0x2c
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	10210000 	.word	0x10210000
 800147c:	10110000 	.word	0x10110000
 8001480:	10120000 	.word	0x10120000
 8001484:	10310000 	.word	0x10310000
 8001488:	10320000 	.word	0x10320000
 800148c:	10220000 	.word	0x10220000
 8001490:	40021000 	.word	0x40021000
 8001494:	40010000 	.word	0x40010000
 8001498:	40010800 	.word	0x40010800
 800149c:	40010c00 	.word	0x40010c00
 80014a0:	40011000 	.word	0x40011000
 80014a4:	40011400 	.word	0x40011400
 80014a8:	40010400 	.word	0x40010400

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014c8:	e003      	b.n	80014d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	611a      	str	r2, [r3, #16]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e26c      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8087 	beq.w	800160a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014fc:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b04      	cmp	r3, #4
 8001506:	d00c      	beq.n	8001522 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001508:	4b8f      	ldr	r3, [pc, #572]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	2b08      	cmp	r3, #8
 8001512:	d112      	bne.n	800153a <HAL_RCC_OscConfig+0x5e>
 8001514:	4b8c      	ldr	r3, [pc, #560]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001520:	d10b      	bne.n	800153a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001522:	4b89      	ldr	r3, [pc, #548]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d06c      	beq.n	8001608 <HAL_RCC_OscConfig+0x12c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d168      	bne.n	8001608 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e246      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x76>
 8001544:	4b80      	ldr	r3, [pc, #512]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a7f      	ldr	r2, [pc, #508]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800154a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e02e      	b.n	80015b0 <HAL_RCC_OscConfig+0xd4>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x98>
 800155a:	4b7b      	ldr	r3, [pc, #492]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a7a      	ldr	r2, [pc, #488]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b78      	ldr	r3, [pc, #480]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a77      	ldr	r2, [pc, #476]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800156c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e01d      	b.n	80015b0 <HAL_RCC_OscConfig+0xd4>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0xbc>
 800157e:	4b72      	ldr	r3, [pc, #456]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a71      	ldr	r2, [pc, #452]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b6f      	ldr	r3, [pc, #444]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a6e      	ldr	r2, [pc, #440]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0xd4>
 8001598:	4b6b      	ldr	r3, [pc, #428]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a6a      	ldr	r2, [pc, #424]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800159e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b68      	ldr	r3, [pc, #416]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a67      	ldr	r2, [pc, #412]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb84 	bl	8000cc4 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fb80 	bl	8000cc4 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1fa      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b5d      	ldr	r3, [pc, #372]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0xe4>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb70 	bl	8000cc4 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fb6c 	bl	8000cc4 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1e6      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x10c>
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d063      	beq.n	80016de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001616:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00b      	beq.n	800163a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001622:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b08      	cmp	r3, #8
 800162c:	d11c      	bne.n	8001668 <HAL_RCC_OscConfig+0x18c>
 800162e:	4b46      	ldr	r3, [pc, #280]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d116      	bne.n	8001668 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	4b43      	ldr	r3, [pc, #268]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <HAL_RCC_OscConfig+0x176>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e1ba      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4939      	ldr	r1, [pc, #228]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	e03a      	b.n	80016de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <HAL_RCC_OscConfig+0x270>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fb25 	bl	8000cc4 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167e:	f7ff fb21 	bl	8000cc4 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e19b      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4927      	ldr	r1, [pc, #156]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	e015      	b.n	80016de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <HAL_RCC_OscConfig+0x270>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb04 	bl	8000cc4 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c0:	f7ff fb00 	bl	8000cc4 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e17a      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d03a      	beq.n	8001760 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d019      	beq.n	8001726 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_RCC_OscConfig+0x274>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f8:	f7ff fae4 	bl	8000cc4 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff fae0 	bl	8000cc4 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e15a      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_RCC_OscConfig+0x26c>)
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f000 faa8 	bl	8001c74 <RCC_Delay>
 8001724:	e01c      	b.n	8001760 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_RCC_OscConfig+0x274>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172c:	f7ff faca 	bl	8000cc4 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001732:	e00f      	b.n	8001754 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001734:	f7ff fac6 	bl	8000cc4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d908      	bls.n	8001754 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e140      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	42420000 	.word	0x42420000
 8001750:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	4b9e      	ldr	r3, [pc, #632]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1e9      	bne.n	8001734 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80a6 	beq.w	80018ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001772:	4b97      	ldr	r3, [pc, #604]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10d      	bne.n	800179a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b94      	ldr	r3, [pc, #592]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a93      	ldr	r2, [pc, #588]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	61d3      	str	r3, [r2, #28]
 800178a:	4b91      	ldr	r3, [pc, #580]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001796:	2301      	movs	r3, #1
 8001798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b8e      	ldr	r3, [pc, #568]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d118      	bne.n	80017d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a6:	4b8b      	ldr	r3, [pc, #556]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a8a      	ldr	r2, [pc, #552]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80017ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fa87 	bl	8000cc4 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ba:	f7ff fa83 	bl	8000cc4 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b64      	cmp	r3, #100	; 0x64
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0fd      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	4b81      	ldr	r3, [pc, #516]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d106      	bne.n	80017ee <HAL_RCC_OscConfig+0x312>
 80017e0:	4b7b      	ldr	r3, [pc, #492]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4a7a      	ldr	r2, [pc, #488]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6213      	str	r3, [r2, #32]
 80017ec:	e02d      	b.n	800184a <HAL_RCC_OscConfig+0x36e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x334>
 80017f6:	4b76      	ldr	r3, [pc, #472]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a75      	ldr	r2, [pc, #468]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6213      	str	r3, [r2, #32]
 8001802:	4b73      	ldr	r3, [pc, #460]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a72      	ldr	r2, [pc, #456]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	6213      	str	r3, [r2, #32]
 800180e:	e01c      	b.n	800184a <HAL_RCC_OscConfig+0x36e>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b05      	cmp	r3, #5
 8001816:	d10c      	bne.n	8001832 <HAL_RCC_OscConfig+0x356>
 8001818:	4b6d      	ldr	r3, [pc, #436]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4a6c      	ldr	r2, [pc, #432]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	6213      	str	r3, [r2, #32]
 8001824:	4b6a      	ldr	r3, [pc, #424]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4a69      	ldr	r2, [pc, #420]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	e00b      	b.n	800184a <HAL_RCC_OscConfig+0x36e>
 8001832:	4b67      	ldr	r3, [pc, #412]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4a66      	ldr	r2, [pc, #408]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	6213      	str	r3, [r2, #32]
 800183e:	4b64      	ldr	r3, [pc, #400]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4a63      	ldr	r2, [pc, #396]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	f023 0304 	bic.w	r3, r3, #4
 8001848:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d015      	beq.n	800187e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001852:	f7ff fa37 	bl	8000cc4 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fa33 	bl	8000cc4 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e0ab      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	4b57      	ldr	r3, [pc, #348]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0ee      	beq.n	800185a <HAL_RCC_OscConfig+0x37e>
 800187c:	e014      	b.n	80018a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff fa21 	bl	8000cc4 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff fa1d 	bl	8000cc4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	; 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e095      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189c:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1ee      	bne.n	8001886 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d105      	bne.n	80018ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ae:	4b48      	ldr	r3, [pc, #288]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8081 	beq.w	80019c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c4:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d061      	beq.n	8001994 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d146      	bne.n	8001966 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d8:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_RCC_OscConfig+0x4fc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff f9f1 	bl	8000cc4 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff f9ed 	bl	8000cc4 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e067      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f8:	4b35      	ldr	r3, [pc, #212]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f0      	bne.n	80018e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190c:	d108      	bne.n	8001920 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800190e:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	492d      	ldr	r1, [pc, #180]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a19      	ldr	r1, [r3, #32]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	430b      	orrs	r3, r1
 8001932:	4927      	ldr	r1, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001938:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <HAL_RCC_OscConfig+0x4fc>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff f9c1 	bl	8000cc4 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001946:	f7ff f9bd 	bl	8000cc4 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e037      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x46a>
 8001964:	e02f      	b.n	80019c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001966:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <HAL_RCC_OscConfig+0x4fc>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff f9aa 	bl	8000cc4 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f9a6 	bl	8000cc4 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e020      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x498>
 8001992:	e018      	b.n	80019c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e013      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40007000 	.word	0x40007000
 80019d8:	42420060 	.word	0x42420060

080019dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0d0      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f0:	4b6a      	ldr	r3, [pc, #424]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d910      	bls.n	8001a20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 0207 	bic.w	r2, r3, #7
 8001a06:	4965      	ldr	r1, [pc, #404]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0e:	4b63      	ldr	r3, [pc, #396]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0b8      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d020      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a38:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a50:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a52      	ldr	r2, [pc, #328]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5c:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	494d      	ldr	r1, [pc, #308]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d040      	beq.n	8001afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d115      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e07f      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e073      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aaa:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e06b      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aba:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f023 0203 	bic.w	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4936      	ldr	r1, [pc, #216]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001acc:	f7ff f8fa 	bl	8000cc4 <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad4:	f7ff f8f6 	bl	8000cc4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e053      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 020c 	and.w	r2, r3, #12
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d1eb      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d210      	bcs.n	8001b2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0207 	bic.w	r2, r3, #7
 8001b12:	4922      	ldr	r1, [pc, #136]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e032      	b.n	8001b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4916      	ldr	r1, [pc, #88]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b6a:	f000 f821 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8001b6e:	4601      	mov	r1, r0
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7c:	5cd3      	ldrb	r3, [r2, r3]
 8001b7e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_RCC_ClockConfig+0x1cc>)
 8001b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1d0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f858 	bl	8000c40 <HAL_InitTick>

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08003400 	.word	0x08003400
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000004 	.word	0x20000004

08001bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb0:	b490      	push	{r4, r7}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bb8:	1d3c      	adds	r4, r7, #4
 8001bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bc0:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d002      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d003      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x46>
 8001bee:	e02d      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bf2:	623b      	str	r3, [r7, #32]
      break;
 8001bf4:	e02d      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	0c9b      	lsrs	r3, r3, #18
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c02:	4413      	add	r3, r2
 8001c04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	0c5b      	lsrs	r3, r3, #17
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c22:	4413      	add	r3, r2
 8001c24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c2e:	fb02 f203 	mul.w	r2, r2, r3
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3a:	e004      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	623b      	str	r3, [r7, #32]
      break;
 8001c4a:	e002      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c4e:	623b      	str	r3, [r7, #32]
      break;
 8001c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c52:	6a3b      	ldr	r3, [r7, #32]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc90      	pop	{r4, r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	080033ec 	.word	0x080033ec
 8001c64:	080033fc 	.word	0x080033fc
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	007a1200 	.word	0x007a1200
 8001c70:	003d0900 	.word	0x003d0900

08001c74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <RCC_Delay+0x34>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <RCC_Delay+0x38>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	0a5b      	lsrs	r3, r3, #9
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c90:	bf00      	nop
  }
  while (Delay --);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	60fa      	str	r2, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f9      	bne.n	8001c90 <RCC_Delay+0x1c>
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	10624dd3 	.word	0x10624dd3

08001cb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e053      	b.n	8001d6a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d106      	bne.n	8001ce2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7fe fd21 	bl	8000724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cf8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	ea42 0103 	orr.w	r1, r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	0c1a      	lsrs	r2, r3, #16
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f002 0204 	and.w	r2, r2, #4
 8001d48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69da      	ldr	r2, [r3, #28]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e01d      	b.n	8001dc0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d106      	bne.n	8001d9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7fe fd87 	bl	80008ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4610      	mov	r0, r2
 8001db2:	f000 fa0f 	bl	80021d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d007      	beq.n	8001e02 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d122      	bne.n	8001e6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d11b      	bne.n	8001e6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0202 	mvn.w	r2, #2
 8001e3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f9a4 	bl	800219e <HAL_TIM_IC_CaptureCallback>
 8001e56:	e005      	b.n	8001e64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f997 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f9a6 	bl	80021b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d122      	bne.n	8001ebe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d11b      	bne.n	8001ebe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f06f 0204 	mvn.w	r2, #4
 8001e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f97a 	bl	800219e <HAL_TIM_IC_CaptureCallback>
 8001eaa:	e005      	b.n	8001eb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f96d 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f97c 	bl	80021b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d122      	bne.n	8001f12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d11b      	bne.n	8001f12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f06f 0208 	mvn.w	r2, #8
 8001ee2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f950 	bl	800219e <HAL_TIM_IC_CaptureCallback>
 8001efe:	e005      	b.n	8001f0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f943 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f952 	bl	80021b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b10      	cmp	r3, #16
 8001f1e:	d122      	bne.n	8001f66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b10      	cmp	r3, #16
 8001f2c:	d11b      	bne.n	8001f66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f06f 0210 	mvn.w	r2, #16
 8001f36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f926 	bl	800219e <HAL_TIM_IC_CaptureCallback>
 8001f52:	e005      	b.n	8001f60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f919 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f928 	bl	80021b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d10e      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d107      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f06f 0201 	mvn.w	r2, #1
 8001f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7fe f93f 	bl	8000210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9c:	2b80      	cmp	r3, #128	; 0x80
 8001f9e:	d10e      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	2b80      	cmp	r3, #128	; 0x80
 8001fac:	d107      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fa50 	bl	800245e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc8:	2b40      	cmp	r3, #64	; 0x40
 8001fca:	d10e      	bne.n	8001fea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd6:	2b40      	cmp	r3, #64	; 0x40
 8001fd8:	d107      	bne.n	8001fea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f8ec 	bl	80021c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d10e      	bne.n	8002016 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b20      	cmp	r3, #32
 8002004:	d107      	bne.n	8002016 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 0220 	mvn.w	r2, #32
 800200e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fa1b 	bl	800244c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_TIM_ConfigClockSource+0x18>
 8002032:	2302      	movs	r3, #2
 8002034:	e0a6      	b.n	8002184 <HAL_TIM_ConfigClockSource+0x166>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002054:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800205c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b40      	cmp	r3, #64	; 0x40
 800206c:	d067      	beq.n	800213e <HAL_TIM_ConfigClockSource+0x120>
 800206e:	2b40      	cmp	r3, #64	; 0x40
 8002070:	d80b      	bhi.n	800208a <HAL_TIM_ConfigClockSource+0x6c>
 8002072:	2b10      	cmp	r3, #16
 8002074:	d073      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x140>
 8002076:	2b10      	cmp	r3, #16
 8002078:	d802      	bhi.n	8002080 <HAL_TIM_ConfigClockSource+0x62>
 800207a:	2b00      	cmp	r3, #0
 800207c:	d06f      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800207e:	e078      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002080:	2b20      	cmp	r3, #32
 8002082:	d06c      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x140>
 8002084:	2b30      	cmp	r3, #48	; 0x30
 8002086:	d06a      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002088:	e073      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800208a:	2b70      	cmp	r3, #112	; 0x70
 800208c:	d00d      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0x8c>
 800208e:	2b70      	cmp	r3, #112	; 0x70
 8002090:	d804      	bhi.n	800209c <HAL_TIM_ConfigClockSource+0x7e>
 8002092:	2b50      	cmp	r3, #80	; 0x50
 8002094:	d033      	beq.n	80020fe <HAL_TIM_ConfigClockSource+0xe0>
 8002096:	2b60      	cmp	r3, #96	; 0x60
 8002098:	d041      	beq.n	800211e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800209a:	e06a      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800209c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a0:	d066      	beq.n	8002170 <HAL_TIM_ConfigClockSource+0x152>
 80020a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a6:	d017      	beq.n	80020d8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80020a8:	e063      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6899      	ldr	r1, [r3, #8]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f000 f964 	bl	8002386 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	609a      	str	r2, [r3, #8]
      break;
 80020d6:	e04c      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6899      	ldr	r1, [r3, #8]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f000 f94d 	bl	8002386 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020fa:	609a      	str	r2, [r3, #8]
      break;
 80020fc:	e039      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6859      	ldr	r1, [r3, #4]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	461a      	mov	r2, r3
 800210c:	f000 f8c4 	bl	8002298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2150      	movs	r1, #80	; 0x50
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f91b 	bl	8002352 <TIM_ITRx_SetConfig>
      break;
 800211c:	e029      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6859      	ldr	r1, [r3, #4]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	461a      	mov	r2, r3
 800212c:	f000 f8e2 	bl	80022f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2160      	movs	r1, #96	; 0x60
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f90b 	bl	8002352 <TIM_ITRx_SetConfig>
      break;
 800213c:	e019      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	461a      	mov	r2, r3
 800214c:	f000 f8a4 	bl	8002298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2140      	movs	r1, #64	; 0x40
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f8fb 	bl	8002352 <TIM_ITRx_SetConfig>
      break;
 800215c:	e009      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4619      	mov	r1, r3
 8002168:	4610      	mov	r0, r2
 800216a:	f000 f8f2 	bl	8002352 <TIM_ITRx_SetConfig>
      break;
 800216e:	e000      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002170:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a29      	ldr	r2, [pc, #164]	; (800228c <TIM_Base_SetConfig+0xb8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00b      	beq.n	8002204 <TIM_Base_SetConfig+0x30>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f2:	d007      	beq.n	8002204 <TIM_Base_SetConfig+0x30>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a26      	ldr	r2, [pc, #152]	; (8002290 <TIM_Base_SetConfig+0xbc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d003      	beq.n	8002204 <TIM_Base_SetConfig+0x30>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a25      	ldr	r2, [pc, #148]	; (8002294 <TIM_Base_SetConfig+0xc0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d108      	bne.n	8002216 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a1c      	ldr	r2, [pc, #112]	; (800228c <TIM_Base_SetConfig+0xb8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00b      	beq.n	8002236 <TIM_Base_SetConfig+0x62>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002224:	d007      	beq.n	8002236 <TIM_Base_SetConfig+0x62>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <TIM_Base_SetConfig+0xbc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d003      	beq.n	8002236 <TIM_Base_SetConfig+0x62>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a18      	ldr	r2, [pc, #96]	; (8002294 <TIM_Base_SetConfig+0xc0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d108      	bne.n	8002248 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a07      	ldr	r2, [pc, #28]	; (800228c <TIM_Base_SetConfig+0xb8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d103      	bne.n	800227c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	615a      	str	r2, [r3, #20]
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	40012c00 	.word	0x40012c00
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800

08002298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f023 0201 	bic.w	r2, r3, #1
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f023 030a 	bic.w	r3, r3, #10
 80022d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	621a      	str	r2, [r3, #32]
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f023 0210 	bic.w	r2, r3, #16
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800231e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	031b      	lsls	r3, r3, #12
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002330:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	621a      	str	r2, [r3, #32]
}
 8002348:	bf00      	nop
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	f043 0307 	orr.w	r3, r3, #7
 8002374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	609a      	str	r2, [r3, #8]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002386:	b480      	push	{r7}
 8002388:	b087      	sub	sp, #28
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	021a      	lsls	r2, r3, #8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	609a      	str	r2, [r3, #8]
}
 80023ba:	bf00      	nop
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023d8:	2302      	movs	r3, #2
 80023da:	e032      	b.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002414:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	4313      	orrs	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <__errno>:
 8002470:	4b01      	ldr	r3, [pc, #4]	; (8002478 <__errno+0x8>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	2000000c 	.word	0x2000000c

0800247c <__libc_init_array>:
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	2500      	movs	r5, #0
 8002480:	4e0c      	ldr	r6, [pc, #48]	; (80024b4 <__libc_init_array+0x38>)
 8002482:	4c0d      	ldr	r4, [pc, #52]	; (80024b8 <__libc_init_array+0x3c>)
 8002484:	1ba4      	subs	r4, r4, r6
 8002486:	10a4      	asrs	r4, r4, #2
 8002488:	42a5      	cmp	r5, r4
 800248a:	d109      	bne.n	80024a0 <__libc_init_array+0x24>
 800248c:	f000 ff7c 	bl	8003388 <_init>
 8002490:	2500      	movs	r5, #0
 8002492:	4e0a      	ldr	r6, [pc, #40]	; (80024bc <__libc_init_array+0x40>)
 8002494:	4c0a      	ldr	r4, [pc, #40]	; (80024c0 <__libc_init_array+0x44>)
 8002496:	1ba4      	subs	r4, r4, r6
 8002498:	10a4      	asrs	r4, r4, #2
 800249a:	42a5      	cmp	r5, r4
 800249c:	d105      	bne.n	80024aa <__libc_init_array+0x2e>
 800249e:	bd70      	pop	{r4, r5, r6, pc}
 80024a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024a4:	4798      	blx	r3
 80024a6:	3501      	adds	r5, #1
 80024a8:	e7ee      	b.n	8002488 <__libc_init_array+0xc>
 80024aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024ae:	4798      	blx	r3
 80024b0:	3501      	adds	r5, #1
 80024b2:	e7f2      	b.n	800249a <__libc_init_array+0x1e>
 80024b4:	080034a8 	.word	0x080034a8
 80024b8:	080034a8 	.word	0x080034a8
 80024bc:	080034a8 	.word	0x080034a8
 80024c0:	080034ac 	.word	0x080034ac

080024c4 <memcpy>:
 80024c4:	b510      	push	{r4, lr}
 80024c6:	1e43      	subs	r3, r0, #1
 80024c8:	440a      	add	r2, r1
 80024ca:	4291      	cmp	r1, r2
 80024cc:	d100      	bne.n	80024d0 <memcpy+0xc>
 80024ce:	bd10      	pop	{r4, pc}
 80024d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80024d8:	e7f7      	b.n	80024ca <memcpy+0x6>

080024da <memset>:
 80024da:	4603      	mov	r3, r0
 80024dc:	4402      	add	r2, r0
 80024de:	4293      	cmp	r3, r2
 80024e0:	d100      	bne.n	80024e4 <memset+0xa>
 80024e2:	4770      	bx	lr
 80024e4:	f803 1b01 	strb.w	r1, [r3], #1
 80024e8:	e7f9      	b.n	80024de <memset+0x4>
	...

080024ec <_free_r>:
 80024ec:	b538      	push	{r3, r4, r5, lr}
 80024ee:	4605      	mov	r5, r0
 80024f0:	2900      	cmp	r1, #0
 80024f2:	d043      	beq.n	800257c <_free_r+0x90>
 80024f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024f8:	1f0c      	subs	r4, r1, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bfb8      	it	lt
 80024fe:	18e4      	addlt	r4, r4, r3
 8002500:	f000 f9b6 	bl	8002870 <__malloc_lock>
 8002504:	4a1e      	ldr	r2, [pc, #120]	; (8002580 <_free_r+0x94>)
 8002506:	6813      	ldr	r3, [r2, #0]
 8002508:	4610      	mov	r0, r2
 800250a:	b933      	cbnz	r3, 800251a <_free_r+0x2e>
 800250c:	6063      	str	r3, [r4, #4]
 800250e:	6014      	str	r4, [r2, #0]
 8002510:	4628      	mov	r0, r5
 8002512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002516:	f000 b9ac 	b.w	8002872 <__malloc_unlock>
 800251a:	42a3      	cmp	r3, r4
 800251c:	d90b      	bls.n	8002536 <_free_r+0x4a>
 800251e:	6821      	ldr	r1, [r4, #0]
 8002520:	1862      	adds	r2, r4, r1
 8002522:	4293      	cmp	r3, r2
 8002524:	bf01      	itttt	eq
 8002526:	681a      	ldreq	r2, [r3, #0]
 8002528:	685b      	ldreq	r3, [r3, #4]
 800252a:	1852      	addeq	r2, r2, r1
 800252c:	6022      	streq	r2, [r4, #0]
 800252e:	6063      	str	r3, [r4, #4]
 8002530:	6004      	str	r4, [r0, #0]
 8002532:	e7ed      	b.n	8002510 <_free_r+0x24>
 8002534:	4613      	mov	r3, r2
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	b10a      	cbz	r2, 800253e <_free_r+0x52>
 800253a:	42a2      	cmp	r2, r4
 800253c:	d9fa      	bls.n	8002534 <_free_r+0x48>
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	1858      	adds	r0, r3, r1
 8002542:	42a0      	cmp	r0, r4
 8002544:	d10b      	bne.n	800255e <_free_r+0x72>
 8002546:	6820      	ldr	r0, [r4, #0]
 8002548:	4401      	add	r1, r0
 800254a:	1858      	adds	r0, r3, r1
 800254c:	4282      	cmp	r2, r0
 800254e:	6019      	str	r1, [r3, #0]
 8002550:	d1de      	bne.n	8002510 <_free_r+0x24>
 8002552:	6810      	ldr	r0, [r2, #0]
 8002554:	6852      	ldr	r2, [r2, #4]
 8002556:	4401      	add	r1, r0
 8002558:	6019      	str	r1, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	e7d8      	b.n	8002510 <_free_r+0x24>
 800255e:	d902      	bls.n	8002566 <_free_r+0x7a>
 8002560:	230c      	movs	r3, #12
 8002562:	602b      	str	r3, [r5, #0]
 8002564:	e7d4      	b.n	8002510 <_free_r+0x24>
 8002566:	6820      	ldr	r0, [r4, #0]
 8002568:	1821      	adds	r1, r4, r0
 800256a:	428a      	cmp	r2, r1
 800256c:	bf01      	itttt	eq
 800256e:	6811      	ldreq	r1, [r2, #0]
 8002570:	6852      	ldreq	r2, [r2, #4]
 8002572:	1809      	addeq	r1, r1, r0
 8002574:	6021      	streq	r1, [r4, #0]
 8002576:	6062      	str	r2, [r4, #4]
 8002578:	605c      	str	r4, [r3, #4]
 800257a:	e7c9      	b.n	8002510 <_free_r+0x24>
 800257c:	bd38      	pop	{r3, r4, r5, pc}
 800257e:	bf00      	nop
 8002580:	200000a0 	.word	0x200000a0

08002584 <_malloc_r>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	1ccd      	adds	r5, r1, #3
 8002588:	f025 0503 	bic.w	r5, r5, #3
 800258c:	3508      	adds	r5, #8
 800258e:	2d0c      	cmp	r5, #12
 8002590:	bf38      	it	cc
 8002592:	250c      	movcc	r5, #12
 8002594:	2d00      	cmp	r5, #0
 8002596:	4606      	mov	r6, r0
 8002598:	db01      	blt.n	800259e <_malloc_r+0x1a>
 800259a:	42a9      	cmp	r1, r5
 800259c:	d903      	bls.n	80025a6 <_malloc_r+0x22>
 800259e:	230c      	movs	r3, #12
 80025a0:	6033      	str	r3, [r6, #0]
 80025a2:	2000      	movs	r0, #0
 80025a4:	bd70      	pop	{r4, r5, r6, pc}
 80025a6:	f000 f963 	bl	8002870 <__malloc_lock>
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <_malloc_r+0xac>)
 80025ac:	6814      	ldr	r4, [r2, #0]
 80025ae:	4621      	mov	r1, r4
 80025b0:	b991      	cbnz	r1, 80025d8 <_malloc_r+0x54>
 80025b2:	4c20      	ldr	r4, [pc, #128]	; (8002634 <_malloc_r+0xb0>)
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	b91b      	cbnz	r3, 80025c0 <_malloc_r+0x3c>
 80025b8:	4630      	mov	r0, r6
 80025ba:	f000 f869 	bl	8002690 <_sbrk_r>
 80025be:	6020      	str	r0, [r4, #0]
 80025c0:	4629      	mov	r1, r5
 80025c2:	4630      	mov	r0, r6
 80025c4:	f000 f864 	bl	8002690 <_sbrk_r>
 80025c8:	1c43      	adds	r3, r0, #1
 80025ca:	d124      	bne.n	8002616 <_malloc_r+0x92>
 80025cc:	230c      	movs	r3, #12
 80025ce:	4630      	mov	r0, r6
 80025d0:	6033      	str	r3, [r6, #0]
 80025d2:	f000 f94e 	bl	8002872 <__malloc_unlock>
 80025d6:	e7e4      	b.n	80025a2 <_malloc_r+0x1e>
 80025d8:	680b      	ldr	r3, [r1, #0]
 80025da:	1b5b      	subs	r3, r3, r5
 80025dc:	d418      	bmi.n	8002610 <_malloc_r+0x8c>
 80025de:	2b0b      	cmp	r3, #11
 80025e0:	d90f      	bls.n	8002602 <_malloc_r+0x7e>
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	18cc      	adds	r4, r1, r3
 80025e6:	50cd      	str	r5, [r1, r3]
 80025e8:	4630      	mov	r0, r6
 80025ea:	f000 f942 	bl	8002872 <__malloc_unlock>
 80025ee:	f104 000b 	add.w	r0, r4, #11
 80025f2:	1d23      	adds	r3, r4, #4
 80025f4:	f020 0007 	bic.w	r0, r0, #7
 80025f8:	1ac3      	subs	r3, r0, r3
 80025fa:	d0d3      	beq.n	80025a4 <_malloc_r+0x20>
 80025fc:	425a      	negs	r2, r3
 80025fe:	50e2      	str	r2, [r4, r3]
 8002600:	e7d0      	b.n	80025a4 <_malloc_r+0x20>
 8002602:	684b      	ldr	r3, [r1, #4]
 8002604:	428c      	cmp	r4, r1
 8002606:	bf16      	itet	ne
 8002608:	6063      	strne	r3, [r4, #4]
 800260a:	6013      	streq	r3, [r2, #0]
 800260c:	460c      	movne	r4, r1
 800260e:	e7eb      	b.n	80025e8 <_malloc_r+0x64>
 8002610:	460c      	mov	r4, r1
 8002612:	6849      	ldr	r1, [r1, #4]
 8002614:	e7cc      	b.n	80025b0 <_malloc_r+0x2c>
 8002616:	1cc4      	adds	r4, r0, #3
 8002618:	f024 0403 	bic.w	r4, r4, #3
 800261c:	42a0      	cmp	r0, r4
 800261e:	d005      	beq.n	800262c <_malloc_r+0xa8>
 8002620:	1a21      	subs	r1, r4, r0
 8002622:	4630      	mov	r0, r6
 8002624:	f000 f834 	bl	8002690 <_sbrk_r>
 8002628:	3001      	adds	r0, #1
 800262a:	d0cf      	beq.n	80025cc <_malloc_r+0x48>
 800262c:	6025      	str	r5, [r4, #0]
 800262e:	e7db      	b.n	80025e8 <_malloc_r+0x64>
 8002630:	200000a0 	.word	0x200000a0
 8002634:	200000a4 	.word	0x200000a4

08002638 <iprintf>:
 8002638:	b40f      	push	{r0, r1, r2, r3}
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <iprintf+0x2c>)
 800263c:	b513      	push	{r0, r1, r4, lr}
 800263e:	681c      	ldr	r4, [r3, #0]
 8002640:	b124      	cbz	r4, 800264c <iprintf+0x14>
 8002642:	69a3      	ldr	r3, [r4, #24]
 8002644:	b913      	cbnz	r3, 800264c <iprintf+0x14>
 8002646:	4620      	mov	r0, r4
 8002648:	f000 f888 	bl	800275c <__sinit>
 800264c:	ab05      	add	r3, sp, #20
 800264e:	9a04      	ldr	r2, [sp, #16]
 8002650:	68a1      	ldr	r1, [r4, #8]
 8002652:	4620      	mov	r0, r4
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	f000 f935 	bl	80028c4 <_vfiprintf_r>
 800265a:	b002      	add	sp, #8
 800265c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002660:	b004      	add	sp, #16
 8002662:	4770      	bx	lr
 8002664:	2000000c 	.word	0x2000000c

08002668 <putchar>:
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <putchar+0x24>)
 800266c:	4605      	mov	r5, r0
 800266e:	681c      	ldr	r4, [r3, #0]
 8002670:	b124      	cbz	r4, 800267c <putchar+0x14>
 8002672:	69a3      	ldr	r3, [r4, #24]
 8002674:	b913      	cbnz	r3, 800267c <putchar+0x14>
 8002676:	4620      	mov	r0, r4
 8002678:	f000 f870 	bl	800275c <__sinit>
 800267c:	68a2      	ldr	r2, [r4, #8]
 800267e:	4629      	mov	r1, r5
 8002680:	4620      	mov	r0, r4
 8002682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002686:	f000 bbbb 	b.w	8002e00 <_putc_r>
 800268a:	bf00      	nop
 800268c:	2000000c 	.word	0x2000000c

08002690 <_sbrk_r>:
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	2300      	movs	r3, #0
 8002694:	4c05      	ldr	r4, [pc, #20]	; (80026ac <_sbrk_r+0x1c>)
 8002696:	4605      	mov	r5, r0
 8002698:	4608      	mov	r0, r1
 800269a:	6023      	str	r3, [r4, #0]
 800269c:	f7fe fa34 	bl	8000b08 <_sbrk>
 80026a0:	1c43      	adds	r3, r0, #1
 80026a2:	d102      	bne.n	80026aa <_sbrk_r+0x1a>
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	b103      	cbz	r3, 80026aa <_sbrk_r+0x1a>
 80026a8:	602b      	str	r3, [r5, #0]
 80026aa:	bd38      	pop	{r3, r4, r5, pc}
 80026ac:	200003dc 	.word	0x200003dc

080026b0 <viprintf>:
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <viprintf+0x28>)
 80026b2:	b570      	push	{r4, r5, r6, lr}
 80026b4:	681c      	ldr	r4, [r3, #0]
 80026b6:	4605      	mov	r5, r0
 80026b8:	460e      	mov	r6, r1
 80026ba:	b124      	cbz	r4, 80026c6 <viprintf+0x16>
 80026bc:	69a3      	ldr	r3, [r4, #24]
 80026be:	b913      	cbnz	r3, 80026c6 <viprintf+0x16>
 80026c0:	4620      	mov	r0, r4
 80026c2:	f000 f84b 	bl	800275c <__sinit>
 80026c6:	4633      	mov	r3, r6
 80026c8:	462a      	mov	r2, r5
 80026ca:	68a1      	ldr	r1, [r4, #8]
 80026cc:	4620      	mov	r0, r4
 80026ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80026d2:	f000 b8f7 	b.w	80028c4 <_vfiprintf_r>
 80026d6:	bf00      	nop
 80026d8:	2000000c 	.word	0x2000000c

080026dc <std>:
 80026dc:	2300      	movs	r3, #0
 80026de:	b510      	push	{r4, lr}
 80026e0:	4604      	mov	r4, r0
 80026e2:	e9c0 3300 	strd	r3, r3, [r0]
 80026e6:	6083      	str	r3, [r0, #8]
 80026e8:	8181      	strh	r1, [r0, #12]
 80026ea:	6643      	str	r3, [r0, #100]	; 0x64
 80026ec:	81c2      	strh	r2, [r0, #14]
 80026ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026f2:	6183      	str	r3, [r0, #24]
 80026f4:	4619      	mov	r1, r3
 80026f6:	2208      	movs	r2, #8
 80026f8:	305c      	adds	r0, #92	; 0x5c
 80026fa:	f7ff feee 	bl	80024da <memset>
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <std+0x38>)
 8002700:	6224      	str	r4, [r4, #32]
 8002702:	6263      	str	r3, [r4, #36]	; 0x24
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <std+0x3c>)
 8002706:	62a3      	str	r3, [r4, #40]	; 0x28
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <std+0x40>)
 800270a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <std+0x44>)
 800270e:	6323      	str	r3, [r4, #48]	; 0x30
 8002710:	bd10      	pop	{r4, pc}
 8002712:	bf00      	nop
 8002714:	08002e6d 	.word	0x08002e6d
 8002718:	08002e8f 	.word	0x08002e8f
 800271c:	08002ec7 	.word	0x08002ec7
 8002720:	08002eeb 	.word	0x08002eeb

08002724 <_cleanup_r>:
 8002724:	4901      	ldr	r1, [pc, #4]	; (800272c <_cleanup_r+0x8>)
 8002726:	f000 b885 	b.w	8002834 <_fwalk_reent>
 800272a:	bf00      	nop
 800272c:	080031c5 	.word	0x080031c5

08002730 <__sfmoreglue>:
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	2568      	movs	r5, #104	; 0x68
 8002734:	1e4a      	subs	r2, r1, #1
 8002736:	4355      	muls	r5, r2
 8002738:	460e      	mov	r6, r1
 800273a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800273e:	f7ff ff21 	bl	8002584 <_malloc_r>
 8002742:	4604      	mov	r4, r0
 8002744:	b140      	cbz	r0, 8002758 <__sfmoreglue+0x28>
 8002746:	2100      	movs	r1, #0
 8002748:	e9c0 1600 	strd	r1, r6, [r0]
 800274c:	300c      	adds	r0, #12
 800274e:	60a0      	str	r0, [r4, #8]
 8002750:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002754:	f7ff fec1 	bl	80024da <memset>
 8002758:	4620      	mov	r0, r4
 800275a:	bd70      	pop	{r4, r5, r6, pc}

0800275c <__sinit>:
 800275c:	6983      	ldr	r3, [r0, #24]
 800275e:	b510      	push	{r4, lr}
 8002760:	4604      	mov	r4, r0
 8002762:	bb33      	cbnz	r3, 80027b2 <__sinit+0x56>
 8002764:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002768:	6503      	str	r3, [r0, #80]	; 0x50
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <__sinit+0x58>)
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <__sinit+0x5c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6282      	str	r2, [r0, #40]	; 0x28
 8002772:	4298      	cmp	r0, r3
 8002774:	bf04      	itt	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	6183      	streq	r3, [r0, #24]
 800277a:	f000 f81f 	bl	80027bc <__sfp>
 800277e:	6060      	str	r0, [r4, #4]
 8002780:	4620      	mov	r0, r4
 8002782:	f000 f81b 	bl	80027bc <__sfp>
 8002786:	60a0      	str	r0, [r4, #8]
 8002788:	4620      	mov	r0, r4
 800278a:	f000 f817 	bl	80027bc <__sfp>
 800278e:	2200      	movs	r2, #0
 8002790:	60e0      	str	r0, [r4, #12]
 8002792:	2104      	movs	r1, #4
 8002794:	6860      	ldr	r0, [r4, #4]
 8002796:	f7ff ffa1 	bl	80026dc <std>
 800279a:	2201      	movs	r2, #1
 800279c:	2109      	movs	r1, #9
 800279e:	68a0      	ldr	r0, [r4, #8]
 80027a0:	f7ff ff9c 	bl	80026dc <std>
 80027a4:	2202      	movs	r2, #2
 80027a6:	2112      	movs	r1, #18
 80027a8:	68e0      	ldr	r0, [r4, #12]
 80027aa:	f7ff ff97 	bl	80026dc <std>
 80027ae:	2301      	movs	r3, #1
 80027b0:	61a3      	str	r3, [r4, #24]
 80027b2:	bd10      	pop	{r4, pc}
 80027b4:	08003410 	.word	0x08003410
 80027b8:	08002725 	.word	0x08002725

080027bc <__sfp>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	4b1b      	ldr	r3, [pc, #108]	; (800282c <__sfp+0x70>)
 80027c0:	4607      	mov	r7, r0
 80027c2:	681e      	ldr	r6, [r3, #0]
 80027c4:	69b3      	ldr	r3, [r6, #24]
 80027c6:	b913      	cbnz	r3, 80027ce <__sfp+0x12>
 80027c8:	4630      	mov	r0, r6
 80027ca:	f7ff ffc7 	bl	800275c <__sinit>
 80027ce:	3648      	adds	r6, #72	; 0x48
 80027d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	d503      	bpl.n	80027e0 <__sfp+0x24>
 80027d8:	6833      	ldr	r3, [r6, #0]
 80027da:	b133      	cbz	r3, 80027ea <__sfp+0x2e>
 80027dc:	6836      	ldr	r6, [r6, #0]
 80027de:	e7f7      	b.n	80027d0 <__sfp+0x14>
 80027e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80027e4:	b16d      	cbz	r5, 8002802 <__sfp+0x46>
 80027e6:	3468      	adds	r4, #104	; 0x68
 80027e8:	e7f4      	b.n	80027d4 <__sfp+0x18>
 80027ea:	2104      	movs	r1, #4
 80027ec:	4638      	mov	r0, r7
 80027ee:	f7ff ff9f 	bl	8002730 <__sfmoreglue>
 80027f2:	6030      	str	r0, [r6, #0]
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d1f1      	bne.n	80027dc <__sfp+0x20>
 80027f8:	230c      	movs	r3, #12
 80027fa:	4604      	mov	r4, r0
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4620      	mov	r0, r4
 8002800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <__sfp+0x74>)
 8002804:	6665      	str	r5, [r4, #100]	; 0x64
 8002806:	e9c4 5500 	strd	r5, r5, [r4]
 800280a:	60a5      	str	r5, [r4, #8]
 800280c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002810:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002814:	2208      	movs	r2, #8
 8002816:	4629      	mov	r1, r5
 8002818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800281c:	f7ff fe5d 	bl	80024da <memset>
 8002820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002828:	e7e9      	b.n	80027fe <__sfp+0x42>
 800282a:	bf00      	nop
 800282c:	08003410 	.word	0x08003410
 8002830:	ffff0001 	.word	0xffff0001

08002834 <_fwalk_reent>:
 8002834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002838:	4680      	mov	r8, r0
 800283a:	4689      	mov	r9, r1
 800283c:	2600      	movs	r6, #0
 800283e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002842:	b914      	cbnz	r4, 800284a <_fwalk_reent+0x16>
 8002844:	4630      	mov	r0, r6
 8002846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800284a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800284e:	3f01      	subs	r7, #1
 8002850:	d501      	bpl.n	8002856 <_fwalk_reent+0x22>
 8002852:	6824      	ldr	r4, [r4, #0]
 8002854:	e7f5      	b.n	8002842 <_fwalk_reent+0xe>
 8002856:	89ab      	ldrh	r3, [r5, #12]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d907      	bls.n	800286c <_fwalk_reent+0x38>
 800285c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002860:	3301      	adds	r3, #1
 8002862:	d003      	beq.n	800286c <_fwalk_reent+0x38>
 8002864:	4629      	mov	r1, r5
 8002866:	4640      	mov	r0, r8
 8002868:	47c8      	blx	r9
 800286a:	4306      	orrs	r6, r0
 800286c:	3568      	adds	r5, #104	; 0x68
 800286e:	e7ee      	b.n	800284e <_fwalk_reent+0x1a>

08002870 <__malloc_lock>:
 8002870:	4770      	bx	lr

08002872 <__malloc_unlock>:
 8002872:	4770      	bx	lr

08002874 <__sfputc_r>:
 8002874:	6893      	ldr	r3, [r2, #8]
 8002876:	b410      	push	{r4}
 8002878:	3b01      	subs	r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	6093      	str	r3, [r2, #8]
 800287e:	da07      	bge.n	8002890 <__sfputc_r+0x1c>
 8002880:	6994      	ldr	r4, [r2, #24]
 8002882:	42a3      	cmp	r3, r4
 8002884:	db01      	blt.n	800288a <__sfputc_r+0x16>
 8002886:	290a      	cmp	r1, #10
 8002888:	d102      	bne.n	8002890 <__sfputc_r+0x1c>
 800288a:	bc10      	pop	{r4}
 800288c:	f000 bb32 	b.w	8002ef4 <__swbuf_r>
 8002890:	6813      	ldr	r3, [r2, #0]
 8002892:	1c58      	adds	r0, r3, #1
 8002894:	6010      	str	r0, [r2, #0]
 8002896:	7019      	strb	r1, [r3, #0]
 8002898:	4608      	mov	r0, r1
 800289a:	bc10      	pop	{r4}
 800289c:	4770      	bx	lr

0800289e <__sfputs_r>:
 800289e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a0:	4606      	mov	r6, r0
 80028a2:	460f      	mov	r7, r1
 80028a4:	4614      	mov	r4, r2
 80028a6:	18d5      	adds	r5, r2, r3
 80028a8:	42ac      	cmp	r4, r5
 80028aa:	d101      	bne.n	80028b0 <__sfputs_r+0x12>
 80028ac:	2000      	movs	r0, #0
 80028ae:	e007      	b.n	80028c0 <__sfputs_r+0x22>
 80028b0:	463a      	mov	r2, r7
 80028b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028b6:	4630      	mov	r0, r6
 80028b8:	f7ff ffdc 	bl	8002874 <__sfputc_r>
 80028bc:	1c43      	adds	r3, r0, #1
 80028be:	d1f3      	bne.n	80028a8 <__sfputs_r+0xa>
 80028c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028c4 <_vfiprintf_r>:
 80028c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c8:	460c      	mov	r4, r1
 80028ca:	b09d      	sub	sp, #116	; 0x74
 80028cc:	4617      	mov	r7, r2
 80028ce:	461d      	mov	r5, r3
 80028d0:	4606      	mov	r6, r0
 80028d2:	b118      	cbz	r0, 80028dc <_vfiprintf_r+0x18>
 80028d4:	6983      	ldr	r3, [r0, #24]
 80028d6:	b90b      	cbnz	r3, 80028dc <_vfiprintf_r+0x18>
 80028d8:	f7ff ff40 	bl	800275c <__sinit>
 80028dc:	4b7c      	ldr	r3, [pc, #496]	; (8002ad0 <_vfiprintf_r+0x20c>)
 80028de:	429c      	cmp	r4, r3
 80028e0:	d158      	bne.n	8002994 <_vfiprintf_r+0xd0>
 80028e2:	6874      	ldr	r4, [r6, #4]
 80028e4:	89a3      	ldrh	r3, [r4, #12]
 80028e6:	0718      	lsls	r0, r3, #28
 80028e8:	d55e      	bpl.n	80029a8 <_vfiprintf_r+0xe4>
 80028ea:	6923      	ldr	r3, [r4, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d05b      	beq.n	80029a8 <_vfiprintf_r+0xe4>
 80028f0:	2300      	movs	r3, #0
 80028f2:	9309      	str	r3, [sp, #36]	; 0x24
 80028f4:	2320      	movs	r3, #32
 80028f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028fa:	2330      	movs	r3, #48	; 0x30
 80028fc:	f04f 0b01 	mov.w	fp, #1
 8002900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002904:	9503      	str	r5, [sp, #12]
 8002906:	46b8      	mov	r8, r7
 8002908:	4645      	mov	r5, r8
 800290a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800290e:	b10b      	cbz	r3, 8002914 <_vfiprintf_r+0x50>
 8002910:	2b25      	cmp	r3, #37	; 0x25
 8002912:	d154      	bne.n	80029be <_vfiprintf_r+0xfa>
 8002914:	ebb8 0a07 	subs.w	sl, r8, r7
 8002918:	d00b      	beq.n	8002932 <_vfiprintf_r+0x6e>
 800291a:	4653      	mov	r3, sl
 800291c:	463a      	mov	r2, r7
 800291e:	4621      	mov	r1, r4
 8002920:	4630      	mov	r0, r6
 8002922:	f7ff ffbc 	bl	800289e <__sfputs_r>
 8002926:	3001      	adds	r0, #1
 8002928:	f000 80c2 	beq.w	8002ab0 <_vfiprintf_r+0x1ec>
 800292c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800292e:	4453      	add	r3, sl
 8002930:	9309      	str	r3, [sp, #36]	; 0x24
 8002932:	f898 3000 	ldrb.w	r3, [r8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80ba 	beq.w	8002ab0 <_vfiprintf_r+0x1ec>
 800293c:	2300      	movs	r3, #0
 800293e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002946:	9304      	str	r3, [sp, #16]
 8002948:	9307      	str	r3, [sp, #28]
 800294a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800294e:	931a      	str	r3, [sp, #104]	; 0x68
 8002950:	46a8      	mov	r8, r5
 8002952:	2205      	movs	r2, #5
 8002954:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002958:	485e      	ldr	r0, [pc, #376]	; (8002ad4 <_vfiprintf_r+0x210>)
 800295a:	f000 fcd3 	bl	8003304 <memchr>
 800295e:	9b04      	ldr	r3, [sp, #16]
 8002960:	bb78      	cbnz	r0, 80029c2 <_vfiprintf_r+0xfe>
 8002962:	06d9      	lsls	r1, r3, #27
 8002964:	bf44      	itt	mi
 8002966:	2220      	movmi	r2, #32
 8002968:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800296c:	071a      	lsls	r2, r3, #28
 800296e:	bf44      	itt	mi
 8002970:	222b      	movmi	r2, #43	; 0x2b
 8002972:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002976:	782a      	ldrb	r2, [r5, #0]
 8002978:	2a2a      	cmp	r2, #42	; 0x2a
 800297a:	d02a      	beq.n	80029d2 <_vfiprintf_r+0x10e>
 800297c:	46a8      	mov	r8, r5
 800297e:	2000      	movs	r0, #0
 8002980:	250a      	movs	r5, #10
 8002982:	9a07      	ldr	r2, [sp, #28]
 8002984:	4641      	mov	r1, r8
 8002986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800298a:	3b30      	subs	r3, #48	; 0x30
 800298c:	2b09      	cmp	r3, #9
 800298e:	d969      	bls.n	8002a64 <_vfiprintf_r+0x1a0>
 8002990:	b360      	cbz	r0, 80029ec <_vfiprintf_r+0x128>
 8002992:	e024      	b.n	80029de <_vfiprintf_r+0x11a>
 8002994:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <_vfiprintf_r+0x214>)
 8002996:	429c      	cmp	r4, r3
 8002998:	d101      	bne.n	800299e <_vfiprintf_r+0xda>
 800299a:	68b4      	ldr	r4, [r6, #8]
 800299c:	e7a2      	b.n	80028e4 <_vfiprintf_r+0x20>
 800299e:	4b4f      	ldr	r3, [pc, #316]	; (8002adc <_vfiprintf_r+0x218>)
 80029a0:	429c      	cmp	r4, r3
 80029a2:	bf08      	it	eq
 80029a4:	68f4      	ldreq	r4, [r6, #12]
 80029a6:	e79d      	b.n	80028e4 <_vfiprintf_r+0x20>
 80029a8:	4621      	mov	r1, r4
 80029aa:	4630      	mov	r0, r6
 80029ac:	f000 fb06 	bl	8002fbc <__swsetup_r>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d09d      	beq.n	80028f0 <_vfiprintf_r+0x2c>
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029b8:	b01d      	add	sp, #116	; 0x74
 80029ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029be:	46a8      	mov	r8, r5
 80029c0:	e7a2      	b.n	8002908 <_vfiprintf_r+0x44>
 80029c2:	4a44      	ldr	r2, [pc, #272]	; (8002ad4 <_vfiprintf_r+0x210>)
 80029c4:	4645      	mov	r5, r8
 80029c6:	1a80      	subs	r0, r0, r2
 80029c8:	fa0b f000 	lsl.w	r0, fp, r0
 80029cc:	4318      	orrs	r0, r3
 80029ce:	9004      	str	r0, [sp, #16]
 80029d0:	e7be      	b.n	8002950 <_vfiprintf_r+0x8c>
 80029d2:	9a03      	ldr	r2, [sp, #12]
 80029d4:	1d11      	adds	r1, r2, #4
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	9103      	str	r1, [sp, #12]
 80029da:	2a00      	cmp	r2, #0
 80029dc:	db01      	blt.n	80029e2 <_vfiprintf_r+0x11e>
 80029de:	9207      	str	r2, [sp, #28]
 80029e0:	e004      	b.n	80029ec <_vfiprintf_r+0x128>
 80029e2:	4252      	negs	r2, r2
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	9207      	str	r2, [sp, #28]
 80029ea:	9304      	str	r3, [sp, #16]
 80029ec:	f898 3000 	ldrb.w	r3, [r8]
 80029f0:	2b2e      	cmp	r3, #46	; 0x2e
 80029f2:	d10e      	bne.n	8002a12 <_vfiprintf_r+0x14e>
 80029f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80029f8:	2b2a      	cmp	r3, #42	; 0x2a
 80029fa:	d138      	bne.n	8002a6e <_vfiprintf_r+0x1aa>
 80029fc:	9b03      	ldr	r3, [sp, #12]
 80029fe:	f108 0802 	add.w	r8, r8, #2
 8002a02:	1d1a      	adds	r2, r3, #4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	9203      	str	r2, [sp, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bfb8      	it	lt
 8002a0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002a10:	9305      	str	r3, [sp, #20]
 8002a12:	4d33      	ldr	r5, [pc, #204]	; (8002ae0 <_vfiprintf_r+0x21c>)
 8002a14:	2203      	movs	r2, #3
 8002a16:	f898 1000 	ldrb.w	r1, [r8]
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f000 fc72 	bl	8003304 <memchr>
 8002a20:	b140      	cbz	r0, 8002a34 <_vfiprintf_r+0x170>
 8002a22:	2340      	movs	r3, #64	; 0x40
 8002a24:	1b40      	subs	r0, r0, r5
 8002a26:	fa03 f000 	lsl.w	r0, r3, r0
 8002a2a:	9b04      	ldr	r3, [sp, #16]
 8002a2c:	f108 0801 	add.w	r8, r8, #1
 8002a30:	4303      	orrs	r3, r0
 8002a32:	9304      	str	r3, [sp, #16]
 8002a34:	f898 1000 	ldrb.w	r1, [r8]
 8002a38:	2206      	movs	r2, #6
 8002a3a:	482a      	ldr	r0, [pc, #168]	; (8002ae4 <_vfiprintf_r+0x220>)
 8002a3c:	f108 0701 	add.w	r7, r8, #1
 8002a40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a44:	f000 fc5e 	bl	8003304 <memchr>
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d037      	beq.n	8002abc <_vfiprintf_r+0x1f8>
 8002a4c:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <_vfiprintf_r+0x224>)
 8002a4e:	bb1b      	cbnz	r3, 8002a98 <_vfiprintf_r+0x1d4>
 8002a50:	9b03      	ldr	r3, [sp, #12]
 8002a52:	3307      	adds	r3, #7
 8002a54:	f023 0307 	bic.w	r3, r3, #7
 8002a58:	3308      	adds	r3, #8
 8002a5a:	9303      	str	r3, [sp, #12]
 8002a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a5e:	444b      	add	r3, r9
 8002a60:	9309      	str	r3, [sp, #36]	; 0x24
 8002a62:	e750      	b.n	8002906 <_vfiprintf_r+0x42>
 8002a64:	fb05 3202 	mla	r2, r5, r2, r3
 8002a68:	2001      	movs	r0, #1
 8002a6a:	4688      	mov	r8, r1
 8002a6c:	e78a      	b.n	8002984 <_vfiprintf_r+0xc0>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	250a      	movs	r5, #10
 8002a72:	4619      	mov	r1, r3
 8002a74:	f108 0801 	add.w	r8, r8, #1
 8002a78:	9305      	str	r3, [sp, #20]
 8002a7a:	4640      	mov	r0, r8
 8002a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a80:	3a30      	subs	r2, #48	; 0x30
 8002a82:	2a09      	cmp	r2, #9
 8002a84:	d903      	bls.n	8002a8e <_vfiprintf_r+0x1ca>
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0c3      	beq.n	8002a12 <_vfiprintf_r+0x14e>
 8002a8a:	9105      	str	r1, [sp, #20]
 8002a8c:	e7c1      	b.n	8002a12 <_vfiprintf_r+0x14e>
 8002a8e:	fb05 2101 	mla	r1, r5, r1, r2
 8002a92:	2301      	movs	r3, #1
 8002a94:	4680      	mov	r8, r0
 8002a96:	e7f0      	b.n	8002a7a <_vfiprintf_r+0x1b6>
 8002a98:	ab03      	add	r3, sp, #12
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4622      	mov	r2, r4
 8002a9e:	4b13      	ldr	r3, [pc, #76]	; (8002aec <_vfiprintf_r+0x228>)
 8002aa0:	a904      	add	r1, sp, #16
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002aac:	4681      	mov	r9, r0
 8002aae:	d1d5      	bne.n	8002a5c <_vfiprintf_r+0x198>
 8002ab0:	89a3      	ldrh	r3, [r4, #12]
 8002ab2:	065b      	lsls	r3, r3, #25
 8002ab4:	f53f af7e 	bmi.w	80029b4 <_vfiprintf_r+0xf0>
 8002ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002aba:	e77d      	b.n	80029b8 <_vfiprintf_r+0xf4>
 8002abc:	ab03      	add	r3, sp, #12
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	4622      	mov	r2, r4
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <_vfiprintf_r+0x228>)
 8002ac4:	a904      	add	r1, sp, #16
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	f000 f888 	bl	8002bdc <_printf_i>
 8002acc:	e7ec      	b.n	8002aa8 <_vfiprintf_r+0x1e4>
 8002ace:	bf00      	nop
 8002ad0:	08003434 	.word	0x08003434
 8002ad4:	08003474 	.word	0x08003474
 8002ad8:	08003454 	.word	0x08003454
 8002adc:	08003414 	.word	0x08003414
 8002ae0:	0800347a 	.word	0x0800347a
 8002ae4:	0800347e 	.word	0x0800347e
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	0800289f 	.word	0x0800289f

08002af0 <_printf_common>:
 8002af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002af4:	4691      	mov	r9, r2
 8002af6:	461f      	mov	r7, r3
 8002af8:	688a      	ldr	r2, [r1, #8]
 8002afa:	690b      	ldr	r3, [r1, #16]
 8002afc:	4606      	mov	r6, r0
 8002afe:	4293      	cmp	r3, r2
 8002b00:	bfb8      	it	lt
 8002b02:	4613      	movlt	r3, r2
 8002b04:	f8c9 3000 	str.w	r3, [r9]
 8002b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b0c:	460c      	mov	r4, r1
 8002b0e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b12:	b112      	cbz	r2, 8002b1a <_printf_common+0x2a>
 8002b14:	3301      	adds	r3, #1
 8002b16:	f8c9 3000 	str.w	r3, [r9]
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	0699      	lsls	r1, r3, #26
 8002b1e:	bf42      	ittt	mi
 8002b20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b24:	3302      	addmi	r3, #2
 8002b26:	f8c9 3000 	strmi.w	r3, [r9]
 8002b2a:	6825      	ldr	r5, [r4, #0]
 8002b2c:	f015 0506 	ands.w	r5, r5, #6
 8002b30:	d107      	bne.n	8002b42 <_printf_common+0x52>
 8002b32:	f104 0a19 	add.w	sl, r4, #25
 8002b36:	68e3      	ldr	r3, [r4, #12]
 8002b38:	f8d9 2000 	ldr.w	r2, [r9]
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	42ab      	cmp	r3, r5
 8002b40:	dc29      	bgt.n	8002b96 <_printf_common+0xa6>
 8002b42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b46:	6822      	ldr	r2, [r4, #0]
 8002b48:	3300      	adds	r3, #0
 8002b4a:	bf18      	it	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	0692      	lsls	r2, r2, #26
 8002b50:	d42e      	bmi.n	8002bb0 <_printf_common+0xc0>
 8002b52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b56:	4639      	mov	r1, r7
 8002b58:	4630      	mov	r0, r6
 8002b5a:	47c0      	blx	r8
 8002b5c:	3001      	adds	r0, #1
 8002b5e:	d021      	beq.n	8002ba4 <_printf_common+0xb4>
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	68e5      	ldr	r5, [r4, #12]
 8002b64:	f003 0306 	and.w	r3, r3, #6
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	bf18      	it	ne
 8002b6c:	2500      	movne	r5, #0
 8002b6e:	f8d9 2000 	ldr.w	r2, [r9]
 8002b72:	f04f 0900 	mov.w	r9, #0
 8002b76:	bf08      	it	eq
 8002b78:	1aad      	subeq	r5, r5, r2
 8002b7a:	68a3      	ldr	r3, [r4, #8]
 8002b7c:	6922      	ldr	r2, [r4, #16]
 8002b7e:	bf08      	it	eq
 8002b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b84:	4293      	cmp	r3, r2
 8002b86:	bfc4      	itt	gt
 8002b88:	1a9b      	subgt	r3, r3, r2
 8002b8a:	18ed      	addgt	r5, r5, r3
 8002b8c:	341a      	adds	r4, #26
 8002b8e:	454d      	cmp	r5, r9
 8002b90:	d11a      	bne.n	8002bc8 <_printf_common+0xd8>
 8002b92:	2000      	movs	r0, #0
 8002b94:	e008      	b.n	8002ba8 <_printf_common+0xb8>
 8002b96:	2301      	movs	r3, #1
 8002b98:	4652      	mov	r2, sl
 8002b9a:	4639      	mov	r1, r7
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	47c0      	blx	r8
 8002ba0:	3001      	adds	r0, #1
 8002ba2:	d103      	bne.n	8002bac <_printf_common+0xbc>
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bac:	3501      	adds	r5, #1
 8002bae:	e7c2      	b.n	8002b36 <_printf_common+0x46>
 8002bb0:	2030      	movs	r0, #48	; 0x30
 8002bb2:	18e1      	adds	r1, r4, r3
 8002bb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bbe:	4422      	add	r2, r4
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bc6:	e7c4      	b.n	8002b52 <_printf_common+0x62>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	4622      	mov	r2, r4
 8002bcc:	4639      	mov	r1, r7
 8002bce:	4630      	mov	r0, r6
 8002bd0:	47c0      	blx	r8
 8002bd2:	3001      	adds	r0, #1
 8002bd4:	d0e6      	beq.n	8002ba4 <_printf_common+0xb4>
 8002bd6:	f109 0901 	add.w	r9, r9, #1
 8002bda:	e7d8      	b.n	8002b8e <_printf_common+0x9e>

08002bdc <_printf_i>:
 8002bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002be0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002be4:	460c      	mov	r4, r1
 8002be6:	7e09      	ldrb	r1, [r1, #24]
 8002be8:	b085      	sub	sp, #20
 8002bea:	296e      	cmp	r1, #110	; 0x6e
 8002bec:	4617      	mov	r7, r2
 8002bee:	4606      	mov	r6, r0
 8002bf0:	4698      	mov	r8, r3
 8002bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002bf4:	f000 80b3 	beq.w	8002d5e <_printf_i+0x182>
 8002bf8:	d822      	bhi.n	8002c40 <_printf_i+0x64>
 8002bfa:	2963      	cmp	r1, #99	; 0x63
 8002bfc:	d036      	beq.n	8002c6c <_printf_i+0x90>
 8002bfe:	d80a      	bhi.n	8002c16 <_printf_i+0x3a>
 8002c00:	2900      	cmp	r1, #0
 8002c02:	f000 80b9 	beq.w	8002d78 <_printf_i+0x19c>
 8002c06:	2958      	cmp	r1, #88	; 0x58
 8002c08:	f000 8083 	beq.w	8002d12 <_printf_i+0x136>
 8002c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002c14:	e032      	b.n	8002c7c <_printf_i+0xa0>
 8002c16:	2964      	cmp	r1, #100	; 0x64
 8002c18:	d001      	beq.n	8002c1e <_printf_i+0x42>
 8002c1a:	2969      	cmp	r1, #105	; 0x69
 8002c1c:	d1f6      	bne.n	8002c0c <_printf_i+0x30>
 8002c1e:	6820      	ldr	r0, [r4, #0]
 8002c20:	6813      	ldr	r3, [r2, #0]
 8002c22:	0605      	lsls	r5, r0, #24
 8002c24:	f103 0104 	add.w	r1, r3, #4
 8002c28:	d52a      	bpl.n	8002c80 <_printf_i+0xa4>
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6011      	str	r1, [r2, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	da03      	bge.n	8002c3a <_printf_i+0x5e>
 8002c32:	222d      	movs	r2, #45	; 0x2d
 8002c34:	425b      	negs	r3, r3
 8002c36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c3a:	486f      	ldr	r0, [pc, #444]	; (8002df8 <_printf_i+0x21c>)
 8002c3c:	220a      	movs	r2, #10
 8002c3e:	e039      	b.n	8002cb4 <_printf_i+0xd8>
 8002c40:	2973      	cmp	r1, #115	; 0x73
 8002c42:	f000 809d 	beq.w	8002d80 <_printf_i+0x1a4>
 8002c46:	d808      	bhi.n	8002c5a <_printf_i+0x7e>
 8002c48:	296f      	cmp	r1, #111	; 0x6f
 8002c4a:	d020      	beq.n	8002c8e <_printf_i+0xb2>
 8002c4c:	2970      	cmp	r1, #112	; 0x70
 8002c4e:	d1dd      	bne.n	8002c0c <_printf_i+0x30>
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	f043 0320 	orr.w	r3, r3, #32
 8002c56:	6023      	str	r3, [r4, #0]
 8002c58:	e003      	b.n	8002c62 <_printf_i+0x86>
 8002c5a:	2975      	cmp	r1, #117	; 0x75
 8002c5c:	d017      	beq.n	8002c8e <_printf_i+0xb2>
 8002c5e:	2978      	cmp	r1, #120	; 0x78
 8002c60:	d1d4      	bne.n	8002c0c <_printf_i+0x30>
 8002c62:	2378      	movs	r3, #120	; 0x78
 8002c64:	4865      	ldr	r0, [pc, #404]	; (8002dfc <_printf_i+0x220>)
 8002c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c6a:	e055      	b.n	8002d18 <_printf_i+0x13c>
 8002c6c:	6813      	ldr	r3, [r2, #0]
 8002c6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c72:	1d19      	adds	r1, r3, #4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6011      	str	r1, [r2, #0]
 8002c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e08c      	b.n	8002d9a <_printf_i+0x1be>
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c86:	6011      	str	r1, [r2, #0]
 8002c88:	bf18      	it	ne
 8002c8a:	b21b      	sxthne	r3, r3
 8002c8c:	e7cf      	b.n	8002c2e <_printf_i+0x52>
 8002c8e:	6813      	ldr	r3, [r2, #0]
 8002c90:	6825      	ldr	r5, [r4, #0]
 8002c92:	1d18      	adds	r0, r3, #4
 8002c94:	6010      	str	r0, [r2, #0]
 8002c96:	0628      	lsls	r0, r5, #24
 8002c98:	d501      	bpl.n	8002c9e <_printf_i+0xc2>
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	e002      	b.n	8002ca4 <_printf_i+0xc8>
 8002c9e:	0668      	lsls	r0, r5, #25
 8002ca0:	d5fb      	bpl.n	8002c9a <_printf_i+0xbe>
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	296f      	cmp	r1, #111	; 0x6f
 8002ca6:	bf14      	ite	ne
 8002ca8:	220a      	movne	r2, #10
 8002caa:	2208      	moveq	r2, #8
 8002cac:	4852      	ldr	r0, [pc, #328]	; (8002df8 <_printf_i+0x21c>)
 8002cae:	2100      	movs	r1, #0
 8002cb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cb4:	6865      	ldr	r5, [r4, #4]
 8002cb6:	2d00      	cmp	r5, #0
 8002cb8:	60a5      	str	r5, [r4, #8]
 8002cba:	f2c0 8095 	blt.w	8002de8 <_printf_i+0x20c>
 8002cbe:	6821      	ldr	r1, [r4, #0]
 8002cc0:	f021 0104 	bic.w	r1, r1, #4
 8002cc4:	6021      	str	r1, [r4, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d13d      	bne.n	8002d46 <_printf_i+0x16a>
 8002cca:	2d00      	cmp	r5, #0
 8002ccc:	f040 808e 	bne.w	8002dec <_printf_i+0x210>
 8002cd0:	4665      	mov	r5, ip
 8002cd2:	2a08      	cmp	r2, #8
 8002cd4:	d10b      	bne.n	8002cee <_printf_i+0x112>
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	07db      	lsls	r3, r3, #31
 8002cda:	d508      	bpl.n	8002cee <_printf_i+0x112>
 8002cdc:	6923      	ldr	r3, [r4, #16]
 8002cde:	6862      	ldr	r2, [r4, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	bfde      	ittt	le
 8002ce4:	2330      	movle	r3, #48	; 0x30
 8002ce6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002cea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002cee:	ebac 0305 	sub.w	r3, ip, r5
 8002cf2:	6123      	str	r3, [r4, #16]
 8002cf4:	f8cd 8000 	str.w	r8, [sp]
 8002cf8:	463b      	mov	r3, r7
 8002cfa:	aa03      	add	r2, sp, #12
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	4630      	mov	r0, r6
 8002d00:	f7ff fef6 	bl	8002af0 <_printf_common>
 8002d04:	3001      	adds	r0, #1
 8002d06:	d14d      	bne.n	8002da4 <_printf_i+0x1c8>
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d0c:	b005      	add	sp, #20
 8002d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d12:	4839      	ldr	r0, [pc, #228]	; (8002df8 <_printf_i+0x21c>)
 8002d14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002d18:	6813      	ldr	r3, [r2, #0]
 8002d1a:	6821      	ldr	r1, [r4, #0]
 8002d1c:	1d1d      	adds	r5, r3, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6015      	str	r5, [r2, #0]
 8002d22:	060a      	lsls	r2, r1, #24
 8002d24:	d50b      	bpl.n	8002d3e <_printf_i+0x162>
 8002d26:	07ca      	lsls	r2, r1, #31
 8002d28:	bf44      	itt	mi
 8002d2a:	f041 0120 	orrmi.w	r1, r1, #32
 8002d2e:	6021      	strmi	r1, [r4, #0]
 8002d30:	b91b      	cbnz	r3, 8002d3a <_printf_i+0x15e>
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	f022 0220 	bic.w	r2, r2, #32
 8002d38:	6022      	str	r2, [r4, #0]
 8002d3a:	2210      	movs	r2, #16
 8002d3c:	e7b7      	b.n	8002cae <_printf_i+0xd2>
 8002d3e:	064d      	lsls	r5, r1, #25
 8002d40:	bf48      	it	mi
 8002d42:	b29b      	uxthmi	r3, r3
 8002d44:	e7ef      	b.n	8002d26 <_printf_i+0x14a>
 8002d46:	4665      	mov	r5, ip
 8002d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d4c:	fb02 3311 	mls	r3, r2, r1, r3
 8002d50:	5cc3      	ldrb	r3, [r0, r3]
 8002d52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d56:	460b      	mov	r3, r1
 8002d58:	2900      	cmp	r1, #0
 8002d5a:	d1f5      	bne.n	8002d48 <_printf_i+0x16c>
 8002d5c:	e7b9      	b.n	8002cd2 <_printf_i+0xf6>
 8002d5e:	6813      	ldr	r3, [r2, #0]
 8002d60:	6825      	ldr	r5, [r4, #0]
 8002d62:	1d18      	adds	r0, r3, #4
 8002d64:	6961      	ldr	r1, [r4, #20]
 8002d66:	6010      	str	r0, [r2, #0]
 8002d68:	0628      	lsls	r0, r5, #24
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	d501      	bpl.n	8002d72 <_printf_i+0x196>
 8002d6e:	6019      	str	r1, [r3, #0]
 8002d70:	e002      	b.n	8002d78 <_printf_i+0x19c>
 8002d72:	066a      	lsls	r2, r5, #25
 8002d74:	d5fb      	bpl.n	8002d6e <_printf_i+0x192>
 8002d76:	8019      	strh	r1, [r3, #0]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	4665      	mov	r5, ip
 8002d7c:	6123      	str	r3, [r4, #16]
 8002d7e:	e7b9      	b.n	8002cf4 <_printf_i+0x118>
 8002d80:	6813      	ldr	r3, [r2, #0]
 8002d82:	1d19      	adds	r1, r3, #4
 8002d84:	6011      	str	r1, [r2, #0]
 8002d86:	681d      	ldr	r5, [r3, #0]
 8002d88:	6862      	ldr	r2, [r4, #4]
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	f000 fab9 	bl	8003304 <memchr>
 8002d92:	b108      	cbz	r0, 8002d98 <_printf_i+0x1bc>
 8002d94:	1b40      	subs	r0, r0, r5
 8002d96:	6060      	str	r0, [r4, #4]
 8002d98:	6863      	ldr	r3, [r4, #4]
 8002d9a:	6123      	str	r3, [r4, #16]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002da2:	e7a7      	b.n	8002cf4 <_printf_i+0x118>
 8002da4:	6923      	ldr	r3, [r4, #16]
 8002da6:	462a      	mov	r2, r5
 8002da8:	4639      	mov	r1, r7
 8002daa:	4630      	mov	r0, r6
 8002dac:	47c0      	blx	r8
 8002dae:	3001      	adds	r0, #1
 8002db0:	d0aa      	beq.n	8002d08 <_printf_i+0x12c>
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	079b      	lsls	r3, r3, #30
 8002db6:	d413      	bmi.n	8002de0 <_printf_i+0x204>
 8002db8:	68e0      	ldr	r0, [r4, #12]
 8002dba:	9b03      	ldr	r3, [sp, #12]
 8002dbc:	4298      	cmp	r0, r3
 8002dbe:	bfb8      	it	lt
 8002dc0:	4618      	movlt	r0, r3
 8002dc2:	e7a3      	b.n	8002d0c <_printf_i+0x130>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	464a      	mov	r2, r9
 8002dc8:	4639      	mov	r1, r7
 8002dca:	4630      	mov	r0, r6
 8002dcc:	47c0      	blx	r8
 8002dce:	3001      	adds	r0, #1
 8002dd0:	d09a      	beq.n	8002d08 <_printf_i+0x12c>
 8002dd2:	3501      	adds	r5, #1
 8002dd4:	68e3      	ldr	r3, [r4, #12]
 8002dd6:	9a03      	ldr	r2, [sp, #12]
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	42ab      	cmp	r3, r5
 8002ddc:	dcf2      	bgt.n	8002dc4 <_printf_i+0x1e8>
 8002dde:	e7eb      	b.n	8002db8 <_printf_i+0x1dc>
 8002de0:	2500      	movs	r5, #0
 8002de2:	f104 0919 	add.w	r9, r4, #25
 8002de6:	e7f5      	b.n	8002dd4 <_printf_i+0x1f8>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ac      	bne.n	8002d46 <_printf_i+0x16a>
 8002dec:	7803      	ldrb	r3, [r0, #0]
 8002dee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002df2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002df6:	e76c      	b.n	8002cd2 <_printf_i+0xf6>
 8002df8:	08003485 	.word	0x08003485
 8002dfc:	08003496 	.word	0x08003496

08002e00 <_putc_r>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	460d      	mov	r5, r1
 8002e04:	4614      	mov	r4, r2
 8002e06:	4606      	mov	r6, r0
 8002e08:	b118      	cbz	r0, 8002e12 <_putc_r+0x12>
 8002e0a:	6983      	ldr	r3, [r0, #24]
 8002e0c:	b90b      	cbnz	r3, 8002e12 <_putc_r+0x12>
 8002e0e:	f7ff fca5 	bl	800275c <__sinit>
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <_putc_r+0x60>)
 8002e14:	429c      	cmp	r4, r3
 8002e16:	d112      	bne.n	8002e3e <_putc_r+0x3e>
 8002e18:	6874      	ldr	r4, [r6, #4]
 8002e1a:	68a3      	ldr	r3, [r4, #8]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	60a3      	str	r3, [r4, #8]
 8002e22:	da16      	bge.n	8002e52 <_putc_r+0x52>
 8002e24:	69a2      	ldr	r2, [r4, #24]
 8002e26:	4293      	cmp	r3, r2
 8002e28:	db02      	blt.n	8002e30 <_putc_r+0x30>
 8002e2a:	b2eb      	uxtb	r3, r5
 8002e2c:	2b0a      	cmp	r3, #10
 8002e2e:	d110      	bne.n	8002e52 <_putc_r+0x52>
 8002e30:	4622      	mov	r2, r4
 8002e32:	4629      	mov	r1, r5
 8002e34:	4630      	mov	r0, r6
 8002e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002e3a:	f000 b85b 	b.w	8002ef4 <__swbuf_r>
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <_putc_r+0x64>)
 8002e40:	429c      	cmp	r4, r3
 8002e42:	d101      	bne.n	8002e48 <_putc_r+0x48>
 8002e44:	68b4      	ldr	r4, [r6, #8]
 8002e46:	e7e8      	b.n	8002e1a <_putc_r+0x1a>
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <_putc_r+0x68>)
 8002e4a:	429c      	cmp	r4, r3
 8002e4c:	bf08      	it	eq
 8002e4e:	68f4      	ldreq	r4, [r6, #12]
 8002e50:	e7e3      	b.n	8002e1a <_putc_r+0x1a>
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	b2e8      	uxtb	r0, r5
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	6022      	str	r2, [r4, #0]
 8002e5a:	701d      	strb	r5, [r3, #0]
 8002e5c:	bd70      	pop	{r4, r5, r6, pc}
 8002e5e:	bf00      	nop
 8002e60:	08003434 	.word	0x08003434
 8002e64:	08003454 	.word	0x08003454
 8002e68:	08003414 	.word	0x08003414

08002e6c <__sread>:
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	460c      	mov	r4, r1
 8002e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e74:	f000 fa54 	bl	8003320 <_read_r>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	bfab      	itete	ge
 8002e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8002e80:	181b      	addge	r3, r3, r0
 8002e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e86:	bfac      	ite	ge
 8002e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e8a:	81a3      	strhlt	r3, [r4, #12]
 8002e8c:	bd10      	pop	{r4, pc}

08002e8e <__swrite>:
 8002e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e92:	461f      	mov	r7, r3
 8002e94:	898b      	ldrh	r3, [r1, #12]
 8002e96:	4605      	mov	r5, r0
 8002e98:	05db      	lsls	r3, r3, #23
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	4616      	mov	r6, r2
 8002e9e:	d505      	bpl.n	8002eac <__swrite+0x1e>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea8:	f000 f9b6 	bl	8003218 <_lseek_r>
 8002eac:	89a3      	ldrh	r3, [r4, #12]
 8002eae:	4632      	mov	r2, r6
 8002eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002eb4:	81a3      	strh	r3, [r4, #12]
 8002eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eba:	463b      	mov	r3, r7
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec2:	f000 b869 	b.w	8002f98 <_write_r>

08002ec6 <__sseek>:
 8002ec6:	b510      	push	{r4, lr}
 8002ec8:	460c      	mov	r4, r1
 8002eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ece:	f000 f9a3 	bl	8003218 <_lseek_r>
 8002ed2:	1c43      	adds	r3, r0, #1
 8002ed4:	89a3      	ldrh	r3, [r4, #12]
 8002ed6:	bf15      	itete	ne
 8002ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ee2:	81a3      	strheq	r3, [r4, #12]
 8002ee4:	bf18      	it	ne
 8002ee6:	81a3      	strhne	r3, [r4, #12]
 8002ee8:	bd10      	pop	{r4, pc}

08002eea <__sclose>:
 8002eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eee:	f000 b8d3 	b.w	8003098 <_close_r>
	...

08002ef4 <__swbuf_r>:
 8002ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef6:	460e      	mov	r6, r1
 8002ef8:	4614      	mov	r4, r2
 8002efa:	4605      	mov	r5, r0
 8002efc:	b118      	cbz	r0, 8002f06 <__swbuf_r+0x12>
 8002efe:	6983      	ldr	r3, [r0, #24]
 8002f00:	b90b      	cbnz	r3, 8002f06 <__swbuf_r+0x12>
 8002f02:	f7ff fc2b 	bl	800275c <__sinit>
 8002f06:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <__swbuf_r+0x98>)
 8002f08:	429c      	cmp	r4, r3
 8002f0a:	d12a      	bne.n	8002f62 <__swbuf_r+0x6e>
 8002f0c:	686c      	ldr	r4, [r5, #4]
 8002f0e:	69a3      	ldr	r3, [r4, #24]
 8002f10:	60a3      	str	r3, [r4, #8]
 8002f12:	89a3      	ldrh	r3, [r4, #12]
 8002f14:	071a      	lsls	r2, r3, #28
 8002f16:	d52e      	bpl.n	8002f76 <__swbuf_r+0x82>
 8002f18:	6923      	ldr	r3, [r4, #16]
 8002f1a:	b363      	cbz	r3, 8002f76 <__swbuf_r+0x82>
 8002f1c:	6923      	ldr	r3, [r4, #16]
 8002f1e:	6820      	ldr	r0, [r4, #0]
 8002f20:	b2f6      	uxtb	r6, r6
 8002f22:	1ac0      	subs	r0, r0, r3
 8002f24:	6963      	ldr	r3, [r4, #20]
 8002f26:	4637      	mov	r7, r6
 8002f28:	4283      	cmp	r3, r0
 8002f2a:	dc04      	bgt.n	8002f36 <__swbuf_r+0x42>
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	4628      	mov	r0, r5
 8002f30:	f000 f948 	bl	80031c4 <_fflush_r>
 8002f34:	bb28      	cbnz	r0, 8002f82 <__swbuf_r+0x8e>
 8002f36:	68a3      	ldr	r3, [r4, #8]
 8002f38:	3001      	adds	r0, #1
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	60a3      	str	r3, [r4, #8]
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	6022      	str	r2, [r4, #0]
 8002f44:	701e      	strb	r6, [r3, #0]
 8002f46:	6963      	ldr	r3, [r4, #20]
 8002f48:	4283      	cmp	r3, r0
 8002f4a:	d004      	beq.n	8002f56 <__swbuf_r+0x62>
 8002f4c:	89a3      	ldrh	r3, [r4, #12]
 8002f4e:	07db      	lsls	r3, r3, #31
 8002f50:	d519      	bpl.n	8002f86 <__swbuf_r+0x92>
 8002f52:	2e0a      	cmp	r6, #10
 8002f54:	d117      	bne.n	8002f86 <__swbuf_r+0x92>
 8002f56:	4621      	mov	r1, r4
 8002f58:	4628      	mov	r0, r5
 8002f5a:	f000 f933 	bl	80031c4 <_fflush_r>
 8002f5e:	b190      	cbz	r0, 8002f86 <__swbuf_r+0x92>
 8002f60:	e00f      	b.n	8002f82 <__swbuf_r+0x8e>
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <__swbuf_r+0x9c>)
 8002f64:	429c      	cmp	r4, r3
 8002f66:	d101      	bne.n	8002f6c <__swbuf_r+0x78>
 8002f68:	68ac      	ldr	r4, [r5, #8]
 8002f6a:	e7d0      	b.n	8002f0e <__swbuf_r+0x1a>
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <__swbuf_r+0xa0>)
 8002f6e:	429c      	cmp	r4, r3
 8002f70:	bf08      	it	eq
 8002f72:	68ec      	ldreq	r4, [r5, #12]
 8002f74:	e7cb      	b.n	8002f0e <__swbuf_r+0x1a>
 8002f76:	4621      	mov	r1, r4
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f000 f81f 	bl	8002fbc <__swsetup_r>
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d0cc      	beq.n	8002f1c <__swbuf_r+0x28>
 8002f82:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f86:	4638      	mov	r0, r7
 8002f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	08003434 	.word	0x08003434
 8002f90:	08003454 	.word	0x08003454
 8002f94:	08003414 	.word	0x08003414

08002f98 <_write_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	4c05      	ldr	r4, [pc, #20]	; (8002fb8 <_write_r+0x20>)
 8002fa4:	6022      	str	r2, [r4, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f7fd fd62 	bl	8000a70 <_write>
 8002fac:	1c43      	adds	r3, r0, #1
 8002fae:	d102      	bne.n	8002fb6 <_write_r+0x1e>
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	b103      	cbz	r3, 8002fb6 <_write_r+0x1e>
 8002fb4:	602b      	str	r3, [r5, #0]
 8002fb6:	bd38      	pop	{r3, r4, r5, pc}
 8002fb8:	200003dc 	.word	0x200003dc

08002fbc <__swsetup_r>:
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <__swsetup_r+0xcc>)
 8002fbe:	b570      	push	{r4, r5, r6, lr}
 8002fc0:	681d      	ldr	r5, [r3, #0]
 8002fc2:	4606      	mov	r6, r0
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	b125      	cbz	r5, 8002fd2 <__swsetup_r+0x16>
 8002fc8:	69ab      	ldr	r3, [r5, #24]
 8002fca:	b913      	cbnz	r3, 8002fd2 <__swsetup_r+0x16>
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f7ff fbc5 	bl	800275c <__sinit>
 8002fd2:	4b2e      	ldr	r3, [pc, #184]	; (800308c <__swsetup_r+0xd0>)
 8002fd4:	429c      	cmp	r4, r3
 8002fd6:	d10f      	bne.n	8002ff8 <__swsetup_r+0x3c>
 8002fd8:	686c      	ldr	r4, [r5, #4]
 8002fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	0715      	lsls	r5, r2, #28
 8002fe2:	d42c      	bmi.n	800303e <__swsetup_r+0x82>
 8002fe4:	06d0      	lsls	r0, r2, #27
 8002fe6:	d411      	bmi.n	800300c <__swsetup_r+0x50>
 8002fe8:	2209      	movs	r2, #9
 8002fea:	6032      	str	r2, [r6, #0]
 8002fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff0:	81a3      	strh	r3, [r4, #12]
 8002ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ff6:	e03e      	b.n	8003076 <__swsetup_r+0xba>
 8002ff8:	4b25      	ldr	r3, [pc, #148]	; (8003090 <__swsetup_r+0xd4>)
 8002ffa:	429c      	cmp	r4, r3
 8002ffc:	d101      	bne.n	8003002 <__swsetup_r+0x46>
 8002ffe:	68ac      	ldr	r4, [r5, #8]
 8003000:	e7eb      	b.n	8002fda <__swsetup_r+0x1e>
 8003002:	4b24      	ldr	r3, [pc, #144]	; (8003094 <__swsetup_r+0xd8>)
 8003004:	429c      	cmp	r4, r3
 8003006:	bf08      	it	eq
 8003008:	68ec      	ldreq	r4, [r5, #12]
 800300a:	e7e6      	b.n	8002fda <__swsetup_r+0x1e>
 800300c:	0751      	lsls	r1, r2, #29
 800300e:	d512      	bpl.n	8003036 <__swsetup_r+0x7a>
 8003010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003012:	b141      	cbz	r1, 8003026 <__swsetup_r+0x6a>
 8003014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003018:	4299      	cmp	r1, r3
 800301a:	d002      	beq.n	8003022 <__swsetup_r+0x66>
 800301c:	4630      	mov	r0, r6
 800301e:	f7ff fa65 	bl	80024ec <_free_r>
 8003022:	2300      	movs	r3, #0
 8003024:	6363      	str	r3, [r4, #52]	; 0x34
 8003026:	89a3      	ldrh	r3, [r4, #12]
 8003028:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800302c:	81a3      	strh	r3, [r4, #12]
 800302e:	2300      	movs	r3, #0
 8003030:	6063      	str	r3, [r4, #4]
 8003032:	6923      	ldr	r3, [r4, #16]
 8003034:	6023      	str	r3, [r4, #0]
 8003036:	89a3      	ldrh	r3, [r4, #12]
 8003038:	f043 0308 	orr.w	r3, r3, #8
 800303c:	81a3      	strh	r3, [r4, #12]
 800303e:	6923      	ldr	r3, [r4, #16]
 8003040:	b94b      	cbnz	r3, 8003056 <__swsetup_r+0x9a>
 8003042:	89a3      	ldrh	r3, [r4, #12]
 8003044:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304c:	d003      	beq.n	8003056 <__swsetup_r+0x9a>
 800304e:	4621      	mov	r1, r4
 8003050:	4630      	mov	r0, r6
 8003052:	f000 f917 	bl	8003284 <__smakebuf_r>
 8003056:	89a2      	ldrh	r2, [r4, #12]
 8003058:	f012 0301 	ands.w	r3, r2, #1
 800305c:	d00c      	beq.n	8003078 <__swsetup_r+0xbc>
 800305e:	2300      	movs	r3, #0
 8003060:	60a3      	str	r3, [r4, #8]
 8003062:	6963      	ldr	r3, [r4, #20]
 8003064:	425b      	negs	r3, r3
 8003066:	61a3      	str	r3, [r4, #24]
 8003068:	6923      	ldr	r3, [r4, #16]
 800306a:	b953      	cbnz	r3, 8003082 <__swsetup_r+0xc6>
 800306c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003070:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003074:	d1ba      	bne.n	8002fec <__swsetup_r+0x30>
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	0792      	lsls	r2, r2, #30
 800307a:	bf58      	it	pl
 800307c:	6963      	ldrpl	r3, [r4, #20]
 800307e:	60a3      	str	r3, [r4, #8]
 8003080:	e7f2      	b.n	8003068 <__swsetup_r+0xac>
 8003082:	2000      	movs	r0, #0
 8003084:	e7f7      	b.n	8003076 <__swsetup_r+0xba>
 8003086:	bf00      	nop
 8003088:	2000000c 	.word	0x2000000c
 800308c:	08003434 	.word	0x08003434
 8003090:	08003454 	.word	0x08003454
 8003094:	08003414 	.word	0x08003414

08003098 <_close_r>:
 8003098:	b538      	push	{r3, r4, r5, lr}
 800309a:	2300      	movs	r3, #0
 800309c:	4c05      	ldr	r4, [pc, #20]	; (80030b4 <_close_r+0x1c>)
 800309e:	4605      	mov	r5, r0
 80030a0:	4608      	mov	r0, r1
 80030a2:	6023      	str	r3, [r4, #0]
 80030a4:	f7fd fd00 	bl	8000aa8 <_close>
 80030a8:	1c43      	adds	r3, r0, #1
 80030aa:	d102      	bne.n	80030b2 <_close_r+0x1a>
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	b103      	cbz	r3, 80030b2 <_close_r+0x1a>
 80030b0:	602b      	str	r3, [r5, #0]
 80030b2:	bd38      	pop	{r3, r4, r5, pc}
 80030b4:	200003dc 	.word	0x200003dc

080030b8 <__sflush_r>:
 80030b8:	898a      	ldrh	r2, [r1, #12]
 80030ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030be:	4605      	mov	r5, r0
 80030c0:	0710      	lsls	r0, r2, #28
 80030c2:	460c      	mov	r4, r1
 80030c4:	d458      	bmi.n	8003178 <__sflush_r+0xc0>
 80030c6:	684b      	ldr	r3, [r1, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	dc05      	bgt.n	80030d8 <__sflush_r+0x20>
 80030cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	dc02      	bgt.n	80030d8 <__sflush_r+0x20>
 80030d2:	2000      	movs	r0, #0
 80030d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030da:	2e00      	cmp	r6, #0
 80030dc:	d0f9      	beq.n	80030d2 <__sflush_r+0x1a>
 80030de:	2300      	movs	r3, #0
 80030e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030e4:	682f      	ldr	r7, [r5, #0]
 80030e6:	6a21      	ldr	r1, [r4, #32]
 80030e8:	602b      	str	r3, [r5, #0]
 80030ea:	d032      	beq.n	8003152 <__sflush_r+0x9a>
 80030ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030ee:	89a3      	ldrh	r3, [r4, #12]
 80030f0:	075a      	lsls	r2, r3, #29
 80030f2:	d505      	bpl.n	8003100 <__sflush_r+0x48>
 80030f4:	6863      	ldr	r3, [r4, #4]
 80030f6:	1ac0      	subs	r0, r0, r3
 80030f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030fa:	b10b      	cbz	r3, 8003100 <__sflush_r+0x48>
 80030fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030fe:	1ac0      	subs	r0, r0, r3
 8003100:	2300      	movs	r3, #0
 8003102:	4602      	mov	r2, r0
 8003104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003106:	6a21      	ldr	r1, [r4, #32]
 8003108:	4628      	mov	r0, r5
 800310a:	47b0      	blx	r6
 800310c:	1c43      	adds	r3, r0, #1
 800310e:	89a3      	ldrh	r3, [r4, #12]
 8003110:	d106      	bne.n	8003120 <__sflush_r+0x68>
 8003112:	6829      	ldr	r1, [r5, #0]
 8003114:	291d      	cmp	r1, #29
 8003116:	d848      	bhi.n	80031aa <__sflush_r+0xf2>
 8003118:	4a29      	ldr	r2, [pc, #164]	; (80031c0 <__sflush_r+0x108>)
 800311a:	40ca      	lsrs	r2, r1
 800311c:	07d6      	lsls	r6, r2, #31
 800311e:	d544      	bpl.n	80031aa <__sflush_r+0xf2>
 8003120:	2200      	movs	r2, #0
 8003122:	6062      	str	r2, [r4, #4]
 8003124:	6922      	ldr	r2, [r4, #16]
 8003126:	04d9      	lsls	r1, r3, #19
 8003128:	6022      	str	r2, [r4, #0]
 800312a:	d504      	bpl.n	8003136 <__sflush_r+0x7e>
 800312c:	1c42      	adds	r2, r0, #1
 800312e:	d101      	bne.n	8003134 <__sflush_r+0x7c>
 8003130:	682b      	ldr	r3, [r5, #0]
 8003132:	b903      	cbnz	r3, 8003136 <__sflush_r+0x7e>
 8003134:	6560      	str	r0, [r4, #84]	; 0x54
 8003136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003138:	602f      	str	r7, [r5, #0]
 800313a:	2900      	cmp	r1, #0
 800313c:	d0c9      	beq.n	80030d2 <__sflush_r+0x1a>
 800313e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003142:	4299      	cmp	r1, r3
 8003144:	d002      	beq.n	800314c <__sflush_r+0x94>
 8003146:	4628      	mov	r0, r5
 8003148:	f7ff f9d0 	bl	80024ec <_free_r>
 800314c:	2000      	movs	r0, #0
 800314e:	6360      	str	r0, [r4, #52]	; 0x34
 8003150:	e7c0      	b.n	80030d4 <__sflush_r+0x1c>
 8003152:	2301      	movs	r3, #1
 8003154:	4628      	mov	r0, r5
 8003156:	47b0      	blx	r6
 8003158:	1c41      	adds	r1, r0, #1
 800315a:	d1c8      	bne.n	80030ee <__sflush_r+0x36>
 800315c:	682b      	ldr	r3, [r5, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0c5      	beq.n	80030ee <__sflush_r+0x36>
 8003162:	2b1d      	cmp	r3, #29
 8003164:	d001      	beq.n	800316a <__sflush_r+0xb2>
 8003166:	2b16      	cmp	r3, #22
 8003168:	d101      	bne.n	800316e <__sflush_r+0xb6>
 800316a:	602f      	str	r7, [r5, #0]
 800316c:	e7b1      	b.n	80030d2 <__sflush_r+0x1a>
 800316e:	89a3      	ldrh	r3, [r4, #12]
 8003170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003174:	81a3      	strh	r3, [r4, #12]
 8003176:	e7ad      	b.n	80030d4 <__sflush_r+0x1c>
 8003178:	690f      	ldr	r7, [r1, #16]
 800317a:	2f00      	cmp	r7, #0
 800317c:	d0a9      	beq.n	80030d2 <__sflush_r+0x1a>
 800317e:	0793      	lsls	r3, r2, #30
 8003180:	bf18      	it	ne
 8003182:	2300      	movne	r3, #0
 8003184:	680e      	ldr	r6, [r1, #0]
 8003186:	bf08      	it	eq
 8003188:	694b      	ldreq	r3, [r1, #20]
 800318a:	eba6 0807 	sub.w	r8, r6, r7
 800318e:	600f      	str	r7, [r1, #0]
 8003190:	608b      	str	r3, [r1, #8]
 8003192:	f1b8 0f00 	cmp.w	r8, #0
 8003196:	dd9c      	ble.n	80030d2 <__sflush_r+0x1a>
 8003198:	4643      	mov	r3, r8
 800319a:	463a      	mov	r2, r7
 800319c:	6a21      	ldr	r1, [r4, #32]
 800319e:	4628      	mov	r0, r5
 80031a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031a2:	47b0      	blx	r6
 80031a4:	2800      	cmp	r0, #0
 80031a6:	dc06      	bgt.n	80031b6 <__sflush_r+0xfe>
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ae:	81a3      	strh	r3, [r4, #12]
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031b4:	e78e      	b.n	80030d4 <__sflush_r+0x1c>
 80031b6:	4407      	add	r7, r0
 80031b8:	eba8 0800 	sub.w	r8, r8, r0
 80031bc:	e7e9      	b.n	8003192 <__sflush_r+0xda>
 80031be:	bf00      	nop
 80031c0:	20400001 	.word	0x20400001

080031c4 <_fflush_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	690b      	ldr	r3, [r1, #16]
 80031c8:	4605      	mov	r5, r0
 80031ca:	460c      	mov	r4, r1
 80031cc:	b1db      	cbz	r3, 8003206 <_fflush_r+0x42>
 80031ce:	b118      	cbz	r0, 80031d8 <_fflush_r+0x14>
 80031d0:	6983      	ldr	r3, [r0, #24]
 80031d2:	b90b      	cbnz	r3, 80031d8 <_fflush_r+0x14>
 80031d4:	f7ff fac2 	bl	800275c <__sinit>
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <_fflush_r+0x48>)
 80031da:	429c      	cmp	r4, r3
 80031dc:	d109      	bne.n	80031f2 <_fflush_r+0x2e>
 80031de:	686c      	ldr	r4, [r5, #4]
 80031e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031e4:	b17b      	cbz	r3, 8003206 <_fflush_r+0x42>
 80031e6:	4621      	mov	r1, r4
 80031e8:	4628      	mov	r0, r5
 80031ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031ee:	f7ff bf63 	b.w	80030b8 <__sflush_r>
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <_fflush_r+0x4c>)
 80031f4:	429c      	cmp	r4, r3
 80031f6:	d101      	bne.n	80031fc <_fflush_r+0x38>
 80031f8:	68ac      	ldr	r4, [r5, #8]
 80031fa:	e7f1      	b.n	80031e0 <_fflush_r+0x1c>
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <_fflush_r+0x50>)
 80031fe:	429c      	cmp	r4, r3
 8003200:	bf08      	it	eq
 8003202:	68ec      	ldreq	r4, [r5, #12]
 8003204:	e7ec      	b.n	80031e0 <_fflush_r+0x1c>
 8003206:	2000      	movs	r0, #0
 8003208:	bd38      	pop	{r3, r4, r5, pc}
 800320a:	bf00      	nop
 800320c:	08003434 	.word	0x08003434
 8003210:	08003454 	.word	0x08003454
 8003214:	08003414 	.word	0x08003414

08003218 <_lseek_r>:
 8003218:	b538      	push	{r3, r4, r5, lr}
 800321a:	4605      	mov	r5, r0
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	2200      	movs	r2, #0
 8003222:	4c05      	ldr	r4, [pc, #20]	; (8003238 <_lseek_r+0x20>)
 8003224:	6022      	str	r2, [r4, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	f7fd fc62 	bl	8000af0 <_lseek>
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	d102      	bne.n	8003236 <_lseek_r+0x1e>
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	b103      	cbz	r3, 8003236 <_lseek_r+0x1e>
 8003234:	602b      	str	r3, [r5, #0]
 8003236:	bd38      	pop	{r3, r4, r5, pc}
 8003238:	200003dc 	.word	0x200003dc

0800323c <__swhatbuf_r>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	460e      	mov	r6, r1
 8003240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003244:	b096      	sub	sp, #88	; 0x58
 8003246:	2900      	cmp	r1, #0
 8003248:	4614      	mov	r4, r2
 800324a:	461d      	mov	r5, r3
 800324c:	da07      	bge.n	800325e <__swhatbuf_r+0x22>
 800324e:	2300      	movs	r3, #0
 8003250:	602b      	str	r3, [r5, #0]
 8003252:	89b3      	ldrh	r3, [r6, #12]
 8003254:	061a      	lsls	r2, r3, #24
 8003256:	d410      	bmi.n	800327a <__swhatbuf_r+0x3e>
 8003258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800325c:	e00e      	b.n	800327c <__swhatbuf_r+0x40>
 800325e:	466a      	mov	r2, sp
 8003260:	f000 f870 	bl	8003344 <_fstat_r>
 8003264:	2800      	cmp	r0, #0
 8003266:	dbf2      	blt.n	800324e <__swhatbuf_r+0x12>
 8003268:	9a01      	ldr	r2, [sp, #4]
 800326a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800326e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003272:	425a      	negs	r2, r3
 8003274:	415a      	adcs	r2, r3
 8003276:	602a      	str	r2, [r5, #0]
 8003278:	e7ee      	b.n	8003258 <__swhatbuf_r+0x1c>
 800327a:	2340      	movs	r3, #64	; 0x40
 800327c:	2000      	movs	r0, #0
 800327e:	6023      	str	r3, [r4, #0]
 8003280:	b016      	add	sp, #88	; 0x58
 8003282:	bd70      	pop	{r4, r5, r6, pc}

08003284 <__smakebuf_r>:
 8003284:	898b      	ldrh	r3, [r1, #12]
 8003286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003288:	079d      	lsls	r5, r3, #30
 800328a:	4606      	mov	r6, r0
 800328c:	460c      	mov	r4, r1
 800328e:	d507      	bpl.n	80032a0 <__smakebuf_r+0x1c>
 8003290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	6123      	str	r3, [r4, #16]
 8003298:	2301      	movs	r3, #1
 800329a:	6163      	str	r3, [r4, #20]
 800329c:	b002      	add	sp, #8
 800329e:	bd70      	pop	{r4, r5, r6, pc}
 80032a0:	ab01      	add	r3, sp, #4
 80032a2:	466a      	mov	r2, sp
 80032a4:	f7ff ffca 	bl	800323c <__swhatbuf_r>
 80032a8:	9900      	ldr	r1, [sp, #0]
 80032aa:	4605      	mov	r5, r0
 80032ac:	4630      	mov	r0, r6
 80032ae:	f7ff f969 	bl	8002584 <_malloc_r>
 80032b2:	b948      	cbnz	r0, 80032c8 <__smakebuf_r+0x44>
 80032b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032b8:	059a      	lsls	r2, r3, #22
 80032ba:	d4ef      	bmi.n	800329c <__smakebuf_r+0x18>
 80032bc:	f023 0303 	bic.w	r3, r3, #3
 80032c0:	f043 0302 	orr.w	r3, r3, #2
 80032c4:	81a3      	strh	r3, [r4, #12]
 80032c6:	e7e3      	b.n	8003290 <__smakebuf_r+0xc>
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <__smakebuf_r+0x7c>)
 80032ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	6020      	str	r0, [r4, #0]
 80032d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d4:	81a3      	strh	r3, [r4, #12]
 80032d6:	9b00      	ldr	r3, [sp, #0]
 80032d8:	6120      	str	r0, [r4, #16]
 80032da:	6163      	str	r3, [r4, #20]
 80032dc:	9b01      	ldr	r3, [sp, #4]
 80032de:	b15b      	cbz	r3, 80032f8 <__smakebuf_r+0x74>
 80032e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032e4:	4630      	mov	r0, r6
 80032e6:	f000 f83f 	bl	8003368 <_isatty_r>
 80032ea:	b128      	cbz	r0, 80032f8 <__smakebuf_r+0x74>
 80032ec:	89a3      	ldrh	r3, [r4, #12]
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	81a3      	strh	r3, [r4, #12]
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	431d      	orrs	r5, r3
 80032fc:	81a5      	strh	r5, [r4, #12]
 80032fe:	e7cd      	b.n	800329c <__smakebuf_r+0x18>
 8003300:	08002725 	.word	0x08002725

08003304 <memchr>:
 8003304:	b510      	push	{r4, lr}
 8003306:	b2c9      	uxtb	r1, r1
 8003308:	4402      	add	r2, r0
 800330a:	4290      	cmp	r0, r2
 800330c:	4603      	mov	r3, r0
 800330e:	d101      	bne.n	8003314 <memchr+0x10>
 8003310:	2300      	movs	r3, #0
 8003312:	e003      	b.n	800331c <memchr+0x18>
 8003314:	781c      	ldrb	r4, [r3, #0]
 8003316:	3001      	adds	r0, #1
 8003318:	428c      	cmp	r4, r1
 800331a:	d1f6      	bne.n	800330a <memchr+0x6>
 800331c:	4618      	mov	r0, r3
 800331e:	bd10      	pop	{r4, pc}

08003320 <_read_r>:
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4605      	mov	r5, r0
 8003324:	4608      	mov	r0, r1
 8003326:	4611      	mov	r1, r2
 8003328:	2200      	movs	r2, #0
 800332a:	4c05      	ldr	r4, [pc, #20]	; (8003340 <_read_r+0x20>)
 800332c:	6022      	str	r2, [r4, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	f7fd fb81 	bl	8000a36 <_read>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d102      	bne.n	800333e <_read_r+0x1e>
 8003338:	6823      	ldr	r3, [r4, #0]
 800333a:	b103      	cbz	r3, 800333e <_read_r+0x1e>
 800333c:	602b      	str	r3, [r5, #0]
 800333e:	bd38      	pop	{r3, r4, r5, pc}
 8003340:	200003dc 	.word	0x200003dc

08003344 <_fstat_r>:
 8003344:	b538      	push	{r3, r4, r5, lr}
 8003346:	2300      	movs	r3, #0
 8003348:	4c06      	ldr	r4, [pc, #24]	; (8003364 <_fstat_r+0x20>)
 800334a:	4605      	mov	r5, r0
 800334c:	4608      	mov	r0, r1
 800334e:	4611      	mov	r1, r2
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	f7fd fbb4 	bl	8000abe <_fstat>
 8003356:	1c43      	adds	r3, r0, #1
 8003358:	d102      	bne.n	8003360 <_fstat_r+0x1c>
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	b103      	cbz	r3, 8003360 <_fstat_r+0x1c>
 800335e:	602b      	str	r3, [r5, #0]
 8003360:	bd38      	pop	{r3, r4, r5, pc}
 8003362:	bf00      	nop
 8003364:	200003dc 	.word	0x200003dc

08003368 <_isatty_r>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	2300      	movs	r3, #0
 800336c:	4c05      	ldr	r4, [pc, #20]	; (8003384 <_isatty_r+0x1c>)
 800336e:	4605      	mov	r5, r0
 8003370:	4608      	mov	r0, r1
 8003372:	6023      	str	r3, [r4, #0]
 8003374:	f7fd fbb2 	bl	8000adc <_isatty>
 8003378:	1c43      	adds	r3, r0, #1
 800337a:	d102      	bne.n	8003382 <_isatty_r+0x1a>
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	b103      	cbz	r3, 8003382 <_isatty_r+0x1a>
 8003380:	602b      	str	r3, [r5, #0]
 8003382:	bd38      	pop	{r3, r4, r5, pc}
 8003384:	200003dc 	.word	0x200003dc

08003388 <_init>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	bf00      	nop
 800338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338e:	bc08      	pop	{r3}
 8003390:	469e      	mov	lr, r3
 8003392:	4770      	bx	lr

08003394 <_fini>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	bf00      	nop
 8003398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339a:	bc08      	pop	{r3}
 800339c:	469e      	mov	lr, r3
 800339e:	4770      	bx	lr
