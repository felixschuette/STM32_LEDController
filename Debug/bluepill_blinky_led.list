
bluepill_blinky_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800415c  0800415c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800415c  0800415c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800415c  0800415c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800415c  0800415c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000070  080041d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080041d4  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed33  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002389  00000000  00000000  0002edcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  00031158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  00031e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016215  00000000  00000000  00032ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a853  00000000  00000000  00048cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072b2b  00000000  00000000  00053518  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6043  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e40  00000000  00000000  000c60c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ee4 	.word	0x08003ee4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003ee4 	.word	0x08003ee4

0800014c <rtc_get_time_usec>:
 *  Created on: Mar 25, 2020
 *      Author: felix
 */
#include "debug_log.h"

uint32_t rtc_get_time_usec(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint32_t tick = HAL_GetTick();
 8000152:	f001 f8c9 	bl	80012e8 <HAL_GetTick>
 8000156:	6078      	str	r0, [r7, #4]
	return tick;
 8000158:	687b      	ldr	r3, [r7, #4]
}
 800015a:	4618      	mov	r0, r3
 800015c:	3708      	adds	r7, #8
 800015e:	46bd      	mov	sp, r7
 8000160:	bd80      	pop	{r7, pc}
	...

08000164 <debug_log>:

void debug_log(char *msg, ...)
{
 8000164:	b40f      	push	{r0, r1, r2, r3}
 8000166:	b580      	push	{r7, lr}
 8000168:	b082      	sub	sp, #8
 800016a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, msg);
 800016c:	f107 0314 	add.w	r3, r7, #20
 8000170:	603b      	str	r3, [r7, #0]

    int time = rtc_get_time_usec();
 8000172:	f7ff ffeb 	bl	800014c <rtc_get_time_usec>
 8000176:	4603      	mov	r3, r0
 8000178:	607b      	str	r3, [r7, #4]
    printf("%d.%03d: ", time / 1000, time % 1000);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	4a11      	ldr	r2, [pc, #68]	; (80001c4 <debug_log+0x60>)
 800017e:	fb82 1203 	smull	r1, r2, r2, r3
 8000182:	1192      	asrs	r2, r2, #6
 8000184:	17db      	asrs	r3, r3, #31
 8000186:	1ad0      	subs	r0, r2, r3
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4a0e      	ldr	r2, [pc, #56]	; (80001c4 <debug_log+0x60>)
 800018c:	fb82 1203 	smull	r1, r2, r2, r3
 8000190:	1191      	asrs	r1, r2, #6
 8000192:	17da      	asrs	r2, r3, #31
 8000194:	1a8a      	subs	r2, r1, r2
 8000196:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800019a:	fb01 f202 	mul.w	r2, r1, r2
 800019e:	1a9a      	subs	r2, r3, r2
 80001a0:	4601      	mov	r1, r0
 80001a2:	4809      	ldr	r0, [pc, #36]	; (80001c8 <debug_log+0x64>)
 80001a4:	f002 fff6 	bl	8003194 <iprintf>
    vprintf(msg, args);
 80001a8:	6839      	ldr	r1, [r7, #0]
 80001aa:	6938      	ldr	r0, [r7, #16]
 80001ac:	f003 f82e 	bl	800320c <viprintf>
    printf("\n");
 80001b0:	200a      	movs	r0, #10
 80001b2:	f003 f807 	bl	80031c4 <putchar>
}
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr
 80001c4:	10624dd3 	.word	0x10624dd3
 80001c8:	08003efc 	.word	0x08003efc

080001cc <initializeLEDApplication>:
led_pattern_queue_t Bus1_LEDStripeQueue = { };
led_pattern_queue_t Bus2_LEDStripeQueue = { };
uint32_t notif;

void initializeLEDApplication(TIM_HandleTypeDef *htim1,
		TIM_HandleTypeDef *htim2) {
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	6039      	str	r1, [r7, #0]
	Bus1_LEDStripeQueue.head = NULL;
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <initializeLEDApplication+0x2c>)
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
	Bus2_LEDStripeQueue.head = NULL;
 80001dc:	4b07      	ldr	r3, [pc, #28]	; (80001fc <initializeLEDApplication+0x30>)
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]

	bus1_timer = htim1;
 80001e2:	4a07      	ldr	r2, [pc, #28]	; (8000200 <initializeLEDApplication+0x34>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	6013      	str	r3, [r2, #0]
	bus2_timer = htim2;
 80001e8:	4a06      	ldr	r2, [pc, #24]	; (8000204 <initializeLEDApplication+0x38>)
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	20000094 	.word	0x20000094
 8000200:	20000100 	.word	0x20000100
 8000204:	20000104 	.word	0x20000104

08000208 <popQueueElement>:

	return isTimerActive;
}

static uint8_t popQueueElement(led_pattern_queue_t *queue,
		led_pattern_t *pattern) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
	led_stripe_queue_element_t *old_head = NULL;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]

	if (queue->head == NULL) {
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d101      	bne.n	8000222 <popQueueElement+0x1a>
		return EXIT_FAILURE;
 800021e:	2301      	movs	r3, #1
 8000220:	e01b      	b.n	800025a <popQueueElement+0x52>
	}

	memcpy(pattern, &(queue->head)->led_pattern, sizeof(led_pattern_t));
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	220c      	movs	r2, #12
 8000228:	4619      	mov	r1, r3
 800022a:	6838      	ldr	r0, [r7, #0]
 800022c:	f002 fef8 	bl	8003020 <memcpy>
	old_head = (led_stripe_queue_element_t*) queue->head;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	60fb      	str	r3, [r7, #12]

	if (queue->head->next != NULL) {
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d005      	beq.n	800024c <popQueueElement+0x44>
		queue->head = (led_stripe_queue_element_t*) queue->head->next;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	68da      	ldr	r2, [r3, #12]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	e002      	b.n	8000252 <popQueueElement+0x4a>
	} else {
		queue->head = NULL;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
	}

	free(old_head);
 8000252:	68f8      	ldr	r0, [r7, #12]
 8000254:	f002 fedc 	bl	8003010 <free>

	return EXIT_SUCCESS;
 8000258:	2300      	movs	r3, #0
}
 800025a:	4618      	mov	r0, r3
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}

08000262 <pushQueueElement>:

static uint8_t pushQueueElement(led_pattern_queue_t *queue,
		led_pattern_t *pattern) {
 8000262:	b580      	push	{r7, lr}
 8000264:	b084      	sub	sp, #16
 8000266:	af00      	add	r7, sp, #0
 8000268:	6078      	str	r0, [r7, #4]
 800026a:	6039      	str	r1, [r7, #0]
	led_stripe_queue_element_t *cursor = queue->head;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	60fb      	str	r3, [r7, #12]
	led_stripe_queue_element_t *new_element = NULL;
 8000272:	2300      	movs	r3, #0
 8000274:	60bb      	str	r3, [r7, #8]

	if (queue->head == NULL) {
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d115      	bne.n	80002aa <pushQueueElement+0x48>
		new_element = (led_stripe_queue_element_t*) malloc(
 800027e:	2010      	movs	r0, #16
 8000280:	f002 febe 	bl	8003000 <malloc>
 8000284:	4603      	mov	r3, r0
 8000286:	60bb      	str	r3, [r7, #8]
				sizeof(led_stripe_queue_element_t));
		new_element->next = NULL;
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	2200      	movs	r2, #0
 800028c:	60da      	str	r2, [r3, #12]
		memcpy(&new_element->led_pattern, pattern, sizeof(led_pattern_t));
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	220c      	movs	r2, #12
 8000292:	6839      	ldr	r1, [r7, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f002 fec3 	bl	8003020 <memcpy>
		queue->head = new_element;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	68ba      	ldr	r2, [r7, #8]
 800029e:	601a      	str	r2, [r3, #0]
		return EXIT_SUCCESS;
 80002a0:	2300      	movs	r3, #0
 80002a2:	e01e      	b.n	80002e2 <pushQueueElement+0x80>
	}

	while (cursor->next != NULL) {
		cursor = (led_stripe_queue_element_t*) cursor->next;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	60fb      	str	r3, [r7, #12]
	while (cursor->next != NULL) {
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d1f8      	bne.n	80002a4 <pushQueueElement+0x42>
	}

	if (cursor->next == NULL) {
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d112      	bne.n	80002e0 <pushQueueElement+0x7e>
		new_element = (led_stripe_queue_element_t*) malloc(
 80002ba:	2010      	movs	r0, #16
 80002bc:	f002 fea0 	bl	8003000 <malloc>
 80002c0:	4603      	mov	r3, r0
 80002c2:	60bb      	str	r3, [r7, #8]
				sizeof(led_stripe_queue_element_t));
		new_element->next = NULL;
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
		memcpy(&new_element->led_pattern, pattern, sizeof(led_pattern_t));
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	220c      	movs	r2, #12
 80002ce:	6839      	ldr	r1, [r7, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f002 fea5 	bl	8003020 <memcpy>
		cursor->next = (struct led_stripe_queue_element_t*) new_element;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	60da      	str	r2, [r3, #12]
		return EXIT_SUCCESS;
 80002dc:	2300      	movs	r3, #0
 80002de:	e000      	b.n	80002e2 <pushQueueElement+0x80>
	}

	return EXIT_FAILURE;
 80002e0:	2301      	movs	r3, #1
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3710      	adds	r7, #16
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <startTimer>:

static void startTimer(TIM_HandleTypeDef *timer, uint32_t duration_ms) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]

	if (timer->Instance == LED_BUS1_TIMER) {
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80002fe:	d104      	bne.n	800030a <startTimer+0x1e>
		debug_log("starting timer for LED_BUS1 with duration: %d", duration_ms);
 8000300:	6839      	ldr	r1, [r7, #0]
 8000302:	4810      	ldr	r0, [pc, #64]	; (8000344 <startTimer+0x58>)
 8000304:	f7ff ff2e 	bl	8000164 <debug_log>
 8000308:	e008      	b.n	800031c <startTimer+0x30>
	} else if (timer->Instance == LED_BUS2_TIMER) {
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <startTimer+0x5c>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d103      	bne.n	800031c <startTimer+0x30>
		debug_log("starting timer for LED_BUS2 with duration: %d", duration_ms);
 8000314:	6839      	ldr	r1, [r7, #0]
 8000316:	480d      	ldr	r0, [pc, #52]	; (800034c <startTimer+0x60>)
 8000318:	f7ff ff24 	bl	8000164 <debug_log>
	}

	__HAL_TIM_CLEAR_IT(timer, TIM_IT_UPDATE);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f06f 0201 	mvn.w	r2, #1
 8000324:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_AUTORELOAD(timer, duration_ms);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	683a      	ldr	r2, [r7, #0]
 800032c:	62da      	str	r2, [r3, #44]	; 0x2c
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	683a      	ldr	r2, [r7, #0]
 8000332:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(timer);
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f002 fae4 	bl	8002902 <HAL_TIM_Base_Start_IT>
}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	08003f08 	.word	0x08003f08
 8000348:	40000400 	.word	0x40000400
 800034c:	08003f38 	.word	0x08003f38

08000350 <showNextPattern>:

static uint8_t showNextPattern(led_pattern_queue_t *queue,
		TIM_HandleTypeDef *timer, spi_bus_num_t busNum) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	4613      	mov	r3, r2
 800035c:	71fb      	strb	r3, [r7, #7]
	led_pattern_t nextPattern = { };
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
	uint8_t chk = EXIT_SUCCESS;
 800036a:	2300      	movs	r3, #0
 800036c:	77fb      	strb	r3, [r7, #31]

	chk = popQueueElement(queue, &nextPattern);
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	4619      	mov	r1, r3
 8000374:	68f8      	ldr	r0, [r7, #12]
 8000376:	f7ff ff47 	bl	8000208 <popQueueElement>
 800037a:	4603      	mov	r3, r0
 800037c:	77fb      	strb	r3, [r7, #31]
	if (chk == EXIT_FAILURE) {
 800037e:	7ffb      	ldrb	r3, [r7, #31]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d104      	bne.n	800038e <showNextPattern+0x3e>
		debug_log("queue is empty, nothing to display ...");
 8000384:	480f      	ldr	r0, [pc, #60]	; (80003c4 <showNextPattern+0x74>)
 8000386:	f7ff feed 	bl	8000164 <debug_log>
		return EXIT_FAILURE;
 800038a:	2301      	movs	r3, #1
 800038c:	e015      	b.n	80003ba <showNextPattern+0x6a>
	}

	if (nextPattern.duration_ms > 0) {
 800038e:	8b3b      	ldrh	r3, [r7, #24]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d004      	beq.n	800039e <showNextPattern+0x4e>
		startTimer(timer, nextPattern.duration_ms);
 8000394:	8b3b      	ldrh	r3, [r7, #24]
 8000396:	4619      	mov	r1, r3
 8000398:	68b8      	ldr	r0, [r7, #8]
 800039a:	f7ff ffa7 	bl	80002ec <startTimer>
	}

	debug_log("showing next pattern with duration %d and #%d leds now.",
			nextPattern.duration_ms, nextPattern.led_num);
 800039e:	8b3b      	ldrh	r3, [r7, #24]
	debug_log("showing next pattern with duration %d and #%d leds now.",
 80003a0:	4619      	mov	r1, r3
			nextPattern.duration_ms, nextPattern.led_num);
 80003a2:	8abb      	ldrh	r3, [r7, #20]
	debug_log("showing next pattern with duration %d and #%d leds now.",
 80003a4:	461a      	mov	r2, r3
 80003a6:	4808      	ldr	r0, [pc, #32]	; (80003c8 <showNextPattern+0x78>)
 80003a8:	f7ff fedc 	bl	8000164 <debug_log>
	showLEDs(nextPattern.led_colors, nextPattern.led_num, busNum); //TODO: bus number must be generated dynamically
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	8ab9      	ldrh	r1, [r7, #20]
 80003b0:	79fa      	ldrb	r2, [r7, #7]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fc75 	bl	8000ca2 <showLEDs>

	return chk;
 80003b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3720      	adds	r7, #32
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	08003f68 	.word	0x08003f68
 80003c8:	08003f90 	.word	0x08003f90

080003cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == LED_BUS1_TIMER) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003dc:	d109      	bne.n	80003f2 <HAL_TIM_PeriodElapsedCallback+0x26>
		debug_log("LED_BUS1_TIMER");
 80003de:	480f      	ldr	r0, [pc, #60]	; (800041c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80003e0:	f7ff fec0 	bl	8000164 <debug_log>
		notif |= LED_BUS1_NOTIF;
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	4a0c      	ldr	r2, [pc, #48]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80003ee:	6013      	str	r3, [r2, #0]
 80003f0:	e00d      	b.n	800040e <HAL_TIM_PeriodElapsedCallback+0x42>
	} else if (htim->Instance == LED_BUS2_TIMER) {
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d108      	bne.n	800040e <HAL_TIM_PeriodElapsedCallback+0x42>
		debug_log("LED_BUS2_TIMER");
 80003fc:	480a      	ldr	r0, [pc, #40]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80003fe:	f7ff feb1 	bl	8000164 <debug_log>
		notif |= LED_BUS2_NOTIF;
 8000402:	4b07      	ldr	r3, [pc, #28]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f043 0302 	orr.w	r3, r3, #2
 800040a:	4a05      	ldr	r2, [pc, #20]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800040c:	6013      	str	r3, [r2, #0]
	}
	HAL_TIM_Base_Stop(htim);
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f002 fa4d 	bl	80028ae <HAL_TIM_Base_Stop>
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	08003fc8 	.word	0x08003fc8
 8000420:	200001a4 	.word	0x200001a4
 8000424:	40000400 	.word	0x40000400
 8000428:	08003fd8 	.word	0x08003fd8

0800042c <testRoutine>:

static void testRoutine() {
 800042c:	b580      	push	{r7, lr}
 800042e:	b092      	sub	sp, #72	; 0x48
 8000430:	af00      	add	r7, sp, #0
	debug_log("starting test routine ...");
 8000432:	486f      	ldr	r0, [pc, #444]	; (80005f0 <testRoutine+0x1c4>)
 8000434:	f7ff fe96 	bl	8000164 <debug_log>
	led_rgb_color_t led[9] = { 0 };
 8000438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800043c:	2224      	movs	r2, #36	; 0x24
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f002 fdf8 	bl	8003036 <memset>

	led[0].red = 50;
 8000446:	2332      	movs	r3, #50	; 0x32
 8000448:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	led[0].green = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	led[0].blue = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	led[0].white = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	led[1].red = 50;
 800045e:	2332      	movs	r3, #50	; 0x32
 8000460:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	led[1].green = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	led[1].blue = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	led[1].white = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	led[2].red = 50;
 8000476:	2332      	movs	r3, #50	; 0x32
 8000478:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	led[2].green = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	led[2].blue = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	led[2].white = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	led[3].red = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	led[3].green = 50;
 8000494:	2332      	movs	r3, #50	; 0x32
 8000496:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	led[3].blue = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	led[3].white = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	led[4].red = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	led[4].green = 50;
 80004ac:	2332      	movs	r3, #50	; 0x32
 80004ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	led[4].blue = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	led[4].white = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	led[5].red = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	led[5].green = 50;
 80004c4:	2332      	movs	r3, #50	; 0x32
 80004c6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	led[5].blue = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	led[5].white = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	led[6].red = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	led[6].green = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	led[6].blue = 50;
 80004e2:	2332      	movs	r3, #50	; 0x32
 80004e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	led[6].white = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	led[7].red = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	led[7].green = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	led[7].blue = 50;
 80004fa:	2332      	movs	r3, #50	; 0x32
 80004fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	led[7].white = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	led[8].red = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	led[8].green = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	led[8].blue = 50;
 8000512:	2332      	movs	r3, #50	; 0x32
 8000514:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	led[8].white = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	led_pattern_t patterns[3] = { 0 };
 800051e:	463b      	mov	r3, r7
 8000520:	2224      	movs	r2, #36	; 0x24
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f002 fd86 	bl	8003036 <memset>

	patterns[0].led_num = 3;
 800052a:	2303      	movs	r3, #3
 800052c:	80bb      	strh	r3, [r7, #4]
	patterns[0].duration_ms = 1200;
 800052e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000532:	813b      	strh	r3, [r7, #8]
	patterns[0].direction = 0; // can be ignored anyway
 8000534:	2300      	movs	r3, #0
 8000536:	71bb      	strb	r3, [r7, #6]
	patterns[0].led_colors = malloc(
			patterns[0].led_num * sizeof(led_rgb_color_t));
 8000538:	88bb      	ldrh	r3, [r7, #4]
	patterns[0].led_colors = malloc(
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4618      	mov	r0, r3
 800053e:	f002 fd5f 	bl	8003000 <malloc>
 8000542:	4603      	mov	r3, r0
 8000544:	603b      	str	r3, [r7, #0]
	memcpy(patterns[0].led_colors, led,
 8000546:	683b      	ldr	r3, [r7, #0]
			patterns[0].led_num * sizeof(led_rgb_color_t));
 8000548:	88ba      	ldrh	r2, [r7, #4]
	memcpy(patterns[0].led_colors, led,
 800054a:	0092      	lsls	r2, r2, #2
 800054c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000550:	4618      	mov	r0, r3
 8000552:	f002 fd65 	bl	8003020 <memcpy>
	pushQueueElement(&Bus2_LEDStripeQueue, &patterns[0]);
 8000556:	463b      	mov	r3, r7
 8000558:	4619      	mov	r1, r3
 800055a:	4826      	ldr	r0, [pc, #152]	; (80005f4 <testRoutine+0x1c8>)
 800055c:	f7ff fe81 	bl	8000262 <pushQueueElement>

	patterns[1].led_num = 3;
 8000560:	2303      	movs	r3, #3
 8000562:	823b      	strh	r3, [r7, #16]
	patterns[1].duration_ms = 800;
 8000564:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000568:	82bb      	strh	r3, [r7, #20]
	patterns[1].direction = 1; // can be ignored anyway
 800056a:	2301      	movs	r3, #1
 800056c:	74bb      	strb	r3, [r7, #18]
	patterns[1].led_colors = malloc(
			patterns[1].led_num * sizeof(led_rgb_color_t));
 800056e:	8a3b      	ldrh	r3, [r7, #16]
	patterns[1].led_colors = malloc(
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fd44 	bl	8003000 <malloc>
 8000578:	4603      	mov	r3, r0
 800057a:	60fb      	str	r3, [r7, #12]
	memcpy(patterns[1].led_colors, &led[patterns[1].led_num],
 800057c:	68f8      	ldr	r0, [r7, #12]
 800057e:	8a3b      	ldrh	r3, [r7, #16]
 8000580:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	4413      	add	r3, r2
			patterns[1].led_num * sizeof(led_rgb_color_t));
 8000588:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(patterns[1].led_colors, &led[patterns[1].led_num],
 800058a:	0092      	lsls	r2, r2, #2
 800058c:	4619      	mov	r1, r3
 800058e:	f002 fd47 	bl	8003020 <memcpy>
	pushQueueElement(&Bus2_LEDStripeQueue, &patterns[1]);
 8000592:	463b      	mov	r3, r7
 8000594:	330c      	adds	r3, #12
 8000596:	4619      	mov	r1, r3
 8000598:	4816      	ldr	r0, [pc, #88]	; (80005f4 <testRoutine+0x1c8>)
 800059a:	f7ff fe62 	bl	8000262 <pushQueueElement>

	patterns[2].led_num = 3;
 800059e:	2303      	movs	r3, #3
 80005a0:	83bb      	strh	r3, [r7, #28]
	patterns[2].duration_ms = 3500;
 80005a2:	f640 53ac 	movw	r3, #3500	; 0xdac
 80005a6:	843b      	strh	r3, [r7, #32]
	patterns[2].direction = 0; // can be ignored anyway
 80005a8:	2300      	movs	r3, #0
 80005aa:	77bb      	strb	r3, [r7, #30]
	patterns[2].led_colors = malloc(
			patterns[2].led_num * sizeof(led_rgb_color_t));
 80005ac:	8bbb      	ldrh	r3, [r7, #28]
	patterns[2].led_colors = malloc(
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fd25 	bl	8003000 <malloc>
 80005b6:	4603      	mov	r3, r0
 80005b8:	61bb      	str	r3, [r7, #24]
	memcpy(patterns[2].led_colors,
 80005ba:	69b8      	ldr	r0, [r7, #24]
			&led[patterns[2].led_num + patterns[1].led_num],
 80005bc:	8bbb      	ldrh	r3, [r7, #28]
 80005be:	461a      	mov	r2, r3
 80005c0:	8a3b      	ldrh	r3, [r7, #16]
 80005c2:	4413      	add	r3, r2
 80005c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
			patterns[2].led_num * sizeof(led_rgb_color_t));
 80005cc:	8bba      	ldrh	r2, [r7, #28]
	memcpy(patterns[2].led_colors,
 80005ce:	0092      	lsls	r2, r2, #2
 80005d0:	4619      	mov	r1, r3
 80005d2:	f002 fd25 	bl	8003020 <memcpy>
	pushQueueElement(&Bus2_LEDStripeQueue, &patterns[2]);
 80005d6:	463b      	mov	r3, r7
 80005d8:	3318      	adds	r3, #24
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <testRoutine+0x1c8>)
 80005de:	f7ff fe40 	bl	8000262 <pushQueueElement>
	debug_log("test routine: pushed 3 elements into pattern queue.");
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <testRoutine+0x1cc>)
 80005e4:	f7ff fdbe 	bl	8000164 <debug_log>
}
 80005e8:	bf00      	nop
 80005ea:	3748      	adds	r7, #72	; 0x48
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	08003fe8 	.word	0x08003fe8
 80005f4:	20000094 	.word	0x20000094
 80005f8:	08004004 	.word	0x08004004

080005fc <unsetNotification>:

static void unsetNotification(uint32_t notification) {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	notif &= (uint32_t) (~notification);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	43da      	mvns	r2, r3
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <unsetNotification+0x20>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4013      	ands	r3, r2
 800060e:	4a03      	ldr	r2, [pc, #12]	; (800061c <unsetNotification+0x20>)
 8000610:	6013      	str	r3, [r2, #0]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	200001a4 	.word	0x200001a4

08000620 <runScheduler>:

void runScheduler() {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	testRoutine();
 8000624:	f7ff ff02 	bl	800042c <testRoutine>
	showNextPattern(&Bus2_LEDStripeQueue, bus2_timer, bus_2);
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <runScheduler+0x68>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2201      	movs	r2, #1
 800062e:	4619      	mov	r1, r3
 8000630:	4816      	ldr	r0, [pc, #88]	; (800068c <runScheduler+0x6c>)
 8000632:	f7ff fe8d 	bl	8000350 <showNextPattern>
	while (1) {
		if (notif & LED_BUS1_NOTIF) {
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <runScheduler+0x70>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00c      	beq.n	800065c <runScheduler+0x3c>
			debug_log("Received LED_BUS1_NOTIF");
 8000642:	4814      	ldr	r0, [pc, #80]	; (8000694 <runScheduler+0x74>)
 8000644:	f7ff fd8e 	bl	8000164 <debug_log>
			showNextPattern(&Bus1_LEDStripeQueue, bus1_timer, bus_1);
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <runScheduler+0x78>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2200      	movs	r2, #0
 800064e:	4619      	mov	r1, r3
 8000650:	4812      	ldr	r0, [pc, #72]	; (800069c <runScheduler+0x7c>)
 8000652:	f7ff fe7d 	bl	8000350 <showNextPattern>
			unsetNotification(LED_BUS1_NOTIF);
 8000656:	2001      	movs	r0, #1
 8000658:	f7ff ffd0 	bl	80005fc <unsetNotification>
		}
		if (notif & LED_BUS2_NOTIF) {
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <runScheduler+0x70>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f003 0302 	and.w	r3, r3, #2
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0e6      	beq.n	8000636 <runScheduler+0x16>
			debug_log("Received LED_BUS2_NOTIF");
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <runScheduler+0x80>)
 800066a:	f7ff fd7b 	bl	8000164 <debug_log>
			showNextPattern(&Bus2_LEDStripeQueue, bus2_timer, bus_2);
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <runScheduler+0x68>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <runScheduler+0x6c>)
 8000678:	f7ff fe6a 	bl	8000350 <showNextPattern>
			unsetNotification(LED_BUS2_NOTIF);
 800067c:	2002      	movs	r0, #2
 800067e:	f7ff ffbd 	bl	80005fc <unsetNotification>
			//TODO: delete this
			testRoutine();
 8000682:	f7ff fed3 	bl	800042c <testRoutine>
		if (notif & LED_BUS1_NOTIF) {
 8000686:	e7d6      	b.n	8000636 <runScheduler+0x16>
 8000688:	20000104 	.word	0x20000104
 800068c:	20000094 	.word	0x20000094
 8000690:	200001a4 	.word	0x200001a4
 8000694:	08004038 	.word	0x08004038
 8000698:	20000100 	.word	0x20000100
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	08004050 	.word	0x08004050

080006a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006a8:	f000 fdc6 	bl	8001238 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ac:	f000 f83c 	bl	8000728 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	debug_log("Q-loud LEDController Init ...");
 80006b0:	4816      	ldr	r0, [pc, #88]	; (800070c <main+0x68>)
 80006b2:	f7ff fd57 	bl	8000164 <debug_log>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006b6:	f000 f9a9 	bl	8000a0c <MX_GPIO_Init>
	MX_DMA_Init();
 80006ba:	f000 f981 	bl	80009c0 <MX_DMA_Init>
	MX_SPI2_Init();
 80006be:	f000 f8ab 	bl	8000818 <MX_SPI2_Init>
	MX_SPI1_Init();
 80006c2:	f000 f873 	bl	80007ac <MX_SPI1_Init>
	MX_TIM2_Init();
 80006c6:	f000 f8dd 	bl	8000884 <MX_TIM2_Init>
	MX_TIM3_Init();
 80006ca:	f000 f92b 	bl	8000924 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d4:	480e      	ldr	r0, [pc, #56]	; (8000710 <main+0x6c>)
 80006d6:	f001 fa89 	bl	8001bec <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80006da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006de:	f000 fe0d 	bl	80012fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <main+0x6c>)
 80006ea:	f001 fa7f 	bl	8001bec <HAL_GPIO_WritePin>
	initializeSPIAdapter(&hspi1, &hspi2);
 80006ee:	4909      	ldr	r1, [pc, #36]	; (8000714 <main+0x70>)
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <main+0x74>)
 80006f2:	f000 f9e9 	bl	8000ac8 <initializeSPIAdapter>
	initializeLEDApplication(&htim2, &htim3);
 80006f6:	4909      	ldr	r1, [pc, #36]	; (800071c <main+0x78>)
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <main+0x7c>)
 80006fa:	f7ff fd67 	bl	80001cc <initializeLEDApplication>
	debug_log("Initialization done.");
 80006fe:	4809      	ldr	r0, [pc, #36]	; (8000724 <main+0x80>)
 8000700:	f7ff fd30 	bl	8000164 <debug_log>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		runScheduler();
 8000704:	f7ff ff8c 	bl	8000620 <runScheduler>
 8000708:	e7fc      	b.n	8000704 <main+0x60>
 800070a:	bf00      	nop
 800070c:	08004068 	.word	0x08004068
 8000710:	40011000 	.word	0x40011000
 8000714:	200001a8 	.word	0x200001a8
 8000718:	20000240 	.word	0x20000240
 800071c:	20000200 	.word	0x20000200
 8000720:	20000298 	.word	0x20000298
 8000724:	08004088 	.word	0x08004088

08000728 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b090      	sub	sp, #64	; 0x40
 800072c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	2228      	movs	r2, #40	; 0x28
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fc7d 	bl	8003036 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074a:	2302      	movs	r3, #2
 800074c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074e:	2301      	movs	r3, #1
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2310      	movs	r3, #16
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800075a:	2300      	movs	r3, #0
 800075c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800075e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fa57 	bl	8001c1c <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x50>
		Error_Handler();
 8000774:	f000 f9a2 	bl	8000abc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000788:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2102      	movs	r1, #2
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fcc2 	bl	800211c <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x7a>
		Error_Handler();
 800079e:	f000 f98d 	bl	8000abc <Error_Handler>
	}
}
 80007a2:	bf00      	nop
 80007a4:	3740      	adds	r7, #64	; 0x40
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_SPI1_Init+0x64>)
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_SPI1_Init+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_SPI1_Init+0x64>)
 80007b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007bc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_SPI1_Init+0x64>)
 80007d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007dc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SPI1_Init+0x64>)
 80007e0:	2210      	movs	r2, #16
 80007e2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SPI1_Init+0x64>)
 80007f8:	220a      	movs	r2, #10
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_SPI1_Init+0x64>)
 80007fe:	f001 fdf7 	bl	80023f0 <HAL_SPI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SPI1_Init+0x60>
		Error_Handler();
 8000808:	f000 f958 	bl	8000abc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000240 	.word	0x20000240
 8000814:	40013000 	.word	0x40013000

08000818 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI2_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_SPI2_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI2_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI2_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI2_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI2_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI2_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI2_Init+0x64>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI2_Init+0x64>)
 800084c:	2208      	movs	r2, #8
 800084e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI2_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI2_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI2_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI2_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI2_Init+0x64>)
 800086a:	f001 fdc1 	bl	80023f0 <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000874:	f000 f922 	bl	8000abc <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001a8 	.word	0x200001a8
 8000880:	40003800 	.word	0x40003800

08000884 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */
	htim2.Init.RepetitionCounter = 1;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_TIM2_Init+0x9c>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	615a      	str	r2, [r3, #20]
	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80008a6:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_TIM2_Init+0x9c>)
 80008a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ac:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 64000;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_TIM2_Init+0x9c>)
 80008b0:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80008b4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_TIM2_Init+0x9c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4000;
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_TIM2_Init+0x9c>)
 80008be:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80008c2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_TIM2_Init+0x9c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_TIM2_Init+0x9c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80008d0:	4813      	ldr	r0, [pc, #76]	; (8000920 <MX_TIM2_Init+0x9c>)
 80008d2:	f001 ffc1 	bl	8002858 <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x5c>
		Error_Handler();
 80008dc:	f000 f8ee 	bl	8000abc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	4619      	mov	r1, r3
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <MX_TIM2_Init+0x9c>)
 80008ee:	f002 f933 	bl	8002b58 <HAL_TIM_ConfigClockSource>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x78>
		Error_Handler();
 80008f8:	f000 f8e0 	bl	8000abc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_TIM2_Init+0x9c>)
 800090a:	f002 faf9 	bl	8002f00 <HAL_TIMEx_MasterConfigSynchronization>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0x94>
			!= HAL_OK) {
		Error_Handler();
 8000914:	f000 f8d2 	bl	8000abc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000298 	.word	0x20000298

08000924 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_TIM3_Init+0x94>)
 8000942:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <MX_TIM3_Init+0x98>)
 8000944:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 64000;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_TIM3_Init+0x94>)
 8000948:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800094c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_TIM3_Init+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3000;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_TIM3_Init+0x94>)
 8000956:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800095a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_TIM3_Init+0x94>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_TIM3_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000968:	4813      	ldr	r0, [pc, #76]	; (80009b8 <MX_TIM3_Init+0x94>)
 800096a:	f001 ff75 	bl	8002858 <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0x54>
		Error_Handler();
 8000974:	f000 f8a2 	bl	8000abc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <MX_TIM3_Init+0x94>)
 8000986:	f002 f8e7 	bl	8002b58 <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM3_Init+0x70>
		Error_Handler();
 8000990:	f000 f894 	bl	8000abc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_TIM3_Init+0x94>)
 80009a2:	f002 faad 	bl	8002f00 <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80009ac:	f000 f886 	bl	8000abc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000200 	.word	0x20000200
 80009bc:	40000400 	.word	0x40000400

080009c0 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_DMA_Init+0x48>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <MX_DMA_Init+0x48>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6153      	str	r3, [r2, #20]
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_DMA_Init+0x48>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	200d      	movs	r0, #13
 80009e4:	f000 fd83 	bl	80014ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009e8:	200d      	movs	r0, #13
 80009ea:	f000 fd9c 	bl	8001526 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	200f      	movs	r0, #15
 80009f4:	f000 fd7b 	bl	80014ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80009f8:	200f      	movs	r0, #15
 80009fa:	f000 fd94 	bl	8001526 <HAL_NVIC_EnableIRQ>

}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a20:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a23      	ldr	r2, [pc, #140]	; (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0310 	and.w	r3, r3, #16
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a3e:	f043 0320 	orr.w	r3, r3, #32
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0320 	and.w	r3, r3, #32
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_GPIO_Init+0xac>)
 8000a88:	f001 f8b0 	bl	8001bec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_GPIO_Init+0xac>)
 8000aa6:	f000 ff47 	bl	8001938 <HAL_GPIO_Init>

}
 8000aaa:	bf00      	nop
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40011000 	.word	0x40011000

08000abc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <initializeSPIAdapter>:
#include "sk6812_rgbw.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void initializeSPIAdapter(SPI_HandleTypeDef *hspi_1, SPI_HandleTypeDef *hspi_2) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
	memcpy(&bus1, hspi_1, sizeof(SPI_HandleTypeDef));
 8000ad2:	2258      	movs	r2, #88	; 0x58
 8000ad4:	6879      	ldr	r1, [r7, #4]
 8000ad6:	4809      	ldr	r0, [pc, #36]	; (8000afc <initializeSPIAdapter+0x34>)
 8000ad8:	f002 faa2 	bl	8003020 <memcpy>
	memcpy(&bus2, hspi_2, sizeof(SPI_HandleTypeDef));
 8000adc:	2258      	movs	r2, #88	; 0x58
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <initializeSPIAdapter+0x38>)
 8000ae2:	f002 fa9d 	bl	8003020 <memcpy>

	HAL_SPI_MspInit(&bus1);
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <initializeSPIAdapter+0x34>)
 8000ae8:	f000 f92e 	bl	8000d48 <HAL_SPI_MspInit>
	HAL_SPI_MspInit(&bus2);
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <initializeSPIAdapter+0x38>)
 8000aee:	f000 f92b 	bl	8000d48 <HAL_SPI_MspInit>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000014c 	.word	0x2000014c
 8000b00:	200000a8 	.word	0x200000a8

08000b04 <sendSymbolStreamOnLine>:

static void sendSymbolStreamOnLine(uint8_t *symbols, uint16_t length,
		spi_bus_num_t busNum) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b098      	sub	sp, #96	; 0x60
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]
 8000b10:	4613      	mov	r3, r2
 8000b12:	707b      	strb	r3, [r7, #1]
	SPI_HandleTypeDef hspi;

	if(busNum == bus_1){
 8000b14:	787b      	ldrb	r3, [r7, #1]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d108      	bne.n	8000b2c <sendSymbolStreamOnLine+0x28>
		hspi = bus1;
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <sendSymbolStreamOnLine+0x5c>)
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	4611      	mov	r1, r2
 8000b22:	2258      	movs	r2, #88	; 0x58
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fa7b 	bl	8003020 <memcpy>
 8000b2a:	e00a      	b.n	8000b42 <sendSymbolStreamOnLine+0x3e>
	}
	else if(busNum == bus_2){
 8000b2c:	787b      	ldrb	r3, [r7, #1]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d107      	bne.n	8000b42 <sendSymbolStreamOnLine+0x3e>
		hspi = bus2;
 8000b32:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <sendSymbolStreamOnLine+0x60>)
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	4611      	mov	r1, r2
 8000b3a:	2258      	movs	r2, #88	; 0x58
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 fa6f 	bl	8003020 <memcpy>
	}

	HAL_SPI_Transmit_DMA(&hspi, symbols, length);
 8000b42:	887a      	ldrh	r2, [r7, #2]
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fcb2 	bl	80024b4 <HAL_SPI_Transmit_DMA>
	free(symbols);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f002 fa5d 	bl	8003010 <free>
}
 8000b56:	bf00      	nop
 8000b58:	3760      	adds	r7, #96	; 0x60
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000014c 	.word	0x2000014c
 8000b64:	200000a8 	.word	0x200000a8

08000b68 <color2Symbol>:

static void color2Symbol(uint8_t color, uint8_t *symbol_stream) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
	const uint8_t oneSymbol = 0b11110000;
 8000b74:	23f0      	movs	r3, #240	; 0xf0
 8000b76:	73fb      	strb	r3, [r7, #15]
	const uint8_t zeroSymbol = 0b11000000;
 8000b78:	23c0      	movs	r3, #192	; 0xc0
 8000b7a:	73bb      	strb	r3, [r7, #14]
	uint16_t cursor = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	82fb      	strh	r3, [r7, #22]

	for (int i = 7; i >= 0; i--) {
 8000b80:	2307      	movs	r3, #7
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	e018      	b.n	8000bb8 <color2Symbol+0x50>
		if (color & (1 << i)) {
 8000b86:	79fa      	ldrb	r2, [r7, #7]
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	fa42 f303 	asr.w	r3, r2, r3
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d005      	beq.n	8000ba2 <color2Symbol+0x3a>
			memcpy(symbol_stream + cursor, &oneSymbol, 1);
 8000b96:	8afb      	ldrh	r3, [r7, #22]
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	7bfa      	ldrb	r2, [r7, #15]
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e004      	b.n	8000bac <color2Symbol+0x44>
		} else {
			memcpy(symbol_stream + cursor, &zeroSymbol, 1);
 8000ba2:	8afb      	ldrh	r3, [r7, #22]
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	7bba      	ldrb	r2, [r7, #14]
 8000baa:	701a      	strb	r2, [r3, #0]
		}
		cursor++;
 8000bac:	8afb      	ldrh	r3, [r7, #22]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	82fb      	strh	r3, [r7, #22]
	for (int i = 7; i >= 0; i--) {
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	dae3      	bge.n	8000b86 <color2Symbol+0x1e>
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	371c      	adds	r7, #28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <getColorSymbolStream>:

static void getColorSymbolStream(led_rgb_color_t *led, uint8_t *symbol_stream) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
	uint16_t cursor = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	81fb      	strh	r3, [r7, #14]

	color2Symbol(led->green, symbol_stream + cursor);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	7858      	ldrb	r0, [r3, #1]
 8000bda:	89fb      	ldrh	r3, [r7, #14]
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	f7ff ffc1 	bl	8000b68 <color2Symbol>
	cursor += 8;
 8000be6:	89fb      	ldrh	r3, [r7, #14]
 8000be8:	3308      	adds	r3, #8
 8000bea:	81fb      	strh	r3, [r7, #14]
	color2Symbol(led->red, symbol_stream + cursor);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7818      	ldrb	r0, [r3, #0]
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f7ff ffb6 	bl	8000b68 <color2Symbol>
	cursor += 8;
 8000bfc:	89fb      	ldrh	r3, [r7, #14]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	81fb      	strh	r3, [r7, #14]
	color2Symbol(led->blue, symbol_stream + cursor);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7898      	ldrb	r0, [r3, #2]
 8000c06:	89fb      	ldrh	r3, [r7, #14]
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f7ff ffab 	bl	8000b68 <color2Symbol>
	cursor += 8;
 8000c12:	89fb      	ldrh	r3, [r7, #14]
 8000c14:	3308      	adds	r3, #8
 8000c16:	81fb      	strh	r3, [r7, #14]
	color2Symbol(led->white, symbol_stream + cursor);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	78d8      	ldrb	r0, [r3, #3]
 8000c1c:	89fb      	ldrh	r3, [r7, #14]
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	4413      	add	r3, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	f7ff ffa0 	bl	8000b68 <color2Symbol>
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <buildSymbolStream>:

static void buildSymbolStream(uint8_t **stream, led_rgb_color_t *led,
		uint16_t ledNum) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	80fb      	strh	r3, [r7, #6]
	uint16_t stream_length = LED_STREAM_LENGTH(ledNum);
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	015b      	lsls	r3, r3, #5
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	3378      	adds	r3, #120	; 0x78
 8000c46:	823b      	strh	r3, [r7, #16]
	uint32_t cursor = START_OFFSET;
 8000c48:	233c      	movs	r3, #60	; 0x3c
 8000c4a:	617b      	str	r3, [r7, #20]
	*stream = malloc(stream_length);
 8000c4c:	8a3b      	ldrh	r3, [r7, #16]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 f9d6 	bl	8003000 <malloc>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	601a      	str	r2, [r3, #0]

	memset(*stream, 0, stream_length);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	8a3a      	ldrh	r2, [r7, #16]
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 f9e6 	bl	8003036 <memset>
	for (uint16_t i = 0; i < ledNum; i++) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	827b      	strh	r3, [r7, #18]
 8000c6e:	e010      	b.n	8000c92 <buildSymbolStream+0x62>
		getColorSymbolStream(led + i, (*stream) + cursor);
 8000c70:	8a7b      	ldrh	r3, [r7, #18]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	18d0      	adds	r0, r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4619      	mov	r1, r3
 8000c82:	f7ff ffa1 	bl	8000bc8 <getColorSymbolStream>
		cursor += SINGLE_LED_FRAME_SIZE;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3320      	adds	r3, #32
 8000c8a:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < ledNum; i++) {
 8000c8c:	8a7b      	ldrh	r3, [r7, #18]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	827b      	strh	r3, [r7, #18]
 8000c92:	8a7a      	ldrh	r2, [r7, #18]
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3ea      	bcc.n	8000c70 <buildSymbolStream+0x40>
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <showLEDs>:

	showLEDs(led, ledNum, busNum);
	free(led);
}

void showLEDs(led_rgb_color_t *led, uint16_t ledNum, spi_bus_num_t busNum) {
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b084      	sub	sp, #16
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	807b      	strh	r3, [r7, #2]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	707b      	strb	r3, [r7, #1]
	uint8_t *symbols_stream = NULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
	uint16_t stream_length = LED_STREAM_LENGTH(ledNum);
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	015b      	lsls	r3, r3, #5
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	3378      	adds	r3, #120	; 0x78
 8000cbe:	81fb      	strh	r3, [r7, #14]

	buildSymbolStream(&symbols_stream, led, ledNum);
 8000cc0:	887a      	ldrh	r2, [r7, #2]
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ffb1 	bl	8000c30 <buildSymbolStream>
	sendSymbolStreamOnLine(symbols_stream, stream_length, busNum);
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	787a      	ldrb	r2, [r7, #1]
 8000cd2:	89f9      	ldrh	r1, [r7, #14]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff15 	bl	8000b04 <sendSymbolStreamOnLine>
}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_MspInit+0x5c>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <HAL_MspInit+0x5c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_MspInit+0x5c>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x5c>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_MspInit+0x5c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	61d3      	str	r3, [r2, #28]
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_MspInit+0x5c>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_MspInit+0x60>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_MspInit+0x60>)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000

08000d48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a52      	ldr	r2, [pc, #328]	; (8000eac <HAL_SPI_MspInit+0x164>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d14b      	bne.n	8000e00 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d68:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <HAL_SPI_MspInit+0x168>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a50      	ldr	r2, [pc, #320]	; (8000eb0 <HAL_SPI_MspInit+0x168>)
 8000d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b4e      	ldr	r3, [pc, #312]	; (8000eb0 <HAL_SPI_MspInit+0x168>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <HAL_SPI_MspInit+0x168>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a4a      	ldr	r2, [pc, #296]	; (8000eb0 <HAL_SPI_MspInit+0x168>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b48      	ldr	r3, [pc, #288]	; (8000eb0 <HAL_SPI_MspInit+0x168>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d98:	23a0      	movs	r3, #160	; 0xa0
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4842      	ldr	r0, [pc, #264]	; (8000eb4 <HAL_SPI_MspInit+0x16c>)
 8000dac:	f000 fdc4 	bl	8001938 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000db0:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <HAL_SPI_MspInit+0x170>)
 8000db2:	4a42      	ldr	r2, [pc, #264]	; (8000ebc <HAL_SPI_MspInit+0x174>)
 8000db4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000db6:	4b40      	ldr	r3, [pc, #256]	; (8000eb8 <HAL_SPI_MspInit+0x170>)
 8000db8:	2210      	movs	r2, #16
 8000dba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dbc:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <HAL_SPI_MspInit+0x170>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc2:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <HAL_SPI_MspInit+0x170>)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc8:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <HAL_SPI_MspInit+0x170>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dce:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <HAL_SPI_MspInit+0x170>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000dd4:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <HAL_SPI_MspInit+0x170>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000dda:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <HAL_SPI_MspInit+0x170>)
 8000ddc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000de2:	4835      	ldr	r0, [pc, #212]	; (8000eb8 <HAL_SPI_MspInit+0x170>)
 8000de4:	f000 fbba 	bl	800155c <HAL_DMA_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8000dee:	f7ff fe65 	bl	8000abc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a30      	ldr	r2, [pc, #192]	; (8000eb8 <HAL_SPI_MspInit+0x170>)
 8000df6:	649a      	str	r2, [r3, #72]	; 0x48
 8000df8:	4a2f      	ldr	r2, [pc, #188]	; (8000eb8 <HAL_SPI_MspInit+0x170>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dfe:	e050      	b.n	8000ea2 <HAL_SPI_MspInit+0x15a>
  else if(hspi->Instance==SPI2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a2e      	ldr	r2, [pc, #184]	; (8000ec0 <HAL_SPI_MspInit+0x178>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d14b      	bne.n	8000ea2 <HAL_SPI_MspInit+0x15a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e0a:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <HAL_SPI_MspInit+0x168>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a28      	ldr	r2, [pc, #160]	; (8000eb0 <HAL_SPI_MspInit+0x168>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e14:	61d3      	str	r3, [r2, #28]
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_SPI_MspInit+0x168>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_SPI_MspInit+0x168>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <HAL_SPI_MspInit+0x168>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	6193      	str	r3, [r2, #24]
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_SPI_MspInit+0x168>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000e3a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	481d      	ldr	r0, [pc, #116]	; (8000ec4 <HAL_SPI_MspInit+0x17c>)
 8000e50:	f000 fd72 	bl	8001938 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_SPI_MspInit+0x180>)
 8000e56:	4a1d      	ldr	r2, [pc, #116]	; (8000ecc <HAL_SPI_MspInit+0x184>)
 8000e58:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_SPI_MspInit+0x180>)
 8000e5c:	2210      	movs	r2, #16
 8000e5e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_SPI_MspInit+0x180>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_SPI_MspInit+0x180>)
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_SPI_MspInit+0x180>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_SPI_MspInit+0x180>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_SPI_MspInit+0x180>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_SPI_MspInit+0x180>)
 8000e80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000e86:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <HAL_SPI_MspInit+0x180>)
 8000e88:	f000 fb68 	bl	800155c <HAL_DMA_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_SPI_MspInit+0x14e>
      Error_Handler();
 8000e92:	f7ff fe13 	bl	8000abc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <HAL_SPI_MspInit+0x180>)
 8000e9a:	649a      	str	r2, [r3, #72]	; 0x48
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_SPI_MspInit+0x180>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40013000 	.word	0x40013000
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	2000031c 	.word	0x2000031c
 8000ebc:	40020030 	.word	0x40020030
 8000ec0:	40003800 	.word	0x40003800
 8000ec4:	40010c00 	.word	0x40010c00
 8000ec8:	200002d8 	.word	0x200002d8
 8000ecc:	40020058 	.word	0x40020058

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee0:	d114      	bne.n	8000f0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_TIM_Base_MspInit+0x78>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <HAL_TIM_Base_MspInit+0x78>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_TIM_Base_MspInit+0x78>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	201c      	movs	r0, #28
 8000f00:	f000 faf5 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f04:	201c      	movs	r0, #28
 8000f06:	f000 fb0e 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f0a:	e018      	b.n	8000f3e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_TIM_Base_MspInit+0x7c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d113      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_TIM_Base_MspInit+0x78>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_TIM_Base_MspInit+0x78>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	61d3      	str	r3, [r2, #28]
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_TIM_Base_MspInit+0x78>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	201d      	movs	r0, #29
 8000f34:	f000 fadb 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f38:	201d      	movs	r0, #29
 8000f3a:	f000 faf4 	bl	8001526 <HAL_NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40000400 	.word	0x40000400

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <HardFault_Handler+0x4>

08000f62 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <MemManage_Handler+0x4>

08000f68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <BusFault_Handler+0x4>

08000f6e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <UsageFault_Handler+0x4>

08000f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f992 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA1_Channel3_IRQHandler+0x10>)
 8000faa:	f000 fb91 	bl	80016d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000031c 	.word	0x2000031c

08000fb8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <DMA1_Channel5_IRQHandler+0x10>)
 8000fbe:	f000 fb87 	bl	80016d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200002d8 	.word	0x200002d8

08000fcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <TIM2_IRQHandler+0x10>)
 8000fd2:	f001 fcb9 	bl	8002948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000298 	.word	0x20000298

08000fe0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <TIM3_IRQHandler+0x10>)
 8000fe6:	f001 fcaf 	bl	8002948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000200 	.word	0x20000200

08000ff4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ffc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001000:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d013      	beq.n	8001034 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800100c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001010:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001014:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00b      	beq.n	8001034 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800101c:	e000      	b.n	8001020 <ITM_SendChar+0x2c>
    {
      __NOP();
 800101e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001020:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f9      	beq.n	800101e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800102a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <__io_putchar>:
char **environ = __env;

/* Functions */
#include "stdio.h"
int __io_putchar(int ch)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 ITM_SendChar(ch);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ffd2 	bl	8000ff4 <ITM_SendChar>
 return(ch);
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	e00a      	b.n	8001082 <_read+0x28>
		*ptr++ = __io_getchar();
 800106c:	f3af 8000 	nop.w
 8001070:	4601      	mov	r1, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	60ba      	str	r2, [r7, #8]
 8001078:	b2ca      	uxtb	r2, r1
 800107a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	429a      	cmp	r2, r3
 8001088:	dbf0      	blt.n	800106c <_read+0x12>
	}

	return len;
 800108a:	687b      	ldr	r3, [r7, #4]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e009      	b.n	80010ba <_write+0x26>
		__io_putchar(*ptr++);
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	60ba      	str	r2, [r7, #8]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ffc6 	bl	8001040 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	429a      	cmp	r2, r3
 80010c0:	dbf1      	blt.n	80010a6 <_write+0x12>
	}
	return len;
 80010c2:	687b      	ldr	r3, [r7, #4]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_close>:

int _close(int file) {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	return -1;
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f2:	605a      	str	r2, [r3, #4]
	return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <_isatty>:

int _isatty(int file) {
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	return 1;
 8001108:	2301      	movs	r3, #1
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
	return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <_sbrk+0x50>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x16>
		heap_end = &end;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <_sbrk+0x50>)
 800113e:	4a10      	ldr	r2, [pc, #64]	; (8001180 <_sbrk+0x54>)
 8001140:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <_sbrk+0x50>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <_sbrk+0x50>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	466a      	mov	r2, sp
 8001152:	4293      	cmp	r3, r2
 8001154:	d907      	bls.n	8001166 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001156:	f001 ff29 	bl	8002fac <__errno>
 800115a:	4602      	mov	r2, r0
 800115c:	230c      	movs	r3, #12
 800115e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001164:	e006      	b.n	8001174 <_sbrk+0x48>
	}

	heap_end += incr;
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <_sbrk+0x50>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a03      	ldr	r2, [pc, #12]	; (800117c <_sbrk+0x50>)
 8001170:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000009c 	.word	0x2000009c
 8001180:	20000368 	.word	0x20000368

08001184 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <SystemInit+0x5c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <SystemInit+0x5c>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <SystemInit+0x5c>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	4911      	ldr	r1, [pc, #68]	; (80011e0 <SystemInit+0x5c>)
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <SystemInit+0x60>)
 800119c:	4013      	ands	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <SystemInit+0x5c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <SystemInit+0x5c>)
 80011a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <SystemInit+0x5c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SystemInit+0x5c>)
 80011b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <SystemInit+0x5c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <SystemInit+0x5c>)
 80011c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80011c6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SystemInit+0x5c>)
 80011ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011ce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SystemInit+0x64>)
 80011d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d6:	609a      	str	r2, [r3, #8]
#endif 
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40021000 	.word	0x40021000
 80011e4:	f8ff0000 	.word	0xf8ff0000
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011ee:	e003      	b.n	80011f8 <LoopCopyDataInit>

080011f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011f6:	3104      	adds	r1, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011f8:	480a      	ldr	r0, [pc, #40]	; (8001224 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001200:	d3f6      	bcc.n	80011f0 <CopyDataInit>
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001204:	e002      	b.n	800120c <LoopFillZerobss>

08001206 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001208:	f842 3b04 	str.w	r3, [r2], #4

0800120c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800120e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001210:	d3f9      	bcc.n	8001206 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001212:	f7ff ffb7 	bl	8001184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f001 fecf 	bl	8002fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121a:	f7ff fa43 	bl	80006a4 <main>
  bx lr
 800121e:	4770      	bx	lr
  ldr r3, =_sidata
 8001220:	08004164 	.word	0x08004164
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001228:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800122c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001230:	20000368 	.word	0x20000368

08001234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_2_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_Init+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_Init+0x28>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f945 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fd46 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f95d 	bl	8001542 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a0:	f000 f925 	bl	80014ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x1c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_IncTick+0x20>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <HAL_IncTick+0x20>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000360 	.word	0x20000360

080012e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <HAL_GetTick+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000360 	.word	0x20000360

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff fff0 	bl	80012e8 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_Delay+0x40>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffe0 	bl	80012e8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000008 	.word	0x20000008

08001340 <__NVIC_SetPriorityGrouping>:
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4906      	ldr	r1, [pc, #24]	; (80013d8 <__NVIC_EnableIRQ+0x34>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <SysTick_Config>:
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b8:	f7ff ff90 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff2d 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001500:	f7ff ff42 	bl	8001388 <__NVIC_GetPriorityGrouping>
 8001504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f7ff ff90 	bl	8001430 <NVIC_EncodePriority>
 8001510:	4602      	mov	r2, r0
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff5f 	bl	80013dc <__NVIC_SetPriority>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff35 	bl	80013a4 <__NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ffa2 	bl	8001494 <SysTick_Config>
 8001550:	4603      	mov	r3, r0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e043      	b.n	80015fa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_DMA_Init+0xa8>)
 800157a:	4413      	add	r3, r2
 800157c:	4a22      	ldr	r2, [pc, #136]	; (8001608 <HAL_DMA_Init+0xac>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	009a      	lsls	r2, r3, #2
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a1f      	ldr	r2, [pc, #124]	; (800160c <HAL_DMA_Init+0xb0>)
 800158e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	bffdfff8 	.word	0xbffdfff8
 8001608:	cccccccd 	.word	0xcccccccd
 800160c:	40020000 	.word	0x40020000

08001610 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_DMA_Start_IT+0x20>
 800162c:	2302      	movs	r3, #2
 800162e:	e04a      	b.n	80016c6 <HAL_DMA_Start_IT+0xb6>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800163e:	2b01      	cmp	r3, #1
 8001640:	d13a      	bne.n	80016b8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2202      	movs	r2, #2
 8001646:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 f938 	bl	80018dc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 020e 	orr.w	r2, r2, #14
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	e00f      	b.n	80016a6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0204 	bic.w	r2, r2, #4
 8001694:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 020a 	orr.w	r2, r2, #10
 80016a4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0201 	orr.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e005      	b.n	80016c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016c0:	2302      	movs	r3, #2
 80016c2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	2204      	movs	r2, #4
 80016ee:	409a      	lsls	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d04f      	beq.n	8001798 <HAL_DMA_IRQHandler+0xc8>
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d04a      	beq.n	8001798 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0320 	and.w	r3, r3, #32
 800170c:	2b00      	cmp	r3, #0
 800170e:	d107      	bne.n	8001720 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0204 	bic.w	r2, r2, #4
 800171e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a66      	ldr	r2, [pc, #408]	; (80018c0 <HAL_DMA_IRQHandler+0x1f0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d029      	beq.n	800177e <HAL_DMA_IRQHandler+0xae>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a65      	ldr	r2, [pc, #404]	; (80018c4 <HAL_DMA_IRQHandler+0x1f4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d022      	beq.n	800177a <HAL_DMA_IRQHandler+0xaa>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a63      	ldr	r2, [pc, #396]	; (80018c8 <HAL_DMA_IRQHandler+0x1f8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d01a      	beq.n	8001774 <HAL_DMA_IRQHandler+0xa4>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a62      	ldr	r2, [pc, #392]	; (80018cc <HAL_DMA_IRQHandler+0x1fc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d012      	beq.n	800176e <HAL_DMA_IRQHandler+0x9e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a60      	ldr	r2, [pc, #384]	; (80018d0 <HAL_DMA_IRQHandler+0x200>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00a      	beq.n	8001768 <HAL_DMA_IRQHandler+0x98>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a5f      	ldr	r2, [pc, #380]	; (80018d4 <HAL_DMA_IRQHandler+0x204>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d102      	bne.n	8001762 <HAL_DMA_IRQHandler+0x92>
 800175c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001760:	e00e      	b.n	8001780 <HAL_DMA_IRQHandler+0xb0>
 8001762:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001766:	e00b      	b.n	8001780 <HAL_DMA_IRQHandler+0xb0>
 8001768:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800176c:	e008      	b.n	8001780 <HAL_DMA_IRQHandler+0xb0>
 800176e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001772:	e005      	b.n	8001780 <HAL_DMA_IRQHandler+0xb0>
 8001774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001778:	e002      	b.n	8001780 <HAL_DMA_IRQHandler+0xb0>
 800177a:	2340      	movs	r3, #64	; 0x40
 800177c:	e000      	b.n	8001780 <HAL_DMA_IRQHandler+0xb0>
 800177e:	2304      	movs	r3, #4
 8001780:	4a55      	ldr	r2, [pc, #340]	; (80018d8 <HAL_DMA_IRQHandler+0x208>)
 8001782:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 8094 	beq.w	80018b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001796:	e08e      	b.n	80018b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	2202      	movs	r2, #2
 800179e:	409a      	lsls	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d056      	beq.n	8001856 <HAL_DMA_IRQHandler+0x186>
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d051      	beq.n	8001856 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10b      	bne.n	80017d8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 020a 	bic.w	r2, r2, #10
 80017ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a38      	ldr	r2, [pc, #224]	; (80018c0 <HAL_DMA_IRQHandler+0x1f0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d029      	beq.n	8001836 <HAL_DMA_IRQHandler+0x166>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a37      	ldr	r2, [pc, #220]	; (80018c4 <HAL_DMA_IRQHandler+0x1f4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d022      	beq.n	8001832 <HAL_DMA_IRQHandler+0x162>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a35      	ldr	r2, [pc, #212]	; (80018c8 <HAL_DMA_IRQHandler+0x1f8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01a      	beq.n	800182c <HAL_DMA_IRQHandler+0x15c>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a34      	ldr	r2, [pc, #208]	; (80018cc <HAL_DMA_IRQHandler+0x1fc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d012      	beq.n	8001826 <HAL_DMA_IRQHandler+0x156>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a32      	ldr	r2, [pc, #200]	; (80018d0 <HAL_DMA_IRQHandler+0x200>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00a      	beq.n	8001820 <HAL_DMA_IRQHandler+0x150>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a31      	ldr	r2, [pc, #196]	; (80018d4 <HAL_DMA_IRQHandler+0x204>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d102      	bne.n	800181a <HAL_DMA_IRQHandler+0x14a>
 8001814:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001818:	e00e      	b.n	8001838 <HAL_DMA_IRQHandler+0x168>
 800181a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800181e:	e00b      	b.n	8001838 <HAL_DMA_IRQHandler+0x168>
 8001820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001824:	e008      	b.n	8001838 <HAL_DMA_IRQHandler+0x168>
 8001826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182a:	e005      	b.n	8001838 <HAL_DMA_IRQHandler+0x168>
 800182c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001830:	e002      	b.n	8001838 <HAL_DMA_IRQHandler+0x168>
 8001832:	2320      	movs	r3, #32
 8001834:	e000      	b.n	8001838 <HAL_DMA_IRQHandler+0x168>
 8001836:	2302      	movs	r3, #2
 8001838:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <HAL_DMA_IRQHandler+0x208>)
 800183a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	d034      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001854:	e02f      	b.n	80018b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	2208      	movs	r2, #8
 800185c:	409a      	lsls	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d028      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x1e8>
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d023      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 020e 	bic.w	r2, r2, #14
 800187e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	4798      	blx	r3
    }
  }
  return;
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
}
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40020008 	.word	0x40020008
 80018c4:	4002001c 	.word	0x4002001c
 80018c8:	40020030 	.word	0x40020030
 80018cc:	40020044 	.word	0x40020044
 80018d0:	40020058 	.word	0x40020058
 80018d4:	4002006c 	.word	0x4002006c
 80018d8:	40020000 	.word	0x40020000

080018dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f2:	2101      	movs	r1, #1
 80018f4:	fa01 f202 	lsl.w	r2, r1, r2
 80018f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b10      	cmp	r3, #16
 8001908:	d108      	bne.n	800191c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800191a:	e007      	b.n	800192c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	60da      	str	r2, [r3, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
	...

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b08b      	sub	sp, #44	; 0x2c
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194a:	e127      	b.n	8001b9c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800194c:	2201      	movs	r2, #1
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	429a      	cmp	r2, r3
 8001966:	f040 8116 	bne.w	8001b96 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b12      	cmp	r3, #18
 8001970:	d034      	beq.n	80019dc <HAL_GPIO_Init+0xa4>
 8001972:	2b12      	cmp	r3, #18
 8001974:	d80d      	bhi.n	8001992 <HAL_GPIO_Init+0x5a>
 8001976:	2b02      	cmp	r3, #2
 8001978:	d02b      	beq.n	80019d2 <HAL_GPIO_Init+0x9a>
 800197a:	2b02      	cmp	r3, #2
 800197c:	d804      	bhi.n	8001988 <HAL_GPIO_Init+0x50>
 800197e:	2b00      	cmp	r3, #0
 8001980:	d031      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
 8001982:	2b01      	cmp	r3, #1
 8001984:	d01c      	beq.n	80019c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001986:	e048      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001988:	2b03      	cmp	r3, #3
 800198a:	d043      	beq.n	8001a14 <HAL_GPIO_Init+0xdc>
 800198c:	2b11      	cmp	r3, #17
 800198e:	d01b      	beq.n	80019c8 <HAL_GPIO_Init+0x90>
          break;
 8001990:	e043      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001992:	4a89      	ldr	r2, [pc, #548]	; (8001bb8 <HAL_GPIO_Init+0x280>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d026      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
 8001998:	4a87      	ldr	r2, [pc, #540]	; (8001bb8 <HAL_GPIO_Init+0x280>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d806      	bhi.n	80019ac <HAL_GPIO_Init+0x74>
 800199e:	4a87      	ldr	r2, [pc, #540]	; (8001bbc <HAL_GPIO_Init+0x284>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d020      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
 80019a4:	4a86      	ldr	r2, [pc, #536]	; (8001bc0 <HAL_GPIO_Init+0x288>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d01d      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
          break;
 80019aa:	e036      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019ac:	4a85      	ldr	r2, [pc, #532]	; (8001bc4 <HAL_GPIO_Init+0x28c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d019      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
 80019b2:	4a85      	ldr	r2, [pc, #532]	; (8001bc8 <HAL_GPIO_Init+0x290>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d016      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
 80019b8:	4a84      	ldr	r2, [pc, #528]	; (8001bcc <HAL_GPIO_Init+0x294>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0xae>
          break;
 80019be:	e02c      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	623b      	str	r3, [r7, #32]
          break;
 80019c6:	e028      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	3304      	adds	r3, #4
 80019ce:	623b      	str	r3, [r7, #32]
          break;
 80019d0:	e023      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	3308      	adds	r3, #8
 80019d8:	623b      	str	r3, [r7, #32]
          break;
 80019da:	e01e      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	330c      	adds	r3, #12
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e019      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d102      	bne.n	80019f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ee:	2304      	movs	r3, #4
 80019f0:	623b      	str	r3, [r7, #32]
          break;
 80019f2:	e012      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d105      	bne.n	8001a08 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019fc:	2308      	movs	r3, #8
 80019fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	611a      	str	r2, [r3, #16]
          break;
 8001a06:	e008      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	615a      	str	r2, [r3, #20]
          break;
 8001a12:	e002      	b.n	8001a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
          break;
 8001a18:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2bff      	cmp	r3, #255	; 0xff
 8001a1e:	d801      	bhi.n	8001a24 <HAL_GPIO_Init+0xec>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	e001      	b.n	8001a28 <HAL_GPIO_Init+0xf0>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3304      	adds	r3, #4
 8001a28:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2bff      	cmp	r3, #255	; 0xff
 8001a2e:	d802      	bhi.n	8001a36 <HAL_GPIO_Init+0xfe>
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	e002      	b.n	8001a3c <HAL_GPIO_Init+0x104>
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	3b08      	subs	r3, #8
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	210f      	movs	r1, #15
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	6a39      	ldr	r1, [r7, #32]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	431a      	orrs	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8096 	beq.w	8001b96 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a6a:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <HAL_GPIO_Init+0x298>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_GPIO_Init+0x298>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6193      	str	r3, [r2, #24]
 8001a76:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <HAL_GPIO_Init+0x298>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a82:	4a54      	ldr	r2, [pc, #336]	; (8001bd4 <HAL_GPIO_Init+0x29c>)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	220f      	movs	r2, #15
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4b      	ldr	r2, [pc, #300]	; (8001bd8 <HAL_GPIO_Init+0x2a0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0x19e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4a      	ldr	r2, [pc, #296]	; (8001bdc <HAL_GPIO_Init+0x2a4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_GPIO_Init+0x19a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a49      	ldr	r2, [pc, #292]	; (8001be0 <HAL_GPIO_Init+0x2a8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x196>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <HAL_GPIO_Init+0x2ac>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_GPIO_Init+0x192>
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x1a0>
 8001aca:	2304      	movs	r3, #4
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x1a0>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x1a0>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x1a0>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae8:	493a      	ldr	r1, [pc, #232]	; (8001bd4 <HAL_GPIO_Init+0x29c>)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4938      	ldr	r1, [pc, #224]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
 8001b0e:	e006      	b.n	8001b1e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4933      	ldr	r1, [pc, #204]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	492e      	ldr	r1, [pc, #184]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
 8001b36:	e006      	b.n	8001b46 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b38:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4929      	ldr	r1, [pc, #164]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	4924      	ldr	r1, [pc, #144]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
 8001b5e:	e006      	b.n	8001b6e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	491f      	ldr	r1, [pc, #124]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	491a      	ldr	r1, [pc, #104]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60cb      	str	r3, [r1, #12]
 8001b86:	e006      	b.n	8001b96 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	4915      	ldr	r1, [pc, #84]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	3301      	adds	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f47f aed0 	bne.w	800194c <HAL_GPIO_Init+0x14>
  }
}
 8001bac:	bf00      	nop
 8001bae:	372c      	adds	r7, #44	; 0x2c
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	10210000 	.word	0x10210000
 8001bbc:	10110000 	.word	0x10110000
 8001bc0:	10120000 	.word	0x10120000
 8001bc4:	10310000 	.word	0x10310000
 8001bc8:	10320000 	.word	0x10320000
 8001bcc:	10220000 	.word	0x10220000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	40010800 	.word	0x40010800
 8001bdc:	40010c00 	.word	0x40010c00
 8001be0:	40011000 	.word	0x40011000
 8001be4:	40011400 	.word	0x40011400
 8001be8:	40010400 	.word	0x40010400

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c08:	e003      	b.n	8001c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	041a      	lsls	r2, r3, #16
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	611a      	str	r2, [r3, #16]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e26c      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8087 	beq.w	8001d4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c3c:	4b92      	ldr	r3, [pc, #584]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d00c      	beq.n	8001c62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c48:	4b8f      	ldr	r3, [pc, #572]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d112      	bne.n	8001c7a <HAL_RCC_OscConfig+0x5e>
 8001c54:	4b8c      	ldr	r3, [pc, #560]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c60:	d10b      	bne.n	8001c7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c62:	4b89      	ldr	r3, [pc, #548]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d06c      	beq.n	8001d48 <HAL_RCC_OscConfig+0x12c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d168      	bne.n	8001d48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e246      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x76>
 8001c84:	4b80      	ldr	r3, [pc, #512]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a7f      	ldr	r2, [pc, #508]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e02e      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd4>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x98>
 8001c9a:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a7a      	ldr	r2, [pc, #488]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b78      	ldr	r3, [pc, #480]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a77      	ldr	r2, [pc, #476]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e01d      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd4>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xbc>
 8001cbe:	4b72      	ldr	r3, [pc, #456]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a71      	ldr	r2, [pc, #452]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b6f      	ldr	r3, [pc, #444]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a6e      	ldr	r2, [pc, #440]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd4>
 8001cd8:	4b6b      	ldr	r3, [pc, #428]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6a      	ldr	r2, [pc, #424]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a67      	ldr	r2, [pc, #412]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff faf6 	bl	80012e8 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff faf2 	bl	80012e8 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1fa      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xe4>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fae2 	bl	80012e8 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fade 	bl	80012e8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1e6      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x10c>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d063      	beq.n	8001e1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d56:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d62:	4b49      	ldr	r3, [pc, #292]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d11c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x18c>
 8001d6e:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	4b43      	ldr	r3, [pc, #268]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x176>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1ba      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4939      	ldr	r1, [pc, #228]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e03a      	b.n	8001e1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff fa97 	bl	80012e8 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fa93 	bl	80012e8 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e19b      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4927      	ldr	r1, [pc, #156]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <HAL_RCC_OscConfig+0x270>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fa76 	bl	80012e8 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff fa72 	bl	80012e8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e17a      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d03a      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d019      	beq.n	8001e66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7ff fa56 	bl	80012e8 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff fa52 	bl	80012e8 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e15a      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f000 faa8 	bl	80023b4 <RCC_Delay>
 8001e64:	e01c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_RCC_OscConfig+0x274>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff fa3c 	bl	80012e8 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e72:	e00f      	b.n	8001e94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff fa38 	bl	80012e8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d908      	bls.n	8001e94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e140      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	42420000 	.word	0x42420000
 8001e90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b9e      	ldr	r3, [pc, #632]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1e9      	bne.n	8001e74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80a6 	beq.w	8001ffa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b97      	ldr	r3, [pc, #604]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10d      	bne.n	8001eda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b94      	ldr	r3, [pc, #592]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a93      	ldr	r2, [pc, #588]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b91      	ldr	r3, [pc, #580]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b8e      	ldr	r3, [pc, #568]	; (8002114 <HAL_RCC_OscConfig+0x4f8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee6:	4b8b      	ldr	r3, [pc, #556]	; (8002114 <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a8a      	ldr	r2, [pc, #552]	; (8002114 <HAL_RCC_OscConfig+0x4f8>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef2:	f7ff f9f9 	bl	80012e8 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efa:	f7ff f9f5 	bl	80012e8 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b64      	cmp	r3, #100	; 0x64
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0fd      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b81      	ldr	r3, [pc, #516]	; (8002114 <HAL_RCC_OscConfig+0x4f8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x312>
 8001f20:	4b7b      	ldr	r3, [pc, #492]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a7a      	ldr	r2, [pc, #488]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	e02d      	b.n	8001f8a <HAL_RCC_OscConfig+0x36e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x334>
 8001f36:	4b76      	ldr	r3, [pc, #472]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a75      	ldr	r2, [pc, #468]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	4b73      	ldr	r3, [pc, #460]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a72      	ldr	r2, [pc, #456]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	e01c      	b.n	8001f8a <HAL_RCC_OscConfig+0x36e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d10c      	bne.n	8001f72 <HAL_RCC_OscConfig+0x356>
 8001f58:	4b6d      	ldr	r3, [pc, #436]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4a6c      	ldr	r2, [pc, #432]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4a69      	ldr	r2, [pc, #420]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6213      	str	r3, [r2, #32]
 8001f70:	e00b      	b.n	8001f8a <HAL_RCC_OscConfig+0x36e>
 8001f72:	4b67      	ldr	r3, [pc, #412]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a66      	ldr	r2, [pc, #408]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6213      	str	r3, [r2, #32]
 8001f7e:	4b64      	ldr	r3, [pc, #400]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a63      	ldr	r2, [pc, #396]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	f023 0304 	bic.w	r3, r3, #4
 8001f88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d015      	beq.n	8001fbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7ff f9a9 	bl	80012e8 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7ff f9a5 	bl	80012e8 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e0ab      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb0:	4b57      	ldr	r3, [pc, #348]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0ee      	beq.n	8001f9a <HAL_RCC_OscConfig+0x37e>
 8001fbc:	e014      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f993 	bl	80012e8 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7ff f98f 	bl	80012e8 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e095      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fdc:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ee      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d105      	bne.n	8001ffa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fee:	4b48      	ldr	r3, [pc, #288]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	4a47      	ldr	r2, [pc, #284]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8081 	beq.w	8002106 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b08      	cmp	r3, #8
 800200e:	d061      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d146      	bne.n	80020a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002018:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <HAL_RCC_OscConfig+0x4fc>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff f963 	bl	80012e8 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff f95f 	bl	80012e8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e067      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d108      	bne.n	8002060 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800204e:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	492d      	ldr	r1, [pc, #180]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002060:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a19      	ldr	r1, [r3, #32]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	430b      	orrs	r3, r1
 8002072:	4927      	ldr	r1, [pc, #156]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_OscConfig+0x4fc>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7ff f933 	bl	80012e8 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002086:	f7ff f92f 	bl	80012e8 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e037      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x46a>
 80020a4:	e02f      	b.n	8002106 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_RCC_OscConfig+0x4fc>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff f91c 	bl	80012e8 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7ff f918 	bl	80012e8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e020      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x498>
 80020d2:	e018      	b.n	8002106 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e013      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d001      	beq.n	8002106 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	40007000 	.word	0x40007000
 8002118:	42420060 	.word	0x42420060

0800211c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0d0      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002130:	4b6a      	ldr	r3, [pc, #424]	; (80022dc <HAL_RCC_ClockConfig+0x1c0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d910      	bls.n	8002160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b67      	ldr	r3, [pc, #412]	; (80022dc <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 0207 	bic.w	r2, r3, #7
 8002146:	4965      	ldr	r1, [pc, #404]	; (80022dc <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214e:	4b63      	ldr	r3, [pc, #396]	; (80022dc <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0b8      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d020      	beq.n	80021ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002178:	4b59      	ldr	r3, [pc, #356]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a58      	ldr	r2, [pc, #352]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002182:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002190:	4b53      	ldr	r3, [pc, #332]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a52      	ldr	r2, [pc, #328]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800219a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219c:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	494d      	ldr	r1, [pc, #308]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d040      	beq.n	800223c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d115      	bne.n	80021fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e07f      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021da:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e073      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ea:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e06b      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021fa:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f023 0203 	bic.w	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4936      	ldr	r1, [pc, #216]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800220c:	f7ff f86c 	bl	80012e8 <HAL_GetTick>
 8002210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	e00a      	b.n	800222a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002214:	f7ff f868 	bl	80012e8 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e053      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 020c 	and.w	r2, r3, #12
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	429a      	cmp	r2, r3
 800223a:	d1eb      	bne.n	8002214 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800223c:	4b27      	ldr	r3, [pc, #156]	; (80022dc <HAL_RCC_ClockConfig+0x1c0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d210      	bcs.n	800226c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 0207 	bic.w	r2, r3, #7
 8002252:	4922      	ldr	r1, [pc, #136]	; (80022dc <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225a:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e032      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002278:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4916      	ldr	r1, [pc, #88]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d009      	beq.n	80022aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	490e      	ldr	r1, [pc, #56]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022aa:	f000 f821 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 80022ae:	4601      	mov	r1, r0
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <HAL_RCC_ClockConfig+0x1c8>)
 80022bc:	5cd3      	ldrb	r3, [r2, r3]
 80022be:	fa21 f303 	lsr.w	r3, r1, r3
 80022c2:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <HAL_RCC_ClockConfig+0x1cc>)
 80022c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_RCC_ClockConfig+0x1d0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe ffca 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40022000 	.word	0x40022000
 80022e0:	40021000 	.word	0x40021000
 80022e4:	080040b4 	.word	0x080040b4
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000004 	.word	0x20000004

080022f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f0:	b490      	push	{r4, r7}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022f8:	1d3c      	adds	r4, r7, #4
 80022fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b04      	cmp	r3, #4
 8002328:	d002      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x40>
 800232a:	2b08      	cmp	r3, #8
 800232c:	d003      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x46>
 800232e:	e02d      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002330:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002332:	623b      	str	r3, [r7, #32]
      break;
 8002334:	e02d      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	0c9b      	lsrs	r3, r3, #18
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002342:	4413      	add	r3, r2
 8002344:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002348:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	0c5b      	lsrs	r3, r3, #17
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002362:	4413      	add	r3, r2
 8002364:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002368:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800236e:	fb02 f203 	mul.w	r2, r2, r3
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
 800237a:	e004      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	623b      	str	r3, [r7, #32]
      break;
 800238a:	e002      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800238e:	623b      	str	r3, [r7, #32]
      break;
 8002390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002392:	6a3b      	ldr	r3, [r7, #32]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3728      	adds	r7, #40	; 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bc90      	pop	{r4, r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	080040a0 	.word	0x080040a0
 80023a4:	080040b0 	.word	0x080040b0
 80023a8:	40021000 	.word	0x40021000
 80023ac:	007a1200 	.word	0x007a1200
 80023b0:	003d0900 	.word	0x003d0900

080023b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <RCC_Delay+0x34>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <RCC_Delay+0x38>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0a5b      	lsrs	r3, r3, #9
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d0:	bf00      	nop
  }
  while (Delay --);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e5a      	subs	r2, r3, #1
 80023d6:	60fa      	str	r2, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f9      	bne.n	80023d0 <RCC_Delay+0x1c>
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000000 	.word	0x20000000
 80023ec:	10624dd3 	.word	0x10624dd3

080023f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e053      	b.n	80024aa <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7fe fc93 	bl	8000d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002438:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	ea42 0103 	orr.w	r1, r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	0c1a      	lsrs	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f002 0204 	and.w	r2, r2, #4
 8002488:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002498:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	4613      	mov	r3, r2
 80024c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_SPI_Transmit_DMA+0x20>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e093      	b.n	80025fc <HAL_SPI_Transmit_DMA+0x148>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d002      	beq.n	80024ee <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
 80024ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024ec:	e081      	b.n	80025f2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <HAL_SPI_Transmit_DMA+0x46>
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d102      	bne.n	8002500 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024fe:	e078      	b.n	80025f2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2203      	movs	r2, #3
 8002504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	88fa      	ldrh	r2, [r7, #6]
 800251e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002546:	d107      	bne.n	8002558 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002556:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255c:	4a29      	ldr	r2, [pc, #164]	; (8002604 <HAL_SPI_Transmit_DMA+0x150>)
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002564:	4a28      	ldr	r2, [pc, #160]	; (8002608 <HAL_SPI_Transmit_DMA+0x154>)
 8002566:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	4a27      	ldr	r2, [pc, #156]	; (800260c <HAL_SPI_Transmit_DMA+0x158>)
 800256e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	2200      	movs	r2, #0
 8002576:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	4619      	mov	r1, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	330c      	adds	r3, #12
 8002588:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800258e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002590:	f7ff f83e 	bl	8001610 <HAL_DMA_Start_IT>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259e:	f043 0210 	orr.w	r2, r3, #16
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80025b2:	e01e      	b.n	80025f2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d007      	beq.n	80025d2 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0220 	orr.w	r2, r2, #32
 80025e0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0202 	orr.w	r2, r2, #2
 80025f0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	080026ed 	.word	0x080026ed
 8002608:	08002647 	.word	0x08002647
 800260c:	08002709 	.word	0x08002709

08002610 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002654:	f7fe fe48 	bl	80012e8 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b20      	cmp	r3, #32
 8002666:	d03b      	beq.n	80026e0 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0220 	bic.w	r2, r2, #32
 8002676:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0202 	bic.w	r2, r2, #2
 8002686:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	2164      	movs	r1, #100	; 0x64
 800268c:	6978      	ldr	r0, [r7, #20]
 800268e:	f000 f8c5 	bl	800281c <SPI_EndRxTxTransaction>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	f043 0220 	orr.w	r2, r3, #32
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10a      	bne.n	80026c2 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2200      	movs	r2, #0
 80026c6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80026d8:	6978      	ldr	r0, [r7, #20]
 80026da:	f7ff ffab 	bl	8002634 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80026de:	e002      	b.n	80026e6 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80026e0:	6978      	ldr	r0, [r7, #20]
 80026e2:	f7ff ff95 	bl	8002610 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff ff91 	bl	8002622 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0203 	bic.w	r2, r2, #3
 8002724:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	f043 0210 	orr.w	r2, r3, #16
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff ff7a 	bl	8002634 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002758:	e04c      	b.n	80027f4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002760:	d048      	beq.n	80027f4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002762:	f7fe fdc1 	bl	80012e8 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d902      	bls.n	8002778 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d13d      	bne.n	80027f4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002786:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002790:	d111      	bne.n	80027b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800279a:	d004      	beq.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a4:	d107      	bne.n	80027b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027be:	d10f      	bne.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e00f      	b.n	8002814 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	4013      	ands	r3, r2
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	429a      	cmp	r2, r3
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	429a      	cmp	r2, r3
 8002810:	d1a3      	bne.n	800275a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2200      	movs	r2, #0
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f7ff ff88 	bl	8002748 <SPI_WaitFlagStateUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	f043 0220 	orr.w	r2, r3, #32
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e000      	b.n	8002850 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e01d      	b.n	80028a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe fb26 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3304      	adds	r3, #4
 8002894:	4619      	mov	r1, r3
 8002896:	4610      	mov	r0, r2
 8002898:	f000 fa3a 	bl	8002d10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6a1a      	ldr	r2, [r3, #32]
 80028c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10f      	bne.n	80028ee <HAL_TIM_Base_Stop+0x40>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a1a      	ldr	r2, [r3, #32]
 80028d4:	f240 4344 	movw	r3, #1092	; 0x444
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d107      	bne.n	80028ee <HAL_TIM_Base_Stop+0x40>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b06      	cmp	r3, #6
 800292a:	d007      	beq.n	800293c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d122      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d11b      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0202 	mvn.w	r2, #2
 8002974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f9a4 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f997 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f9a6 	bl	8002cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d122      	bne.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d11b      	bne.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0204 	mvn.w	r2, #4
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f97a 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f96d 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f97c 	bl	8002cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d122      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d11b      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0208 	mvn.w	r2, #8
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2204      	movs	r2, #4
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f950 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f943 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f952 	bl	8002cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d122      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d11b      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0210 	mvn.w	r2, #16
 8002a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2208      	movs	r2, #8
 8002a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f926 	bl	8002cd8 <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f919 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f928 	bl	8002cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10e      	bne.n	8002acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0201 	mvn.w	r2, #1
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fd fc80 	bl	80003cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b80      	cmp	r3, #128	; 0x80
 8002ad8:	d10e      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae4:	2b80      	cmp	r3, #128	; 0x80
 8002ae6:	d107      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa51 	bl	8002f9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d10e      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d107      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8ec 	bl	8002cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	d10e      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d107      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0220 	mvn.w	r2, #32
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa1c 	bl	8002f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIM_ConfigClockSource+0x18>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e0a6      	b.n	8002cbe <HAL_TIM_ConfigClockSource+0x166>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d067      	beq.n	8002c78 <HAL_TIM_ConfigClockSource+0x120>
 8002ba8:	2b40      	cmp	r3, #64	; 0x40
 8002baa:	d80b      	bhi.n	8002bc4 <HAL_TIM_ConfigClockSource+0x6c>
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d073      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0x140>
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d802      	bhi.n	8002bba <HAL_TIM_ConfigClockSource+0x62>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d06f      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002bb8:	e078      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d06c      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0x140>
 8002bbe:	2b30      	cmp	r3, #48	; 0x30
 8002bc0:	d06a      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002bc2:	e073      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002bc4:	2b70      	cmp	r3, #112	; 0x70
 8002bc6:	d00d      	beq.n	8002be4 <HAL_TIM_ConfigClockSource+0x8c>
 8002bc8:	2b70      	cmp	r3, #112	; 0x70
 8002bca:	d804      	bhi.n	8002bd6 <HAL_TIM_ConfigClockSource+0x7e>
 8002bcc:	2b50      	cmp	r3, #80	; 0x50
 8002bce:	d033      	beq.n	8002c38 <HAL_TIM_ConfigClockSource+0xe0>
 8002bd0:	2b60      	cmp	r3, #96	; 0x60
 8002bd2:	d041      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002bd4:	e06a      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bda:	d066      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x152>
 8002bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be0:	d017      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002be2:	e063      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6899      	ldr	r1, [r3, #8]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f000 f965 	bl	8002ec2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]
      break;
 8002c10:	e04c      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6899      	ldr	r1, [r3, #8]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f000 f94e 	bl	8002ec2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c34:	609a      	str	r2, [r3, #8]
      break;
 8002c36:	e039      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	461a      	mov	r2, r3
 8002c46:	f000 f8c5 	bl	8002dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2150      	movs	r1, #80	; 0x50
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f91c 	bl	8002e8e <TIM_ITRx_SetConfig>
      break;
 8002c56:	e029      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f000 f8e3 	bl	8002e30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2160      	movs	r1, #96	; 0x60
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f90c 	bl	8002e8e <TIM_ITRx_SetConfig>
      break;
 8002c76:	e019      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f000 f8a5 	bl	8002dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2140      	movs	r1, #64	; 0x40
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f8fc 	bl	8002e8e <TIM_ITRx_SetConfig>
      break;
 8002c96:	e009      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f000 f8f3 	bl	8002e8e <TIM_ITRx_SetConfig>
      break;
 8002ca8:	e000      	b.n	8002cac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002caa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
	...

08002d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <TIM_Base_SetConfig+0xb8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00b      	beq.n	8002d40 <TIM_Base_SetConfig+0x30>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2e:	d007      	beq.n	8002d40 <TIM_Base_SetConfig+0x30>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a26      	ldr	r2, [pc, #152]	; (8002dcc <TIM_Base_SetConfig+0xbc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0x30>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <TIM_Base_SetConfig+0xc0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d108      	bne.n	8002d52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <TIM_Base_SetConfig+0xb8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <TIM_Base_SetConfig+0x62>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d007      	beq.n	8002d72 <TIM_Base_SetConfig+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <TIM_Base_SetConfig+0xbc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <TIM_Base_SetConfig+0x62>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <TIM_Base_SetConfig+0xc0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d108      	bne.n	8002d84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <TIM_Base_SetConfig+0xb8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d103      	bne.n	8002db8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	615a      	str	r2, [r3, #20]
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40000800 	.word	0x40000800

08002dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f023 0201 	bic.w	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f023 030a 	bic.w	r3, r3, #10
 8002e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f023 0210 	bic.w	r2, r3, #16
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	031b      	lsls	r3, r3, #12
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	621a      	str	r2, [r3, #32]
}
 8002e84:	bf00      	nop
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f043 0307 	orr.w	r3, r3, #7
 8002eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b087      	sub	sp, #28
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002edc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	021a      	lsls	r2, r3, #8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	609a      	str	r2, [r3, #8]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e032      	b.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f50:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <__errno>:
 8002fac:	4b01      	ldr	r3, [pc, #4]	; (8002fb4 <__errno+0x8>)
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	2000000c 	.word	0x2000000c

08002fb8 <__libc_init_array>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	2500      	movs	r5, #0
 8002fbc:	4e0c      	ldr	r6, [pc, #48]	; (8002ff0 <__libc_init_array+0x38>)
 8002fbe:	4c0d      	ldr	r4, [pc, #52]	; (8002ff4 <__libc_init_array+0x3c>)
 8002fc0:	1ba4      	subs	r4, r4, r6
 8002fc2:	10a4      	asrs	r4, r4, #2
 8002fc4:	42a5      	cmp	r5, r4
 8002fc6:	d109      	bne.n	8002fdc <__libc_init_array+0x24>
 8002fc8:	f000 ff8c 	bl	8003ee4 <_init>
 8002fcc:	2500      	movs	r5, #0
 8002fce:	4e0a      	ldr	r6, [pc, #40]	; (8002ff8 <__libc_init_array+0x40>)
 8002fd0:	4c0a      	ldr	r4, [pc, #40]	; (8002ffc <__libc_init_array+0x44>)
 8002fd2:	1ba4      	subs	r4, r4, r6
 8002fd4:	10a4      	asrs	r4, r4, #2
 8002fd6:	42a5      	cmp	r5, r4
 8002fd8:	d105      	bne.n	8002fe6 <__libc_init_array+0x2e>
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fe0:	4798      	blx	r3
 8002fe2:	3501      	adds	r5, #1
 8002fe4:	e7ee      	b.n	8002fc4 <__libc_init_array+0xc>
 8002fe6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fea:	4798      	blx	r3
 8002fec:	3501      	adds	r5, #1
 8002fee:	e7f2      	b.n	8002fd6 <__libc_init_array+0x1e>
 8002ff0:	0800415c 	.word	0x0800415c
 8002ff4:	0800415c 	.word	0x0800415c
 8002ff8:	0800415c 	.word	0x0800415c
 8002ffc:	08004160 	.word	0x08004160

08003000 <malloc>:
 8003000:	4b02      	ldr	r3, [pc, #8]	; (800300c <malloc+0xc>)
 8003002:	4601      	mov	r1, r0
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	f000 b86b 	b.w	80030e0 <_malloc_r>
 800300a:	bf00      	nop
 800300c:	2000000c 	.word	0x2000000c

08003010 <free>:
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <free+0xc>)
 8003012:	4601      	mov	r1, r0
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	f000 b817 	b.w	8003048 <_free_r>
 800301a:	bf00      	nop
 800301c:	2000000c 	.word	0x2000000c

08003020 <memcpy>:
 8003020:	b510      	push	{r4, lr}
 8003022:	1e43      	subs	r3, r0, #1
 8003024:	440a      	add	r2, r1
 8003026:	4291      	cmp	r1, r2
 8003028:	d100      	bne.n	800302c <memcpy+0xc>
 800302a:	bd10      	pop	{r4, pc}
 800302c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003030:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003034:	e7f7      	b.n	8003026 <memcpy+0x6>

08003036 <memset>:
 8003036:	4603      	mov	r3, r0
 8003038:	4402      	add	r2, r0
 800303a:	4293      	cmp	r3, r2
 800303c:	d100      	bne.n	8003040 <memset+0xa>
 800303e:	4770      	bx	lr
 8003040:	f803 1b01 	strb.w	r1, [r3], #1
 8003044:	e7f9      	b.n	800303a <memset+0x4>
	...

08003048 <_free_r>:
 8003048:	b538      	push	{r3, r4, r5, lr}
 800304a:	4605      	mov	r5, r0
 800304c:	2900      	cmp	r1, #0
 800304e:	d043      	beq.n	80030d8 <_free_r+0x90>
 8003050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003054:	1f0c      	subs	r4, r1, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	bfb8      	it	lt
 800305a:	18e4      	addlt	r4, r4, r3
 800305c:	f000 f9b6 	bl	80033cc <__malloc_lock>
 8003060:	4a1e      	ldr	r2, [pc, #120]	; (80030dc <_free_r+0x94>)
 8003062:	6813      	ldr	r3, [r2, #0]
 8003064:	4610      	mov	r0, r2
 8003066:	b933      	cbnz	r3, 8003076 <_free_r+0x2e>
 8003068:	6063      	str	r3, [r4, #4]
 800306a:	6014      	str	r4, [r2, #0]
 800306c:	4628      	mov	r0, r5
 800306e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003072:	f000 b9ac 	b.w	80033ce <__malloc_unlock>
 8003076:	42a3      	cmp	r3, r4
 8003078:	d90b      	bls.n	8003092 <_free_r+0x4a>
 800307a:	6821      	ldr	r1, [r4, #0]
 800307c:	1862      	adds	r2, r4, r1
 800307e:	4293      	cmp	r3, r2
 8003080:	bf01      	itttt	eq
 8003082:	681a      	ldreq	r2, [r3, #0]
 8003084:	685b      	ldreq	r3, [r3, #4]
 8003086:	1852      	addeq	r2, r2, r1
 8003088:	6022      	streq	r2, [r4, #0]
 800308a:	6063      	str	r3, [r4, #4]
 800308c:	6004      	str	r4, [r0, #0]
 800308e:	e7ed      	b.n	800306c <_free_r+0x24>
 8003090:	4613      	mov	r3, r2
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	b10a      	cbz	r2, 800309a <_free_r+0x52>
 8003096:	42a2      	cmp	r2, r4
 8003098:	d9fa      	bls.n	8003090 <_free_r+0x48>
 800309a:	6819      	ldr	r1, [r3, #0]
 800309c:	1858      	adds	r0, r3, r1
 800309e:	42a0      	cmp	r0, r4
 80030a0:	d10b      	bne.n	80030ba <_free_r+0x72>
 80030a2:	6820      	ldr	r0, [r4, #0]
 80030a4:	4401      	add	r1, r0
 80030a6:	1858      	adds	r0, r3, r1
 80030a8:	4282      	cmp	r2, r0
 80030aa:	6019      	str	r1, [r3, #0]
 80030ac:	d1de      	bne.n	800306c <_free_r+0x24>
 80030ae:	6810      	ldr	r0, [r2, #0]
 80030b0:	6852      	ldr	r2, [r2, #4]
 80030b2:	4401      	add	r1, r0
 80030b4:	6019      	str	r1, [r3, #0]
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	e7d8      	b.n	800306c <_free_r+0x24>
 80030ba:	d902      	bls.n	80030c2 <_free_r+0x7a>
 80030bc:	230c      	movs	r3, #12
 80030be:	602b      	str	r3, [r5, #0]
 80030c0:	e7d4      	b.n	800306c <_free_r+0x24>
 80030c2:	6820      	ldr	r0, [r4, #0]
 80030c4:	1821      	adds	r1, r4, r0
 80030c6:	428a      	cmp	r2, r1
 80030c8:	bf01      	itttt	eq
 80030ca:	6811      	ldreq	r1, [r2, #0]
 80030cc:	6852      	ldreq	r2, [r2, #4]
 80030ce:	1809      	addeq	r1, r1, r0
 80030d0:	6021      	streq	r1, [r4, #0]
 80030d2:	6062      	str	r2, [r4, #4]
 80030d4:	605c      	str	r4, [r3, #4]
 80030d6:	e7c9      	b.n	800306c <_free_r+0x24>
 80030d8:	bd38      	pop	{r3, r4, r5, pc}
 80030da:	bf00      	nop
 80030dc:	200000a0 	.word	0x200000a0

080030e0 <_malloc_r>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	1ccd      	adds	r5, r1, #3
 80030e4:	f025 0503 	bic.w	r5, r5, #3
 80030e8:	3508      	adds	r5, #8
 80030ea:	2d0c      	cmp	r5, #12
 80030ec:	bf38      	it	cc
 80030ee:	250c      	movcc	r5, #12
 80030f0:	2d00      	cmp	r5, #0
 80030f2:	4606      	mov	r6, r0
 80030f4:	db01      	blt.n	80030fa <_malloc_r+0x1a>
 80030f6:	42a9      	cmp	r1, r5
 80030f8:	d903      	bls.n	8003102 <_malloc_r+0x22>
 80030fa:	230c      	movs	r3, #12
 80030fc:	6033      	str	r3, [r6, #0]
 80030fe:	2000      	movs	r0, #0
 8003100:	bd70      	pop	{r4, r5, r6, pc}
 8003102:	f000 f963 	bl	80033cc <__malloc_lock>
 8003106:	4a21      	ldr	r2, [pc, #132]	; (800318c <_malloc_r+0xac>)
 8003108:	6814      	ldr	r4, [r2, #0]
 800310a:	4621      	mov	r1, r4
 800310c:	b991      	cbnz	r1, 8003134 <_malloc_r+0x54>
 800310e:	4c20      	ldr	r4, [pc, #128]	; (8003190 <_malloc_r+0xb0>)
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	b91b      	cbnz	r3, 800311c <_malloc_r+0x3c>
 8003114:	4630      	mov	r0, r6
 8003116:	f000 f869 	bl	80031ec <_sbrk_r>
 800311a:	6020      	str	r0, [r4, #0]
 800311c:	4629      	mov	r1, r5
 800311e:	4630      	mov	r0, r6
 8003120:	f000 f864 	bl	80031ec <_sbrk_r>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d124      	bne.n	8003172 <_malloc_r+0x92>
 8003128:	230c      	movs	r3, #12
 800312a:	4630      	mov	r0, r6
 800312c:	6033      	str	r3, [r6, #0]
 800312e:	f000 f94e 	bl	80033ce <__malloc_unlock>
 8003132:	e7e4      	b.n	80030fe <_malloc_r+0x1e>
 8003134:	680b      	ldr	r3, [r1, #0]
 8003136:	1b5b      	subs	r3, r3, r5
 8003138:	d418      	bmi.n	800316c <_malloc_r+0x8c>
 800313a:	2b0b      	cmp	r3, #11
 800313c:	d90f      	bls.n	800315e <_malloc_r+0x7e>
 800313e:	600b      	str	r3, [r1, #0]
 8003140:	18cc      	adds	r4, r1, r3
 8003142:	50cd      	str	r5, [r1, r3]
 8003144:	4630      	mov	r0, r6
 8003146:	f000 f942 	bl	80033ce <__malloc_unlock>
 800314a:	f104 000b 	add.w	r0, r4, #11
 800314e:	1d23      	adds	r3, r4, #4
 8003150:	f020 0007 	bic.w	r0, r0, #7
 8003154:	1ac3      	subs	r3, r0, r3
 8003156:	d0d3      	beq.n	8003100 <_malloc_r+0x20>
 8003158:	425a      	negs	r2, r3
 800315a:	50e2      	str	r2, [r4, r3]
 800315c:	e7d0      	b.n	8003100 <_malloc_r+0x20>
 800315e:	684b      	ldr	r3, [r1, #4]
 8003160:	428c      	cmp	r4, r1
 8003162:	bf16      	itet	ne
 8003164:	6063      	strne	r3, [r4, #4]
 8003166:	6013      	streq	r3, [r2, #0]
 8003168:	460c      	movne	r4, r1
 800316a:	e7eb      	b.n	8003144 <_malloc_r+0x64>
 800316c:	460c      	mov	r4, r1
 800316e:	6849      	ldr	r1, [r1, #4]
 8003170:	e7cc      	b.n	800310c <_malloc_r+0x2c>
 8003172:	1cc4      	adds	r4, r0, #3
 8003174:	f024 0403 	bic.w	r4, r4, #3
 8003178:	42a0      	cmp	r0, r4
 800317a:	d005      	beq.n	8003188 <_malloc_r+0xa8>
 800317c:	1a21      	subs	r1, r4, r0
 800317e:	4630      	mov	r0, r6
 8003180:	f000 f834 	bl	80031ec <_sbrk_r>
 8003184:	3001      	adds	r0, #1
 8003186:	d0cf      	beq.n	8003128 <_malloc_r+0x48>
 8003188:	6025      	str	r5, [r4, #0]
 800318a:	e7db      	b.n	8003144 <_malloc_r+0x64>
 800318c:	200000a0 	.word	0x200000a0
 8003190:	200000a4 	.word	0x200000a4

08003194 <iprintf>:
 8003194:	b40f      	push	{r0, r1, r2, r3}
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <iprintf+0x2c>)
 8003198:	b513      	push	{r0, r1, r4, lr}
 800319a:	681c      	ldr	r4, [r3, #0]
 800319c:	b124      	cbz	r4, 80031a8 <iprintf+0x14>
 800319e:	69a3      	ldr	r3, [r4, #24]
 80031a0:	b913      	cbnz	r3, 80031a8 <iprintf+0x14>
 80031a2:	4620      	mov	r0, r4
 80031a4:	f000 f888 	bl	80032b8 <__sinit>
 80031a8:	ab05      	add	r3, sp, #20
 80031aa:	9a04      	ldr	r2, [sp, #16]
 80031ac:	68a1      	ldr	r1, [r4, #8]
 80031ae:	4620      	mov	r0, r4
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	f000 f935 	bl	8003420 <_vfiprintf_r>
 80031b6:	b002      	add	sp, #8
 80031b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031bc:	b004      	add	sp, #16
 80031be:	4770      	bx	lr
 80031c0:	2000000c 	.word	0x2000000c

080031c4 <putchar>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <putchar+0x24>)
 80031c8:	4605      	mov	r5, r0
 80031ca:	681c      	ldr	r4, [r3, #0]
 80031cc:	b124      	cbz	r4, 80031d8 <putchar+0x14>
 80031ce:	69a3      	ldr	r3, [r4, #24]
 80031d0:	b913      	cbnz	r3, 80031d8 <putchar+0x14>
 80031d2:	4620      	mov	r0, r4
 80031d4:	f000 f870 	bl	80032b8 <__sinit>
 80031d8:	68a2      	ldr	r2, [r4, #8]
 80031da:	4629      	mov	r1, r5
 80031dc:	4620      	mov	r0, r4
 80031de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031e2:	f000 bbbb 	b.w	800395c <_putc_r>
 80031e6:	bf00      	nop
 80031e8:	2000000c 	.word	0x2000000c

080031ec <_sbrk_r>:
 80031ec:	b538      	push	{r3, r4, r5, lr}
 80031ee:	2300      	movs	r3, #0
 80031f0:	4c05      	ldr	r4, [pc, #20]	; (8003208 <_sbrk_r+0x1c>)
 80031f2:	4605      	mov	r5, r0
 80031f4:	4608      	mov	r0, r1
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	f7fd ff98 	bl	800112c <_sbrk>
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	d102      	bne.n	8003206 <_sbrk_r+0x1a>
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	b103      	cbz	r3, 8003206 <_sbrk_r+0x1a>
 8003204:	602b      	str	r3, [r5, #0]
 8003206:	bd38      	pop	{r3, r4, r5, pc}
 8003208:	20000364 	.word	0x20000364

0800320c <viprintf>:
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <viprintf+0x28>)
 800320e:	b570      	push	{r4, r5, r6, lr}
 8003210:	681c      	ldr	r4, [r3, #0]
 8003212:	4605      	mov	r5, r0
 8003214:	460e      	mov	r6, r1
 8003216:	b124      	cbz	r4, 8003222 <viprintf+0x16>
 8003218:	69a3      	ldr	r3, [r4, #24]
 800321a:	b913      	cbnz	r3, 8003222 <viprintf+0x16>
 800321c:	4620      	mov	r0, r4
 800321e:	f000 f84b 	bl	80032b8 <__sinit>
 8003222:	4633      	mov	r3, r6
 8003224:	462a      	mov	r2, r5
 8003226:	68a1      	ldr	r1, [r4, #8]
 8003228:	4620      	mov	r0, r4
 800322a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800322e:	f000 b8f7 	b.w	8003420 <_vfiprintf_r>
 8003232:	bf00      	nop
 8003234:	2000000c 	.word	0x2000000c

08003238 <std>:
 8003238:	2300      	movs	r3, #0
 800323a:	b510      	push	{r4, lr}
 800323c:	4604      	mov	r4, r0
 800323e:	e9c0 3300 	strd	r3, r3, [r0]
 8003242:	6083      	str	r3, [r0, #8]
 8003244:	8181      	strh	r1, [r0, #12]
 8003246:	6643      	str	r3, [r0, #100]	; 0x64
 8003248:	81c2      	strh	r2, [r0, #14]
 800324a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800324e:	6183      	str	r3, [r0, #24]
 8003250:	4619      	mov	r1, r3
 8003252:	2208      	movs	r2, #8
 8003254:	305c      	adds	r0, #92	; 0x5c
 8003256:	f7ff feee 	bl	8003036 <memset>
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <std+0x38>)
 800325c:	6224      	str	r4, [r4, #32]
 800325e:	6263      	str	r3, [r4, #36]	; 0x24
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <std+0x3c>)
 8003262:	62a3      	str	r3, [r4, #40]	; 0x28
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <std+0x40>)
 8003266:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <std+0x44>)
 800326a:	6323      	str	r3, [r4, #48]	; 0x30
 800326c:	bd10      	pop	{r4, pc}
 800326e:	bf00      	nop
 8003270:	080039c9 	.word	0x080039c9
 8003274:	080039eb 	.word	0x080039eb
 8003278:	08003a23 	.word	0x08003a23
 800327c:	08003a47 	.word	0x08003a47

08003280 <_cleanup_r>:
 8003280:	4901      	ldr	r1, [pc, #4]	; (8003288 <_cleanup_r+0x8>)
 8003282:	f000 b885 	b.w	8003390 <_fwalk_reent>
 8003286:	bf00      	nop
 8003288:	08003d21 	.word	0x08003d21

0800328c <__sfmoreglue>:
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	2568      	movs	r5, #104	; 0x68
 8003290:	1e4a      	subs	r2, r1, #1
 8003292:	4355      	muls	r5, r2
 8003294:	460e      	mov	r6, r1
 8003296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800329a:	f7ff ff21 	bl	80030e0 <_malloc_r>
 800329e:	4604      	mov	r4, r0
 80032a0:	b140      	cbz	r0, 80032b4 <__sfmoreglue+0x28>
 80032a2:	2100      	movs	r1, #0
 80032a4:	e9c0 1600 	strd	r1, r6, [r0]
 80032a8:	300c      	adds	r0, #12
 80032aa:	60a0      	str	r0, [r4, #8]
 80032ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032b0:	f7ff fec1 	bl	8003036 <memset>
 80032b4:	4620      	mov	r0, r4
 80032b6:	bd70      	pop	{r4, r5, r6, pc}

080032b8 <__sinit>:
 80032b8:	6983      	ldr	r3, [r0, #24]
 80032ba:	b510      	push	{r4, lr}
 80032bc:	4604      	mov	r4, r0
 80032be:	bb33      	cbnz	r3, 800330e <__sinit+0x56>
 80032c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80032c4:	6503      	str	r3, [r0, #80]	; 0x50
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <__sinit+0x58>)
 80032c8:	4a12      	ldr	r2, [pc, #72]	; (8003314 <__sinit+0x5c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6282      	str	r2, [r0, #40]	; 0x28
 80032ce:	4298      	cmp	r0, r3
 80032d0:	bf04      	itt	eq
 80032d2:	2301      	moveq	r3, #1
 80032d4:	6183      	streq	r3, [r0, #24]
 80032d6:	f000 f81f 	bl	8003318 <__sfp>
 80032da:	6060      	str	r0, [r4, #4]
 80032dc:	4620      	mov	r0, r4
 80032de:	f000 f81b 	bl	8003318 <__sfp>
 80032e2:	60a0      	str	r0, [r4, #8]
 80032e4:	4620      	mov	r0, r4
 80032e6:	f000 f817 	bl	8003318 <__sfp>
 80032ea:	2200      	movs	r2, #0
 80032ec:	60e0      	str	r0, [r4, #12]
 80032ee:	2104      	movs	r1, #4
 80032f0:	6860      	ldr	r0, [r4, #4]
 80032f2:	f7ff ffa1 	bl	8003238 <std>
 80032f6:	2201      	movs	r2, #1
 80032f8:	2109      	movs	r1, #9
 80032fa:	68a0      	ldr	r0, [r4, #8]
 80032fc:	f7ff ff9c 	bl	8003238 <std>
 8003300:	2202      	movs	r2, #2
 8003302:	2112      	movs	r1, #18
 8003304:	68e0      	ldr	r0, [r4, #12]
 8003306:	f7ff ff97 	bl	8003238 <std>
 800330a:	2301      	movs	r3, #1
 800330c:	61a3      	str	r3, [r4, #24]
 800330e:	bd10      	pop	{r4, pc}
 8003310:	080040c4 	.word	0x080040c4
 8003314:	08003281 	.word	0x08003281

08003318 <__sfp>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <__sfp+0x70>)
 800331c:	4607      	mov	r7, r0
 800331e:	681e      	ldr	r6, [r3, #0]
 8003320:	69b3      	ldr	r3, [r6, #24]
 8003322:	b913      	cbnz	r3, 800332a <__sfp+0x12>
 8003324:	4630      	mov	r0, r6
 8003326:	f7ff ffc7 	bl	80032b8 <__sinit>
 800332a:	3648      	adds	r6, #72	; 0x48
 800332c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003330:	3b01      	subs	r3, #1
 8003332:	d503      	bpl.n	800333c <__sfp+0x24>
 8003334:	6833      	ldr	r3, [r6, #0]
 8003336:	b133      	cbz	r3, 8003346 <__sfp+0x2e>
 8003338:	6836      	ldr	r6, [r6, #0]
 800333a:	e7f7      	b.n	800332c <__sfp+0x14>
 800333c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003340:	b16d      	cbz	r5, 800335e <__sfp+0x46>
 8003342:	3468      	adds	r4, #104	; 0x68
 8003344:	e7f4      	b.n	8003330 <__sfp+0x18>
 8003346:	2104      	movs	r1, #4
 8003348:	4638      	mov	r0, r7
 800334a:	f7ff ff9f 	bl	800328c <__sfmoreglue>
 800334e:	6030      	str	r0, [r6, #0]
 8003350:	2800      	cmp	r0, #0
 8003352:	d1f1      	bne.n	8003338 <__sfp+0x20>
 8003354:	230c      	movs	r3, #12
 8003356:	4604      	mov	r4, r0
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	4620      	mov	r0, r4
 800335c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <__sfp+0x74>)
 8003360:	6665      	str	r5, [r4, #100]	; 0x64
 8003362:	e9c4 5500 	strd	r5, r5, [r4]
 8003366:	60a5      	str	r5, [r4, #8]
 8003368:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800336c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003370:	2208      	movs	r2, #8
 8003372:	4629      	mov	r1, r5
 8003374:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003378:	f7ff fe5d 	bl	8003036 <memset>
 800337c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003380:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003384:	e7e9      	b.n	800335a <__sfp+0x42>
 8003386:	bf00      	nop
 8003388:	080040c4 	.word	0x080040c4
 800338c:	ffff0001 	.word	0xffff0001

08003390 <_fwalk_reent>:
 8003390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003394:	4680      	mov	r8, r0
 8003396:	4689      	mov	r9, r1
 8003398:	2600      	movs	r6, #0
 800339a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800339e:	b914      	cbnz	r4, 80033a6 <_fwalk_reent+0x16>
 80033a0:	4630      	mov	r0, r6
 80033a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80033aa:	3f01      	subs	r7, #1
 80033ac:	d501      	bpl.n	80033b2 <_fwalk_reent+0x22>
 80033ae:	6824      	ldr	r4, [r4, #0]
 80033b0:	e7f5      	b.n	800339e <_fwalk_reent+0xe>
 80033b2:	89ab      	ldrh	r3, [r5, #12]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d907      	bls.n	80033c8 <_fwalk_reent+0x38>
 80033b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033bc:	3301      	adds	r3, #1
 80033be:	d003      	beq.n	80033c8 <_fwalk_reent+0x38>
 80033c0:	4629      	mov	r1, r5
 80033c2:	4640      	mov	r0, r8
 80033c4:	47c8      	blx	r9
 80033c6:	4306      	orrs	r6, r0
 80033c8:	3568      	adds	r5, #104	; 0x68
 80033ca:	e7ee      	b.n	80033aa <_fwalk_reent+0x1a>

080033cc <__malloc_lock>:
 80033cc:	4770      	bx	lr

080033ce <__malloc_unlock>:
 80033ce:	4770      	bx	lr

080033d0 <__sfputc_r>:
 80033d0:	6893      	ldr	r3, [r2, #8]
 80033d2:	b410      	push	{r4}
 80033d4:	3b01      	subs	r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	6093      	str	r3, [r2, #8]
 80033da:	da07      	bge.n	80033ec <__sfputc_r+0x1c>
 80033dc:	6994      	ldr	r4, [r2, #24]
 80033de:	42a3      	cmp	r3, r4
 80033e0:	db01      	blt.n	80033e6 <__sfputc_r+0x16>
 80033e2:	290a      	cmp	r1, #10
 80033e4:	d102      	bne.n	80033ec <__sfputc_r+0x1c>
 80033e6:	bc10      	pop	{r4}
 80033e8:	f000 bb32 	b.w	8003a50 <__swbuf_r>
 80033ec:	6813      	ldr	r3, [r2, #0]
 80033ee:	1c58      	adds	r0, r3, #1
 80033f0:	6010      	str	r0, [r2, #0]
 80033f2:	7019      	strb	r1, [r3, #0]
 80033f4:	4608      	mov	r0, r1
 80033f6:	bc10      	pop	{r4}
 80033f8:	4770      	bx	lr

080033fa <__sfputs_r>:
 80033fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fc:	4606      	mov	r6, r0
 80033fe:	460f      	mov	r7, r1
 8003400:	4614      	mov	r4, r2
 8003402:	18d5      	adds	r5, r2, r3
 8003404:	42ac      	cmp	r4, r5
 8003406:	d101      	bne.n	800340c <__sfputs_r+0x12>
 8003408:	2000      	movs	r0, #0
 800340a:	e007      	b.n	800341c <__sfputs_r+0x22>
 800340c:	463a      	mov	r2, r7
 800340e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003412:	4630      	mov	r0, r6
 8003414:	f7ff ffdc 	bl	80033d0 <__sfputc_r>
 8003418:	1c43      	adds	r3, r0, #1
 800341a:	d1f3      	bne.n	8003404 <__sfputs_r+0xa>
 800341c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003420 <_vfiprintf_r>:
 8003420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003424:	460c      	mov	r4, r1
 8003426:	b09d      	sub	sp, #116	; 0x74
 8003428:	4617      	mov	r7, r2
 800342a:	461d      	mov	r5, r3
 800342c:	4606      	mov	r6, r0
 800342e:	b118      	cbz	r0, 8003438 <_vfiprintf_r+0x18>
 8003430:	6983      	ldr	r3, [r0, #24]
 8003432:	b90b      	cbnz	r3, 8003438 <_vfiprintf_r+0x18>
 8003434:	f7ff ff40 	bl	80032b8 <__sinit>
 8003438:	4b7c      	ldr	r3, [pc, #496]	; (800362c <_vfiprintf_r+0x20c>)
 800343a:	429c      	cmp	r4, r3
 800343c:	d158      	bne.n	80034f0 <_vfiprintf_r+0xd0>
 800343e:	6874      	ldr	r4, [r6, #4]
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	0718      	lsls	r0, r3, #28
 8003444:	d55e      	bpl.n	8003504 <_vfiprintf_r+0xe4>
 8003446:	6923      	ldr	r3, [r4, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d05b      	beq.n	8003504 <_vfiprintf_r+0xe4>
 800344c:	2300      	movs	r3, #0
 800344e:	9309      	str	r3, [sp, #36]	; 0x24
 8003450:	2320      	movs	r3, #32
 8003452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003456:	2330      	movs	r3, #48	; 0x30
 8003458:	f04f 0b01 	mov.w	fp, #1
 800345c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003460:	9503      	str	r5, [sp, #12]
 8003462:	46b8      	mov	r8, r7
 8003464:	4645      	mov	r5, r8
 8003466:	f815 3b01 	ldrb.w	r3, [r5], #1
 800346a:	b10b      	cbz	r3, 8003470 <_vfiprintf_r+0x50>
 800346c:	2b25      	cmp	r3, #37	; 0x25
 800346e:	d154      	bne.n	800351a <_vfiprintf_r+0xfa>
 8003470:	ebb8 0a07 	subs.w	sl, r8, r7
 8003474:	d00b      	beq.n	800348e <_vfiprintf_r+0x6e>
 8003476:	4653      	mov	r3, sl
 8003478:	463a      	mov	r2, r7
 800347a:	4621      	mov	r1, r4
 800347c:	4630      	mov	r0, r6
 800347e:	f7ff ffbc 	bl	80033fa <__sfputs_r>
 8003482:	3001      	adds	r0, #1
 8003484:	f000 80c2 	beq.w	800360c <_vfiprintf_r+0x1ec>
 8003488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800348a:	4453      	add	r3, sl
 800348c:	9309      	str	r3, [sp, #36]	; 0x24
 800348e:	f898 3000 	ldrb.w	r3, [r8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80ba 	beq.w	800360c <_vfiprintf_r+0x1ec>
 8003498:	2300      	movs	r3, #0
 800349a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800349e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034a2:	9304      	str	r3, [sp, #16]
 80034a4:	9307      	str	r3, [sp, #28]
 80034a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034aa:	931a      	str	r3, [sp, #104]	; 0x68
 80034ac:	46a8      	mov	r8, r5
 80034ae:	2205      	movs	r2, #5
 80034b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80034b4:	485e      	ldr	r0, [pc, #376]	; (8003630 <_vfiprintf_r+0x210>)
 80034b6:	f000 fcd3 	bl	8003e60 <memchr>
 80034ba:	9b04      	ldr	r3, [sp, #16]
 80034bc:	bb78      	cbnz	r0, 800351e <_vfiprintf_r+0xfe>
 80034be:	06d9      	lsls	r1, r3, #27
 80034c0:	bf44      	itt	mi
 80034c2:	2220      	movmi	r2, #32
 80034c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034c8:	071a      	lsls	r2, r3, #28
 80034ca:	bf44      	itt	mi
 80034cc:	222b      	movmi	r2, #43	; 0x2b
 80034ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034d2:	782a      	ldrb	r2, [r5, #0]
 80034d4:	2a2a      	cmp	r2, #42	; 0x2a
 80034d6:	d02a      	beq.n	800352e <_vfiprintf_r+0x10e>
 80034d8:	46a8      	mov	r8, r5
 80034da:	2000      	movs	r0, #0
 80034dc:	250a      	movs	r5, #10
 80034de:	9a07      	ldr	r2, [sp, #28]
 80034e0:	4641      	mov	r1, r8
 80034e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034e6:	3b30      	subs	r3, #48	; 0x30
 80034e8:	2b09      	cmp	r3, #9
 80034ea:	d969      	bls.n	80035c0 <_vfiprintf_r+0x1a0>
 80034ec:	b360      	cbz	r0, 8003548 <_vfiprintf_r+0x128>
 80034ee:	e024      	b.n	800353a <_vfiprintf_r+0x11a>
 80034f0:	4b50      	ldr	r3, [pc, #320]	; (8003634 <_vfiprintf_r+0x214>)
 80034f2:	429c      	cmp	r4, r3
 80034f4:	d101      	bne.n	80034fa <_vfiprintf_r+0xda>
 80034f6:	68b4      	ldr	r4, [r6, #8]
 80034f8:	e7a2      	b.n	8003440 <_vfiprintf_r+0x20>
 80034fa:	4b4f      	ldr	r3, [pc, #316]	; (8003638 <_vfiprintf_r+0x218>)
 80034fc:	429c      	cmp	r4, r3
 80034fe:	bf08      	it	eq
 8003500:	68f4      	ldreq	r4, [r6, #12]
 8003502:	e79d      	b.n	8003440 <_vfiprintf_r+0x20>
 8003504:	4621      	mov	r1, r4
 8003506:	4630      	mov	r0, r6
 8003508:	f000 fb06 	bl	8003b18 <__swsetup_r>
 800350c:	2800      	cmp	r0, #0
 800350e:	d09d      	beq.n	800344c <_vfiprintf_r+0x2c>
 8003510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003514:	b01d      	add	sp, #116	; 0x74
 8003516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800351a:	46a8      	mov	r8, r5
 800351c:	e7a2      	b.n	8003464 <_vfiprintf_r+0x44>
 800351e:	4a44      	ldr	r2, [pc, #272]	; (8003630 <_vfiprintf_r+0x210>)
 8003520:	4645      	mov	r5, r8
 8003522:	1a80      	subs	r0, r0, r2
 8003524:	fa0b f000 	lsl.w	r0, fp, r0
 8003528:	4318      	orrs	r0, r3
 800352a:	9004      	str	r0, [sp, #16]
 800352c:	e7be      	b.n	80034ac <_vfiprintf_r+0x8c>
 800352e:	9a03      	ldr	r2, [sp, #12]
 8003530:	1d11      	adds	r1, r2, #4
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	9103      	str	r1, [sp, #12]
 8003536:	2a00      	cmp	r2, #0
 8003538:	db01      	blt.n	800353e <_vfiprintf_r+0x11e>
 800353a:	9207      	str	r2, [sp, #28]
 800353c:	e004      	b.n	8003548 <_vfiprintf_r+0x128>
 800353e:	4252      	negs	r2, r2
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	9207      	str	r2, [sp, #28]
 8003546:	9304      	str	r3, [sp, #16]
 8003548:	f898 3000 	ldrb.w	r3, [r8]
 800354c:	2b2e      	cmp	r3, #46	; 0x2e
 800354e:	d10e      	bne.n	800356e <_vfiprintf_r+0x14e>
 8003550:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003554:	2b2a      	cmp	r3, #42	; 0x2a
 8003556:	d138      	bne.n	80035ca <_vfiprintf_r+0x1aa>
 8003558:	9b03      	ldr	r3, [sp, #12]
 800355a:	f108 0802 	add.w	r8, r8, #2
 800355e:	1d1a      	adds	r2, r3, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	9203      	str	r2, [sp, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	bfb8      	it	lt
 8003568:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800356c:	9305      	str	r3, [sp, #20]
 800356e:	4d33      	ldr	r5, [pc, #204]	; (800363c <_vfiprintf_r+0x21c>)
 8003570:	2203      	movs	r2, #3
 8003572:	f898 1000 	ldrb.w	r1, [r8]
 8003576:	4628      	mov	r0, r5
 8003578:	f000 fc72 	bl	8003e60 <memchr>
 800357c:	b140      	cbz	r0, 8003590 <_vfiprintf_r+0x170>
 800357e:	2340      	movs	r3, #64	; 0x40
 8003580:	1b40      	subs	r0, r0, r5
 8003582:	fa03 f000 	lsl.w	r0, r3, r0
 8003586:	9b04      	ldr	r3, [sp, #16]
 8003588:	f108 0801 	add.w	r8, r8, #1
 800358c:	4303      	orrs	r3, r0
 800358e:	9304      	str	r3, [sp, #16]
 8003590:	f898 1000 	ldrb.w	r1, [r8]
 8003594:	2206      	movs	r2, #6
 8003596:	482a      	ldr	r0, [pc, #168]	; (8003640 <_vfiprintf_r+0x220>)
 8003598:	f108 0701 	add.w	r7, r8, #1
 800359c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035a0:	f000 fc5e 	bl	8003e60 <memchr>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d037      	beq.n	8003618 <_vfiprintf_r+0x1f8>
 80035a8:	4b26      	ldr	r3, [pc, #152]	; (8003644 <_vfiprintf_r+0x224>)
 80035aa:	bb1b      	cbnz	r3, 80035f4 <_vfiprintf_r+0x1d4>
 80035ac:	9b03      	ldr	r3, [sp, #12]
 80035ae:	3307      	adds	r3, #7
 80035b0:	f023 0307 	bic.w	r3, r3, #7
 80035b4:	3308      	adds	r3, #8
 80035b6:	9303      	str	r3, [sp, #12]
 80035b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ba:	444b      	add	r3, r9
 80035bc:	9309      	str	r3, [sp, #36]	; 0x24
 80035be:	e750      	b.n	8003462 <_vfiprintf_r+0x42>
 80035c0:	fb05 3202 	mla	r2, r5, r2, r3
 80035c4:	2001      	movs	r0, #1
 80035c6:	4688      	mov	r8, r1
 80035c8:	e78a      	b.n	80034e0 <_vfiprintf_r+0xc0>
 80035ca:	2300      	movs	r3, #0
 80035cc:	250a      	movs	r5, #10
 80035ce:	4619      	mov	r1, r3
 80035d0:	f108 0801 	add.w	r8, r8, #1
 80035d4:	9305      	str	r3, [sp, #20]
 80035d6:	4640      	mov	r0, r8
 80035d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035dc:	3a30      	subs	r2, #48	; 0x30
 80035de:	2a09      	cmp	r2, #9
 80035e0:	d903      	bls.n	80035ea <_vfiprintf_r+0x1ca>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0c3      	beq.n	800356e <_vfiprintf_r+0x14e>
 80035e6:	9105      	str	r1, [sp, #20]
 80035e8:	e7c1      	b.n	800356e <_vfiprintf_r+0x14e>
 80035ea:	fb05 2101 	mla	r1, r5, r1, r2
 80035ee:	2301      	movs	r3, #1
 80035f0:	4680      	mov	r8, r0
 80035f2:	e7f0      	b.n	80035d6 <_vfiprintf_r+0x1b6>
 80035f4:	ab03      	add	r3, sp, #12
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	4622      	mov	r2, r4
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <_vfiprintf_r+0x228>)
 80035fc:	a904      	add	r1, sp, #16
 80035fe:	4630      	mov	r0, r6
 8003600:	f3af 8000 	nop.w
 8003604:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003608:	4681      	mov	r9, r0
 800360a:	d1d5      	bne.n	80035b8 <_vfiprintf_r+0x198>
 800360c:	89a3      	ldrh	r3, [r4, #12]
 800360e:	065b      	lsls	r3, r3, #25
 8003610:	f53f af7e 	bmi.w	8003510 <_vfiprintf_r+0xf0>
 8003614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003616:	e77d      	b.n	8003514 <_vfiprintf_r+0xf4>
 8003618:	ab03      	add	r3, sp, #12
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	4622      	mov	r2, r4
 800361e:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <_vfiprintf_r+0x228>)
 8003620:	a904      	add	r1, sp, #16
 8003622:	4630      	mov	r0, r6
 8003624:	f000 f888 	bl	8003738 <_printf_i>
 8003628:	e7ec      	b.n	8003604 <_vfiprintf_r+0x1e4>
 800362a:	bf00      	nop
 800362c:	080040e8 	.word	0x080040e8
 8003630:	08004128 	.word	0x08004128
 8003634:	08004108 	.word	0x08004108
 8003638:	080040c8 	.word	0x080040c8
 800363c:	0800412e 	.word	0x0800412e
 8003640:	08004132 	.word	0x08004132
 8003644:	00000000 	.word	0x00000000
 8003648:	080033fb 	.word	0x080033fb

0800364c <_printf_common>:
 800364c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003650:	4691      	mov	r9, r2
 8003652:	461f      	mov	r7, r3
 8003654:	688a      	ldr	r2, [r1, #8]
 8003656:	690b      	ldr	r3, [r1, #16]
 8003658:	4606      	mov	r6, r0
 800365a:	4293      	cmp	r3, r2
 800365c:	bfb8      	it	lt
 800365e:	4613      	movlt	r3, r2
 8003660:	f8c9 3000 	str.w	r3, [r9]
 8003664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003668:	460c      	mov	r4, r1
 800366a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800366e:	b112      	cbz	r2, 8003676 <_printf_common+0x2a>
 8003670:	3301      	adds	r3, #1
 8003672:	f8c9 3000 	str.w	r3, [r9]
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	0699      	lsls	r1, r3, #26
 800367a:	bf42      	ittt	mi
 800367c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003680:	3302      	addmi	r3, #2
 8003682:	f8c9 3000 	strmi.w	r3, [r9]
 8003686:	6825      	ldr	r5, [r4, #0]
 8003688:	f015 0506 	ands.w	r5, r5, #6
 800368c:	d107      	bne.n	800369e <_printf_common+0x52>
 800368e:	f104 0a19 	add.w	sl, r4, #25
 8003692:	68e3      	ldr	r3, [r4, #12]
 8003694:	f8d9 2000 	ldr.w	r2, [r9]
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	42ab      	cmp	r3, r5
 800369c:	dc29      	bgt.n	80036f2 <_printf_common+0xa6>
 800369e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	3300      	adds	r3, #0
 80036a6:	bf18      	it	ne
 80036a8:	2301      	movne	r3, #1
 80036aa:	0692      	lsls	r2, r2, #26
 80036ac:	d42e      	bmi.n	800370c <_printf_common+0xc0>
 80036ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036b2:	4639      	mov	r1, r7
 80036b4:	4630      	mov	r0, r6
 80036b6:	47c0      	blx	r8
 80036b8:	3001      	adds	r0, #1
 80036ba:	d021      	beq.n	8003700 <_printf_common+0xb4>
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	68e5      	ldr	r5, [r4, #12]
 80036c0:	f003 0306 	and.w	r3, r3, #6
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	bf18      	it	ne
 80036c8:	2500      	movne	r5, #0
 80036ca:	f8d9 2000 	ldr.w	r2, [r9]
 80036ce:	f04f 0900 	mov.w	r9, #0
 80036d2:	bf08      	it	eq
 80036d4:	1aad      	subeq	r5, r5, r2
 80036d6:	68a3      	ldr	r3, [r4, #8]
 80036d8:	6922      	ldr	r2, [r4, #16]
 80036da:	bf08      	it	eq
 80036dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036e0:	4293      	cmp	r3, r2
 80036e2:	bfc4      	itt	gt
 80036e4:	1a9b      	subgt	r3, r3, r2
 80036e6:	18ed      	addgt	r5, r5, r3
 80036e8:	341a      	adds	r4, #26
 80036ea:	454d      	cmp	r5, r9
 80036ec:	d11a      	bne.n	8003724 <_printf_common+0xd8>
 80036ee:	2000      	movs	r0, #0
 80036f0:	e008      	b.n	8003704 <_printf_common+0xb8>
 80036f2:	2301      	movs	r3, #1
 80036f4:	4652      	mov	r2, sl
 80036f6:	4639      	mov	r1, r7
 80036f8:	4630      	mov	r0, r6
 80036fa:	47c0      	blx	r8
 80036fc:	3001      	adds	r0, #1
 80036fe:	d103      	bne.n	8003708 <_printf_common+0xbc>
 8003700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003708:	3501      	adds	r5, #1
 800370a:	e7c2      	b.n	8003692 <_printf_common+0x46>
 800370c:	2030      	movs	r0, #48	; 0x30
 800370e:	18e1      	adds	r1, r4, r3
 8003710:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800371a:	4422      	add	r2, r4
 800371c:	3302      	adds	r3, #2
 800371e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003722:	e7c4      	b.n	80036ae <_printf_common+0x62>
 8003724:	2301      	movs	r3, #1
 8003726:	4622      	mov	r2, r4
 8003728:	4639      	mov	r1, r7
 800372a:	4630      	mov	r0, r6
 800372c:	47c0      	blx	r8
 800372e:	3001      	adds	r0, #1
 8003730:	d0e6      	beq.n	8003700 <_printf_common+0xb4>
 8003732:	f109 0901 	add.w	r9, r9, #1
 8003736:	e7d8      	b.n	80036ea <_printf_common+0x9e>

08003738 <_printf_i>:
 8003738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800373c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003740:	460c      	mov	r4, r1
 8003742:	7e09      	ldrb	r1, [r1, #24]
 8003744:	b085      	sub	sp, #20
 8003746:	296e      	cmp	r1, #110	; 0x6e
 8003748:	4617      	mov	r7, r2
 800374a:	4606      	mov	r6, r0
 800374c:	4698      	mov	r8, r3
 800374e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003750:	f000 80b3 	beq.w	80038ba <_printf_i+0x182>
 8003754:	d822      	bhi.n	800379c <_printf_i+0x64>
 8003756:	2963      	cmp	r1, #99	; 0x63
 8003758:	d036      	beq.n	80037c8 <_printf_i+0x90>
 800375a:	d80a      	bhi.n	8003772 <_printf_i+0x3a>
 800375c:	2900      	cmp	r1, #0
 800375e:	f000 80b9 	beq.w	80038d4 <_printf_i+0x19c>
 8003762:	2958      	cmp	r1, #88	; 0x58
 8003764:	f000 8083 	beq.w	800386e <_printf_i+0x136>
 8003768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800376c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003770:	e032      	b.n	80037d8 <_printf_i+0xa0>
 8003772:	2964      	cmp	r1, #100	; 0x64
 8003774:	d001      	beq.n	800377a <_printf_i+0x42>
 8003776:	2969      	cmp	r1, #105	; 0x69
 8003778:	d1f6      	bne.n	8003768 <_printf_i+0x30>
 800377a:	6820      	ldr	r0, [r4, #0]
 800377c:	6813      	ldr	r3, [r2, #0]
 800377e:	0605      	lsls	r5, r0, #24
 8003780:	f103 0104 	add.w	r1, r3, #4
 8003784:	d52a      	bpl.n	80037dc <_printf_i+0xa4>
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6011      	str	r1, [r2, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	da03      	bge.n	8003796 <_printf_i+0x5e>
 800378e:	222d      	movs	r2, #45	; 0x2d
 8003790:	425b      	negs	r3, r3
 8003792:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003796:	486f      	ldr	r0, [pc, #444]	; (8003954 <_printf_i+0x21c>)
 8003798:	220a      	movs	r2, #10
 800379a:	e039      	b.n	8003810 <_printf_i+0xd8>
 800379c:	2973      	cmp	r1, #115	; 0x73
 800379e:	f000 809d 	beq.w	80038dc <_printf_i+0x1a4>
 80037a2:	d808      	bhi.n	80037b6 <_printf_i+0x7e>
 80037a4:	296f      	cmp	r1, #111	; 0x6f
 80037a6:	d020      	beq.n	80037ea <_printf_i+0xb2>
 80037a8:	2970      	cmp	r1, #112	; 0x70
 80037aa:	d1dd      	bne.n	8003768 <_printf_i+0x30>
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	f043 0320 	orr.w	r3, r3, #32
 80037b2:	6023      	str	r3, [r4, #0]
 80037b4:	e003      	b.n	80037be <_printf_i+0x86>
 80037b6:	2975      	cmp	r1, #117	; 0x75
 80037b8:	d017      	beq.n	80037ea <_printf_i+0xb2>
 80037ba:	2978      	cmp	r1, #120	; 0x78
 80037bc:	d1d4      	bne.n	8003768 <_printf_i+0x30>
 80037be:	2378      	movs	r3, #120	; 0x78
 80037c0:	4865      	ldr	r0, [pc, #404]	; (8003958 <_printf_i+0x220>)
 80037c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037c6:	e055      	b.n	8003874 <_printf_i+0x13c>
 80037c8:	6813      	ldr	r3, [r2, #0]
 80037ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037ce:	1d19      	adds	r1, r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6011      	str	r1, [r2, #0]
 80037d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037d8:	2301      	movs	r3, #1
 80037da:	e08c      	b.n	80038f6 <_printf_i+0x1be>
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037e2:	6011      	str	r1, [r2, #0]
 80037e4:	bf18      	it	ne
 80037e6:	b21b      	sxthne	r3, r3
 80037e8:	e7cf      	b.n	800378a <_printf_i+0x52>
 80037ea:	6813      	ldr	r3, [r2, #0]
 80037ec:	6825      	ldr	r5, [r4, #0]
 80037ee:	1d18      	adds	r0, r3, #4
 80037f0:	6010      	str	r0, [r2, #0]
 80037f2:	0628      	lsls	r0, r5, #24
 80037f4:	d501      	bpl.n	80037fa <_printf_i+0xc2>
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	e002      	b.n	8003800 <_printf_i+0xc8>
 80037fa:	0668      	lsls	r0, r5, #25
 80037fc:	d5fb      	bpl.n	80037f6 <_printf_i+0xbe>
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	296f      	cmp	r1, #111	; 0x6f
 8003802:	bf14      	ite	ne
 8003804:	220a      	movne	r2, #10
 8003806:	2208      	moveq	r2, #8
 8003808:	4852      	ldr	r0, [pc, #328]	; (8003954 <_printf_i+0x21c>)
 800380a:	2100      	movs	r1, #0
 800380c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003810:	6865      	ldr	r5, [r4, #4]
 8003812:	2d00      	cmp	r5, #0
 8003814:	60a5      	str	r5, [r4, #8]
 8003816:	f2c0 8095 	blt.w	8003944 <_printf_i+0x20c>
 800381a:	6821      	ldr	r1, [r4, #0]
 800381c:	f021 0104 	bic.w	r1, r1, #4
 8003820:	6021      	str	r1, [r4, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d13d      	bne.n	80038a2 <_printf_i+0x16a>
 8003826:	2d00      	cmp	r5, #0
 8003828:	f040 808e 	bne.w	8003948 <_printf_i+0x210>
 800382c:	4665      	mov	r5, ip
 800382e:	2a08      	cmp	r2, #8
 8003830:	d10b      	bne.n	800384a <_printf_i+0x112>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	07db      	lsls	r3, r3, #31
 8003836:	d508      	bpl.n	800384a <_printf_i+0x112>
 8003838:	6923      	ldr	r3, [r4, #16]
 800383a:	6862      	ldr	r2, [r4, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	bfde      	ittt	le
 8003840:	2330      	movle	r3, #48	; 0x30
 8003842:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003846:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800384a:	ebac 0305 	sub.w	r3, ip, r5
 800384e:	6123      	str	r3, [r4, #16]
 8003850:	f8cd 8000 	str.w	r8, [sp]
 8003854:	463b      	mov	r3, r7
 8003856:	aa03      	add	r2, sp, #12
 8003858:	4621      	mov	r1, r4
 800385a:	4630      	mov	r0, r6
 800385c:	f7ff fef6 	bl	800364c <_printf_common>
 8003860:	3001      	adds	r0, #1
 8003862:	d14d      	bne.n	8003900 <_printf_i+0x1c8>
 8003864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003868:	b005      	add	sp, #20
 800386a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800386e:	4839      	ldr	r0, [pc, #228]	; (8003954 <_printf_i+0x21c>)
 8003870:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003874:	6813      	ldr	r3, [r2, #0]
 8003876:	6821      	ldr	r1, [r4, #0]
 8003878:	1d1d      	adds	r5, r3, #4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6015      	str	r5, [r2, #0]
 800387e:	060a      	lsls	r2, r1, #24
 8003880:	d50b      	bpl.n	800389a <_printf_i+0x162>
 8003882:	07ca      	lsls	r2, r1, #31
 8003884:	bf44      	itt	mi
 8003886:	f041 0120 	orrmi.w	r1, r1, #32
 800388a:	6021      	strmi	r1, [r4, #0]
 800388c:	b91b      	cbnz	r3, 8003896 <_printf_i+0x15e>
 800388e:	6822      	ldr	r2, [r4, #0]
 8003890:	f022 0220 	bic.w	r2, r2, #32
 8003894:	6022      	str	r2, [r4, #0]
 8003896:	2210      	movs	r2, #16
 8003898:	e7b7      	b.n	800380a <_printf_i+0xd2>
 800389a:	064d      	lsls	r5, r1, #25
 800389c:	bf48      	it	mi
 800389e:	b29b      	uxthmi	r3, r3
 80038a0:	e7ef      	b.n	8003882 <_printf_i+0x14a>
 80038a2:	4665      	mov	r5, ip
 80038a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80038a8:	fb02 3311 	mls	r3, r2, r1, r3
 80038ac:	5cc3      	ldrb	r3, [r0, r3]
 80038ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80038b2:	460b      	mov	r3, r1
 80038b4:	2900      	cmp	r1, #0
 80038b6:	d1f5      	bne.n	80038a4 <_printf_i+0x16c>
 80038b8:	e7b9      	b.n	800382e <_printf_i+0xf6>
 80038ba:	6813      	ldr	r3, [r2, #0]
 80038bc:	6825      	ldr	r5, [r4, #0]
 80038be:	1d18      	adds	r0, r3, #4
 80038c0:	6961      	ldr	r1, [r4, #20]
 80038c2:	6010      	str	r0, [r2, #0]
 80038c4:	0628      	lsls	r0, r5, #24
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	d501      	bpl.n	80038ce <_printf_i+0x196>
 80038ca:	6019      	str	r1, [r3, #0]
 80038cc:	e002      	b.n	80038d4 <_printf_i+0x19c>
 80038ce:	066a      	lsls	r2, r5, #25
 80038d0:	d5fb      	bpl.n	80038ca <_printf_i+0x192>
 80038d2:	8019      	strh	r1, [r3, #0]
 80038d4:	2300      	movs	r3, #0
 80038d6:	4665      	mov	r5, ip
 80038d8:	6123      	str	r3, [r4, #16]
 80038da:	e7b9      	b.n	8003850 <_printf_i+0x118>
 80038dc:	6813      	ldr	r3, [r2, #0]
 80038de:	1d19      	adds	r1, r3, #4
 80038e0:	6011      	str	r1, [r2, #0]
 80038e2:	681d      	ldr	r5, [r3, #0]
 80038e4:	6862      	ldr	r2, [r4, #4]
 80038e6:	2100      	movs	r1, #0
 80038e8:	4628      	mov	r0, r5
 80038ea:	f000 fab9 	bl	8003e60 <memchr>
 80038ee:	b108      	cbz	r0, 80038f4 <_printf_i+0x1bc>
 80038f0:	1b40      	subs	r0, r0, r5
 80038f2:	6060      	str	r0, [r4, #4]
 80038f4:	6863      	ldr	r3, [r4, #4]
 80038f6:	6123      	str	r3, [r4, #16]
 80038f8:	2300      	movs	r3, #0
 80038fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038fe:	e7a7      	b.n	8003850 <_printf_i+0x118>
 8003900:	6923      	ldr	r3, [r4, #16]
 8003902:	462a      	mov	r2, r5
 8003904:	4639      	mov	r1, r7
 8003906:	4630      	mov	r0, r6
 8003908:	47c0      	blx	r8
 800390a:	3001      	adds	r0, #1
 800390c:	d0aa      	beq.n	8003864 <_printf_i+0x12c>
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	079b      	lsls	r3, r3, #30
 8003912:	d413      	bmi.n	800393c <_printf_i+0x204>
 8003914:	68e0      	ldr	r0, [r4, #12]
 8003916:	9b03      	ldr	r3, [sp, #12]
 8003918:	4298      	cmp	r0, r3
 800391a:	bfb8      	it	lt
 800391c:	4618      	movlt	r0, r3
 800391e:	e7a3      	b.n	8003868 <_printf_i+0x130>
 8003920:	2301      	movs	r3, #1
 8003922:	464a      	mov	r2, r9
 8003924:	4639      	mov	r1, r7
 8003926:	4630      	mov	r0, r6
 8003928:	47c0      	blx	r8
 800392a:	3001      	adds	r0, #1
 800392c:	d09a      	beq.n	8003864 <_printf_i+0x12c>
 800392e:	3501      	adds	r5, #1
 8003930:	68e3      	ldr	r3, [r4, #12]
 8003932:	9a03      	ldr	r2, [sp, #12]
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	42ab      	cmp	r3, r5
 8003938:	dcf2      	bgt.n	8003920 <_printf_i+0x1e8>
 800393a:	e7eb      	b.n	8003914 <_printf_i+0x1dc>
 800393c:	2500      	movs	r5, #0
 800393e:	f104 0919 	add.w	r9, r4, #25
 8003942:	e7f5      	b.n	8003930 <_printf_i+0x1f8>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1ac      	bne.n	80038a2 <_printf_i+0x16a>
 8003948:	7803      	ldrb	r3, [r0, #0]
 800394a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800394e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003952:	e76c      	b.n	800382e <_printf_i+0xf6>
 8003954:	08004139 	.word	0x08004139
 8003958:	0800414a 	.word	0x0800414a

0800395c <_putc_r>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	460d      	mov	r5, r1
 8003960:	4614      	mov	r4, r2
 8003962:	4606      	mov	r6, r0
 8003964:	b118      	cbz	r0, 800396e <_putc_r+0x12>
 8003966:	6983      	ldr	r3, [r0, #24]
 8003968:	b90b      	cbnz	r3, 800396e <_putc_r+0x12>
 800396a:	f7ff fca5 	bl	80032b8 <__sinit>
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <_putc_r+0x60>)
 8003970:	429c      	cmp	r4, r3
 8003972:	d112      	bne.n	800399a <_putc_r+0x3e>
 8003974:	6874      	ldr	r4, [r6, #4]
 8003976:	68a3      	ldr	r3, [r4, #8]
 8003978:	3b01      	subs	r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	60a3      	str	r3, [r4, #8]
 800397e:	da16      	bge.n	80039ae <_putc_r+0x52>
 8003980:	69a2      	ldr	r2, [r4, #24]
 8003982:	4293      	cmp	r3, r2
 8003984:	db02      	blt.n	800398c <_putc_r+0x30>
 8003986:	b2eb      	uxtb	r3, r5
 8003988:	2b0a      	cmp	r3, #10
 800398a:	d110      	bne.n	80039ae <_putc_r+0x52>
 800398c:	4622      	mov	r2, r4
 800398e:	4629      	mov	r1, r5
 8003990:	4630      	mov	r0, r6
 8003992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003996:	f000 b85b 	b.w	8003a50 <__swbuf_r>
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <_putc_r+0x64>)
 800399c:	429c      	cmp	r4, r3
 800399e:	d101      	bne.n	80039a4 <_putc_r+0x48>
 80039a0:	68b4      	ldr	r4, [r6, #8]
 80039a2:	e7e8      	b.n	8003976 <_putc_r+0x1a>
 80039a4:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <_putc_r+0x68>)
 80039a6:	429c      	cmp	r4, r3
 80039a8:	bf08      	it	eq
 80039aa:	68f4      	ldreq	r4, [r6, #12]
 80039ac:	e7e3      	b.n	8003976 <_putc_r+0x1a>
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	b2e8      	uxtb	r0, r5
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	6022      	str	r2, [r4, #0]
 80039b6:	701d      	strb	r5, [r3, #0]
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
 80039ba:	bf00      	nop
 80039bc:	080040e8 	.word	0x080040e8
 80039c0:	08004108 	.word	0x08004108
 80039c4:	080040c8 	.word	0x080040c8

080039c8 <__sread>:
 80039c8:	b510      	push	{r4, lr}
 80039ca:	460c      	mov	r4, r1
 80039cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d0:	f000 fa54 	bl	8003e7c <_read_r>
 80039d4:	2800      	cmp	r0, #0
 80039d6:	bfab      	itete	ge
 80039d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039da:	89a3      	ldrhlt	r3, [r4, #12]
 80039dc:	181b      	addge	r3, r3, r0
 80039de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039e2:	bfac      	ite	ge
 80039e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80039e6:	81a3      	strhlt	r3, [r4, #12]
 80039e8:	bd10      	pop	{r4, pc}

080039ea <__swrite>:
 80039ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ee:	461f      	mov	r7, r3
 80039f0:	898b      	ldrh	r3, [r1, #12]
 80039f2:	4605      	mov	r5, r0
 80039f4:	05db      	lsls	r3, r3, #23
 80039f6:	460c      	mov	r4, r1
 80039f8:	4616      	mov	r6, r2
 80039fa:	d505      	bpl.n	8003a08 <__swrite+0x1e>
 80039fc:	2302      	movs	r3, #2
 80039fe:	2200      	movs	r2, #0
 8003a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a04:	f000 f9b6 	bl	8003d74 <_lseek_r>
 8003a08:	89a3      	ldrh	r3, [r4, #12]
 8003a0a:	4632      	mov	r2, r6
 8003a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a10:	81a3      	strh	r3, [r4, #12]
 8003a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a16:	463b      	mov	r3, r7
 8003a18:	4628      	mov	r0, r5
 8003a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1e:	f000 b869 	b.w	8003af4 <_write_r>

08003a22 <__sseek>:
 8003a22:	b510      	push	{r4, lr}
 8003a24:	460c      	mov	r4, r1
 8003a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a2a:	f000 f9a3 	bl	8003d74 <_lseek_r>
 8003a2e:	1c43      	adds	r3, r0, #1
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	bf15      	itete	ne
 8003a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a3e:	81a3      	strheq	r3, [r4, #12]
 8003a40:	bf18      	it	ne
 8003a42:	81a3      	strhne	r3, [r4, #12]
 8003a44:	bd10      	pop	{r4, pc}

08003a46 <__sclose>:
 8003a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a4a:	f000 b8d3 	b.w	8003bf4 <_close_r>
	...

08003a50 <__swbuf_r>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	460e      	mov	r6, r1
 8003a54:	4614      	mov	r4, r2
 8003a56:	4605      	mov	r5, r0
 8003a58:	b118      	cbz	r0, 8003a62 <__swbuf_r+0x12>
 8003a5a:	6983      	ldr	r3, [r0, #24]
 8003a5c:	b90b      	cbnz	r3, 8003a62 <__swbuf_r+0x12>
 8003a5e:	f7ff fc2b 	bl	80032b8 <__sinit>
 8003a62:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <__swbuf_r+0x98>)
 8003a64:	429c      	cmp	r4, r3
 8003a66:	d12a      	bne.n	8003abe <__swbuf_r+0x6e>
 8003a68:	686c      	ldr	r4, [r5, #4]
 8003a6a:	69a3      	ldr	r3, [r4, #24]
 8003a6c:	60a3      	str	r3, [r4, #8]
 8003a6e:	89a3      	ldrh	r3, [r4, #12]
 8003a70:	071a      	lsls	r2, r3, #28
 8003a72:	d52e      	bpl.n	8003ad2 <__swbuf_r+0x82>
 8003a74:	6923      	ldr	r3, [r4, #16]
 8003a76:	b363      	cbz	r3, 8003ad2 <__swbuf_r+0x82>
 8003a78:	6923      	ldr	r3, [r4, #16]
 8003a7a:	6820      	ldr	r0, [r4, #0]
 8003a7c:	b2f6      	uxtb	r6, r6
 8003a7e:	1ac0      	subs	r0, r0, r3
 8003a80:	6963      	ldr	r3, [r4, #20]
 8003a82:	4637      	mov	r7, r6
 8003a84:	4283      	cmp	r3, r0
 8003a86:	dc04      	bgt.n	8003a92 <__swbuf_r+0x42>
 8003a88:	4621      	mov	r1, r4
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	f000 f948 	bl	8003d20 <_fflush_r>
 8003a90:	bb28      	cbnz	r0, 8003ade <__swbuf_r+0x8e>
 8003a92:	68a3      	ldr	r3, [r4, #8]
 8003a94:	3001      	adds	r0, #1
 8003a96:	3b01      	subs	r3, #1
 8003a98:	60a3      	str	r3, [r4, #8]
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	6022      	str	r2, [r4, #0]
 8003aa0:	701e      	strb	r6, [r3, #0]
 8003aa2:	6963      	ldr	r3, [r4, #20]
 8003aa4:	4283      	cmp	r3, r0
 8003aa6:	d004      	beq.n	8003ab2 <__swbuf_r+0x62>
 8003aa8:	89a3      	ldrh	r3, [r4, #12]
 8003aaa:	07db      	lsls	r3, r3, #31
 8003aac:	d519      	bpl.n	8003ae2 <__swbuf_r+0x92>
 8003aae:	2e0a      	cmp	r6, #10
 8003ab0:	d117      	bne.n	8003ae2 <__swbuf_r+0x92>
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f000 f933 	bl	8003d20 <_fflush_r>
 8003aba:	b190      	cbz	r0, 8003ae2 <__swbuf_r+0x92>
 8003abc:	e00f      	b.n	8003ade <__swbuf_r+0x8e>
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <__swbuf_r+0x9c>)
 8003ac0:	429c      	cmp	r4, r3
 8003ac2:	d101      	bne.n	8003ac8 <__swbuf_r+0x78>
 8003ac4:	68ac      	ldr	r4, [r5, #8]
 8003ac6:	e7d0      	b.n	8003a6a <__swbuf_r+0x1a>
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <__swbuf_r+0xa0>)
 8003aca:	429c      	cmp	r4, r3
 8003acc:	bf08      	it	eq
 8003ace:	68ec      	ldreq	r4, [r5, #12]
 8003ad0:	e7cb      	b.n	8003a6a <__swbuf_r+0x1a>
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f000 f81f 	bl	8003b18 <__swsetup_r>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d0cc      	beq.n	8003a78 <__swbuf_r+0x28>
 8003ade:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	080040e8 	.word	0x080040e8
 8003aec:	08004108 	.word	0x08004108
 8003af0:	080040c8 	.word	0x080040c8

08003af4 <_write_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	4605      	mov	r5, r0
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	2200      	movs	r2, #0
 8003afe:	4c05      	ldr	r4, [pc, #20]	; (8003b14 <_write_r+0x20>)
 8003b00:	6022      	str	r2, [r4, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f7fd fac6 	bl	8001094 <_write>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d102      	bne.n	8003b12 <_write_r+0x1e>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	b103      	cbz	r3, 8003b12 <_write_r+0x1e>
 8003b10:	602b      	str	r3, [r5, #0]
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
 8003b14:	20000364 	.word	0x20000364

08003b18 <__swsetup_r>:
 8003b18:	4b32      	ldr	r3, [pc, #200]	; (8003be4 <__swsetup_r+0xcc>)
 8003b1a:	b570      	push	{r4, r5, r6, lr}
 8003b1c:	681d      	ldr	r5, [r3, #0]
 8003b1e:	4606      	mov	r6, r0
 8003b20:	460c      	mov	r4, r1
 8003b22:	b125      	cbz	r5, 8003b2e <__swsetup_r+0x16>
 8003b24:	69ab      	ldr	r3, [r5, #24]
 8003b26:	b913      	cbnz	r3, 8003b2e <__swsetup_r+0x16>
 8003b28:	4628      	mov	r0, r5
 8003b2a:	f7ff fbc5 	bl	80032b8 <__sinit>
 8003b2e:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <__swsetup_r+0xd0>)
 8003b30:	429c      	cmp	r4, r3
 8003b32:	d10f      	bne.n	8003b54 <__swsetup_r+0x3c>
 8003b34:	686c      	ldr	r4, [r5, #4]
 8003b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	0715      	lsls	r5, r2, #28
 8003b3e:	d42c      	bmi.n	8003b9a <__swsetup_r+0x82>
 8003b40:	06d0      	lsls	r0, r2, #27
 8003b42:	d411      	bmi.n	8003b68 <__swsetup_r+0x50>
 8003b44:	2209      	movs	r2, #9
 8003b46:	6032      	str	r2, [r6, #0]
 8003b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b4c:	81a3      	strh	r3, [r4, #12]
 8003b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b52:	e03e      	b.n	8003bd2 <__swsetup_r+0xba>
 8003b54:	4b25      	ldr	r3, [pc, #148]	; (8003bec <__swsetup_r+0xd4>)
 8003b56:	429c      	cmp	r4, r3
 8003b58:	d101      	bne.n	8003b5e <__swsetup_r+0x46>
 8003b5a:	68ac      	ldr	r4, [r5, #8]
 8003b5c:	e7eb      	b.n	8003b36 <__swsetup_r+0x1e>
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <__swsetup_r+0xd8>)
 8003b60:	429c      	cmp	r4, r3
 8003b62:	bf08      	it	eq
 8003b64:	68ec      	ldreq	r4, [r5, #12]
 8003b66:	e7e6      	b.n	8003b36 <__swsetup_r+0x1e>
 8003b68:	0751      	lsls	r1, r2, #29
 8003b6a:	d512      	bpl.n	8003b92 <__swsetup_r+0x7a>
 8003b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b6e:	b141      	cbz	r1, 8003b82 <__swsetup_r+0x6a>
 8003b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b74:	4299      	cmp	r1, r3
 8003b76:	d002      	beq.n	8003b7e <__swsetup_r+0x66>
 8003b78:	4630      	mov	r0, r6
 8003b7a:	f7ff fa65 	bl	8003048 <_free_r>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	6363      	str	r3, [r4, #52]	; 0x34
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b88:	81a3      	strh	r3, [r4, #12]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6063      	str	r3, [r4, #4]
 8003b8e:	6923      	ldr	r3, [r4, #16]
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	89a3      	ldrh	r3, [r4, #12]
 8003b94:	f043 0308 	orr.w	r3, r3, #8
 8003b98:	81a3      	strh	r3, [r4, #12]
 8003b9a:	6923      	ldr	r3, [r4, #16]
 8003b9c:	b94b      	cbnz	r3, 8003bb2 <__swsetup_r+0x9a>
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba8:	d003      	beq.n	8003bb2 <__swsetup_r+0x9a>
 8003baa:	4621      	mov	r1, r4
 8003bac:	4630      	mov	r0, r6
 8003bae:	f000 f917 	bl	8003de0 <__smakebuf_r>
 8003bb2:	89a2      	ldrh	r2, [r4, #12]
 8003bb4:	f012 0301 	ands.w	r3, r2, #1
 8003bb8:	d00c      	beq.n	8003bd4 <__swsetup_r+0xbc>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60a3      	str	r3, [r4, #8]
 8003bbe:	6963      	ldr	r3, [r4, #20]
 8003bc0:	425b      	negs	r3, r3
 8003bc2:	61a3      	str	r3, [r4, #24]
 8003bc4:	6923      	ldr	r3, [r4, #16]
 8003bc6:	b953      	cbnz	r3, 8003bde <__swsetup_r+0xc6>
 8003bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bcc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003bd0:	d1ba      	bne.n	8003b48 <__swsetup_r+0x30>
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	0792      	lsls	r2, r2, #30
 8003bd6:	bf58      	it	pl
 8003bd8:	6963      	ldrpl	r3, [r4, #20]
 8003bda:	60a3      	str	r3, [r4, #8]
 8003bdc:	e7f2      	b.n	8003bc4 <__swsetup_r+0xac>
 8003bde:	2000      	movs	r0, #0
 8003be0:	e7f7      	b.n	8003bd2 <__swsetup_r+0xba>
 8003be2:	bf00      	nop
 8003be4:	2000000c 	.word	0x2000000c
 8003be8:	080040e8 	.word	0x080040e8
 8003bec:	08004108 	.word	0x08004108
 8003bf0:	080040c8 	.word	0x080040c8

08003bf4 <_close_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4c05      	ldr	r4, [pc, #20]	; (8003c10 <_close_r+0x1c>)
 8003bfa:	4605      	mov	r5, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	6023      	str	r3, [r4, #0]
 8003c00:	f7fd fa64 	bl	80010cc <_close>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_close_r+0x1a>
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_close_r+0x1a>
 8003c0c:	602b      	str	r3, [r5, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	20000364 	.word	0x20000364

08003c14 <__sflush_r>:
 8003c14:	898a      	ldrh	r2, [r1, #12]
 8003c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	0710      	lsls	r0, r2, #28
 8003c1e:	460c      	mov	r4, r1
 8003c20:	d458      	bmi.n	8003cd4 <__sflush_r+0xc0>
 8003c22:	684b      	ldr	r3, [r1, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	dc05      	bgt.n	8003c34 <__sflush_r+0x20>
 8003c28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	dc02      	bgt.n	8003c34 <__sflush_r+0x20>
 8003c2e:	2000      	movs	r0, #0
 8003c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c36:	2e00      	cmp	r6, #0
 8003c38:	d0f9      	beq.n	8003c2e <__sflush_r+0x1a>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c40:	682f      	ldr	r7, [r5, #0]
 8003c42:	6a21      	ldr	r1, [r4, #32]
 8003c44:	602b      	str	r3, [r5, #0]
 8003c46:	d032      	beq.n	8003cae <__sflush_r+0x9a>
 8003c48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c4a:	89a3      	ldrh	r3, [r4, #12]
 8003c4c:	075a      	lsls	r2, r3, #29
 8003c4e:	d505      	bpl.n	8003c5c <__sflush_r+0x48>
 8003c50:	6863      	ldr	r3, [r4, #4]
 8003c52:	1ac0      	subs	r0, r0, r3
 8003c54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c56:	b10b      	cbz	r3, 8003c5c <__sflush_r+0x48>
 8003c58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c5a:	1ac0      	subs	r0, r0, r3
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	4602      	mov	r2, r0
 8003c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c62:	6a21      	ldr	r1, [r4, #32]
 8003c64:	4628      	mov	r0, r5
 8003c66:	47b0      	blx	r6
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	89a3      	ldrh	r3, [r4, #12]
 8003c6c:	d106      	bne.n	8003c7c <__sflush_r+0x68>
 8003c6e:	6829      	ldr	r1, [r5, #0]
 8003c70:	291d      	cmp	r1, #29
 8003c72:	d848      	bhi.n	8003d06 <__sflush_r+0xf2>
 8003c74:	4a29      	ldr	r2, [pc, #164]	; (8003d1c <__sflush_r+0x108>)
 8003c76:	40ca      	lsrs	r2, r1
 8003c78:	07d6      	lsls	r6, r2, #31
 8003c7a:	d544      	bpl.n	8003d06 <__sflush_r+0xf2>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	6062      	str	r2, [r4, #4]
 8003c80:	6922      	ldr	r2, [r4, #16]
 8003c82:	04d9      	lsls	r1, r3, #19
 8003c84:	6022      	str	r2, [r4, #0]
 8003c86:	d504      	bpl.n	8003c92 <__sflush_r+0x7e>
 8003c88:	1c42      	adds	r2, r0, #1
 8003c8a:	d101      	bne.n	8003c90 <__sflush_r+0x7c>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	b903      	cbnz	r3, 8003c92 <__sflush_r+0x7e>
 8003c90:	6560      	str	r0, [r4, #84]	; 0x54
 8003c92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c94:	602f      	str	r7, [r5, #0]
 8003c96:	2900      	cmp	r1, #0
 8003c98:	d0c9      	beq.n	8003c2e <__sflush_r+0x1a>
 8003c9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c9e:	4299      	cmp	r1, r3
 8003ca0:	d002      	beq.n	8003ca8 <__sflush_r+0x94>
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f7ff f9d0 	bl	8003048 <_free_r>
 8003ca8:	2000      	movs	r0, #0
 8003caa:	6360      	str	r0, [r4, #52]	; 0x34
 8003cac:	e7c0      	b.n	8003c30 <__sflush_r+0x1c>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	47b0      	blx	r6
 8003cb4:	1c41      	adds	r1, r0, #1
 8003cb6:	d1c8      	bne.n	8003c4a <__sflush_r+0x36>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0c5      	beq.n	8003c4a <__sflush_r+0x36>
 8003cbe:	2b1d      	cmp	r3, #29
 8003cc0:	d001      	beq.n	8003cc6 <__sflush_r+0xb2>
 8003cc2:	2b16      	cmp	r3, #22
 8003cc4:	d101      	bne.n	8003cca <__sflush_r+0xb6>
 8003cc6:	602f      	str	r7, [r5, #0]
 8003cc8:	e7b1      	b.n	8003c2e <__sflush_r+0x1a>
 8003cca:	89a3      	ldrh	r3, [r4, #12]
 8003ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd0:	81a3      	strh	r3, [r4, #12]
 8003cd2:	e7ad      	b.n	8003c30 <__sflush_r+0x1c>
 8003cd4:	690f      	ldr	r7, [r1, #16]
 8003cd6:	2f00      	cmp	r7, #0
 8003cd8:	d0a9      	beq.n	8003c2e <__sflush_r+0x1a>
 8003cda:	0793      	lsls	r3, r2, #30
 8003cdc:	bf18      	it	ne
 8003cde:	2300      	movne	r3, #0
 8003ce0:	680e      	ldr	r6, [r1, #0]
 8003ce2:	bf08      	it	eq
 8003ce4:	694b      	ldreq	r3, [r1, #20]
 8003ce6:	eba6 0807 	sub.w	r8, r6, r7
 8003cea:	600f      	str	r7, [r1, #0]
 8003cec:	608b      	str	r3, [r1, #8]
 8003cee:	f1b8 0f00 	cmp.w	r8, #0
 8003cf2:	dd9c      	ble.n	8003c2e <__sflush_r+0x1a>
 8003cf4:	4643      	mov	r3, r8
 8003cf6:	463a      	mov	r2, r7
 8003cf8:	6a21      	ldr	r1, [r4, #32]
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003cfe:	47b0      	blx	r6
 8003d00:	2800      	cmp	r0, #0
 8003d02:	dc06      	bgt.n	8003d12 <__sflush_r+0xfe>
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d0a:	81a3      	strh	r3, [r4, #12]
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d10:	e78e      	b.n	8003c30 <__sflush_r+0x1c>
 8003d12:	4407      	add	r7, r0
 8003d14:	eba8 0800 	sub.w	r8, r8, r0
 8003d18:	e7e9      	b.n	8003cee <__sflush_r+0xda>
 8003d1a:	bf00      	nop
 8003d1c:	20400001 	.word	0x20400001

08003d20 <_fflush_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	690b      	ldr	r3, [r1, #16]
 8003d24:	4605      	mov	r5, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	b1db      	cbz	r3, 8003d62 <_fflush_r+0x42>
 8003d2a:	b118      	cbz	r0, 8003d34 <_fflush_r+0x14>
 8003d2c:	6983      	ldr	r3, [r0, #24]
 8003d2e:	b90b      	cbnz	r3, 8003d34 <_fflush_r+0x14>
 8003d30:	f7ff fac2 	bl	80032b8 <__sinit>
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <_fflush_r+0x48>)
 8003d36:	429c      	cmp	r4, r3
 8003d38:	d109      	bne.n	8003d4e <_fflush_r+0x2e>
 8003d3a:	686c      	ldr	r4, [r5, #4]
 8003d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d40:	b17b      	cbz	r3, 8003d62 <_fflush_r+0x42>
 8003d42:	4621      	mov	r1, r4
 8003d44:	4628      	mov	r0, r5
 8003d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d4a:	f7ff bf63 	b.w	8003c14 <__sflush_r>
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <_fflush_r+0x4c>)
 8003d50:	429c      	cmp	r4, r3
 8003d52:	d101      	bne.n	8003d58 <_fflush_r+0x38>
 8003d54:	68ac      	ldr	r4, [r5, #8]
 8003d56:	e7f1      	b.n	8003d3c <_fflush_r+0x1c>
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <_fflush_r+0x50>)
 8003d5a:	429c      	cmp	r4, r3
 8003d5c:	bf08      	it	eq
 8003d5e:	68ec      	ldreq	r4, [r5, #12]
 8003d60:	e7ec      	b.n	8003d3c <_fflush_r+0x1c>
 8003d62:	2000      	movs	r0, #0
 8003d64:	bd38      	pop	{r3, r4, r5, pc}
 8003d66:	bf00      	nop
 8003d68:	080040e8 	.word	0x080040e8
 8003d6c:	08004108 	.word	0x08004108
 8003d70:	080040c8 	.word	0x080040c8

08003d74 <_lseek_r>:
 8003d74:	b538      	push	{r3, r4, r5, lr}
 8003d76:	4605      	mov	r5, r0
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	4c05      	ldr	r4, [pc, #20]	; (8003d94 <_lseek_r+0x20>)
 8003d80:	6022      	str	r2, [r4, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f7fd f9c6 	bl	8001114 <_lseek>
 8003d88:	1c43      	adds	r3, r0, #1
 8003d8a:	d102      	bne.n	8003d92 <_lseek_r+0x1e>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	b103      	cbz	r3, 8003d92 <_lseek_r+0x1e>
 8003d90:	602b      	str	r3, [r5, #0]
 8003d92:	bd38      	pop	{r3, r4, r5, pc}
 8003d94:	20000364 	.word	0x20000364

08003d98 <__swhatbuf_r>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	460e      	mov	r6, r1
 8003d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da0:	b096      	sub	sp, #88	; 0x58
 8003da2:	2900      	cmp	r1, #0
 8003da4:	4614      	mov	r4, r2
 8003da6:	461d      	mov	r5, r3
 8003da8:	da07      	bge.n	8003dba <__swhatbuf_r+0x22>
 8003daa:	2300      	movs	r3, #0
 8003dac:	602b      	str	r3, [r5, #0]
 8003dae:	89b3      	ldrh	r3, [r6, #12]
 8003db0:	061a      	lsls	r2, r3, #24
 8003db2:	d410      	bmi.n	8003dd6 <__swhatbuf_r+0x3e>
 8003db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db8:	e00e      	b.n	8003dd8 <__swhatbuf_r+0x40>
 8003dba:	466a      	mov	r2, sp
 8003dbc:	f000 f870 	bl	8003ea0 <_fstat_r>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	dbf2      	blt.n	8003daa <__swhatbuf_r+0x12>
 8003dc4:	9a01      	ldr	r2, [sp, #4]
 8003dc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003dca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003dce:	425a      	negs	r2, r3
 8003dd0:	415a      	adcs	r2, r3
 8003dd2:	602a      	str	r2, [r5, #0]
 8003dd4:	e7ee      	b.n	8003db4 <__swhatbuf_r+0x1c>
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	2000      	movs	r0, #0
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	b016      	add	sp, #88	; 0x58
 8003dde:	bd70      	pop	{r4, r5, r6, pc}

08003de0 <__smakebuf_r>:
 8003de0:	898b      	ldrh	r3, [r1, #12]
 8003de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003de4:	079d      	lsls	r5, r3, #30
 8003de6:	4606      	mov	r6, r0
 8003de8:	460c      	mov	r4, r1
 8003dea:	d507      	bpl.n	8003dfc <__smakebuf_r+0x1c>
 8003dec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	6123      	str	r3, [r4, #16]
 8003df4:	2301      	movs	r3, #1
 8003df6:	6163      	str	r3, [r4, #20]
 8003df8:	b002      	add	sp, #8
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}
 8003dfc:	ab01      	add	r3, sp, #4
 8003dfe:	466a      	mov	r2, sp
 8003e00:	f7ff ffca 	bl	8003d98 <__swhatbuf_r>
 8003e04:	9900      	ldr	r1, [sp, #0]
 8003e06:	4605      	mov	r5, r0
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f7ff f969 	bl	80030e0 <_malloc_r>
 8003e0e:	b948      	cbnz	r0, 8003e24 <__smakebuf_r+0x44>
 8003e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e14:	059a      	lsls	r2, r3, #22
 8003e16:	d4ef      	bmi.n	8003df8 <__smakebuf_r+0x18>
 8003e18:	f023 0303 	bic.w	r3, r3, #3
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	81a3      	strh	r3, [r4, #12]
 8003e22:	e7e3      	b.n	8003dec <__smakebuf_r+0xc>
 8003e24:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <__smakebuf_r+0x7c>)
 8003e26:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	6020      	str	r0, [r4, #0]
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e30:	81a3      	strh	r3, [r4, #12]
 8003e32:	9b00      	ldr	r3, [sp, #0]
 8003e34:	6120      	str	r0, [r4, #16]
 8003e36:	6163      	str	r3, [r4, #20]
 8003e38:	9b01      	ldr	r3, [sp, #4]
 8003e3a:	b15b      	cbz	r3, 8003e54 <__smakebuf_r+0x74>
 8003e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e40:	4630      	mov	r0, r6
 8003e42:	f000 f83f 	bl	8003ec4 <_isatty_r>
 8003e46:	b128      	cbz	r0, 8003e54 <__smakebuf_r+0x74>
 8003e48:	89a3      	ldrh	r3, [r4, #12]
 8003e4a:	f023 0303 	bic.w	r3, r3, #3
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	81a3      	strh	r3, [r4, #12]
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	431d      	orrs	r5, r3
 8003e58:	81a5      	strh	r5, [r4, #12]
 8003e5a:	e7cd      	b.n	8003df8 <__smakebuf_r+0x18>
 8003e5c:	08003281 	.word	0x08003281

08003e60 <memchr>:
 8003e60:	b510      	push	{r4, lr}
 8003e62:	b2c9      	uxtb	r1, r1
 8003e64:	4402      	add	r2, r0
 8003e66:	4290      	cmp	r0, r2
 8003e68:	4603      	mov	r3, r0
 8003e6a:	d101      	bne.n	8003e70 <memchr+0x10>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e003      	b.n	8003e78 <memchr+0x18>
 8003e70:	781c      	ldrb	r4, [r3, #0]
 8003e72:	3001      	adds	r0, #1
 8003e74:	428c      	cmp	r4, r1
 8003e76:	d1f6      	bne.n	8003e66 <memchr+0x6>
 8003e78:	4618      	mov	r0, r3
 8003e7a:	bd10      	pop	{r4, pc}

08003e7c <_read_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4605      	mov	r5, r0
 8003e80:	4608      	mov	r0, r1
 8003e82:	4611      	mov	r1, r2
 8003e84:	2200      	movs	r2, #0
 8003e86:	4c05      	ldr	r4, [pc, #20]	; (8003e9c <_read_r+0x20>)
 8003e88:	6022      	str	r2, [r4, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f7fd f8e5 	bl	800105a <_read>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d102      	bne.n	8003e9a <_read_r+0x1e>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	b103      	cbz	r3, 8003e9a <_read_r+0x1e>
 8003e98:	602b      	str	r3, [r5, #0]
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
 8003e9c:	20000364 	.word	0x20000364

08003ea0 <_fstat_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	4c06      	ldr	r4, [pc, #24]	; (8003ec0 <_fstat_r+0x20>)
 8003ea6:	4605      	mov	r5, r0
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	f7fd f918 	bl	80010e2 <_fstat>
 8003eb2:	1c43      	adds	r3, r0, #1
 8003eb4:	d102      	bne.n	8003ebc <_fstat_r+0x1c>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	b103      	cbz	r3, 8003ebc <_fstat_r+0x1c>
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	bd38      	pop	{r3, r4, r5, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000364 	.word	0x20000364

08003ec4 <_isatty_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	4c05      	ldr	r4, [pc, #20]	; (8003ee0 <_isatty_r+0x1c>)
 8003eca:	4605      	mov	r5, r0
 8003ecc:	4608      	mov	r0, r1
 8003ece:	6023      	str	r3, [r4, #0]
 8003ed0:	f7fd f916 	bl	8001100 <_isatty>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d102      	bne.n	8003ede <_isatty_r+0x1a>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	b103      	cbz	r3, 8003ede <_isatty_r+0x1a>
 8003edc:	602b      	str	r3, [r5, #0]
 8003ede:	bd38      	pop	{r3, r4, r5, pc}
 8003ee0:	20000364 	.word	0x20000364

08003ee4 <_init>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	bf00      	nop
 8003ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eea:	bc08      	pop	{r3}
 8003eec:	469e      	mov	lr, r3
 8003eee:	4770      	bx	lr

08003ef0 <_fini>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	bf00      	nop
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr
