
bluepill_blinky_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080038cc  080038cc  000138cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800398c  0800398c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800398c  0800398c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800398c  0800398c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000070  08003a04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08003a04  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd86  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020d7  00000000  00000000  0002de1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002fef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  00030bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000158c9  00000000  00000000  00031790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a5f1  00000000  00000000  00047059  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007282d  00000000  00000000  0005164a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c3e77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bbc  00000000  00000000  000c3ef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080038b4 	.word	0x080038b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080038b4 	.word	0x080038b4

0800014c <initializeLEDApplication>:

led_pattern_queue_t firstBusQueue = { };
led_pattern_queue_t secondBusQueue = { };
uint32_t notif;

void initializeLEDApplication() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	firstBusQueue.head = NULL;
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <initializeLEDApplication+0x18>)
 8000152:	2200      	movs	r2, #0
 8000154:	601a      	str	r2, [r3, #0]
	secondBusQueue.head = NULL;
 8000156:	4b04      	ldr	r3, [pc, #16]	; (8000168 <initializeLEDApplication+0x1c>)
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]

	//clearLEDs(250, bus_2);
}
 800015c:	bf00      	nop
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	2000008c 	.word	0x2000008c
 8000168:	20000094 	.word	0x20000094

0800016c <sendOneLEDColor>:
//	}

	return EXIT_SUCCESS;
}

void sendOneLEDColor() {
 800016c:	b580      	push	{r7, lr}
 800016e:	b08e      	sub	sp, #56	; 0x38
 8000170:	af00      	add	r7, sp, #0
	led_rgb_color_t led[7] = { 0 };
 8000172:	f107 031c 	add.w	r3, r7, #28
 8000176:	2200      	movs	r2, #0
 8000178:	601a      	str	r2, [r3, #0]
 800017a:	605a      	str	r2, [r3, #4]
 800017c:	609a      	str	r2, [r3, #8]
 800017e:	60da      	str	r2, [r3, #12]
 8000180:	611a      	str	r2, [r3, #16]
 8000182:	615a      	str	r2, [r3, #20]
 8000184:	619a      	str	r2, [r3, #24]
	led_rgb_color_t led_tmp[7] = { 0 };
 8000186:	463b      	mov	r3, r7
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
 800018c:	605a      	str	r2, [r3, #4]
 800018e:	609a      	str	r2, [r3, #8]
 8000190:	60da      	str	r2, [r3, #12]
 8000192:	611a      	str	r2, [r3, #16]
 8000194:	615a      	str	r2, [r3, #20]
 8000196:	619a      	str	r2, [r3, #24]

	led[0].red = 5;
 8000198:	2305      	movs	r3, #5
 800019a:	773b      	strb	r3, [r7, #28]
	led[0].green = 5;
 800019c:	2305      	movs	r3, #5
 800019e:	777b      	strb	r3, [r7, #29]
	led[0].blue = 5;
 80001a0:	2305      	movs	r3, #5
 80001a2:	77bb      	strb	r3, [r7, #30]
	led[0].white = 5;
 80001a4:	2305      	movs	r3, #5
 80001a6:	77fb      	strb	r3, [r7, #31]

	led[1].red = 5;
 80001a8:	2305      	movs	r3, #5
 80001aa:	f887 3020 	strb.w	r3, [r7, #32]
	led[1].green = 5;
 80001ae:	2305      	movs	r3, #5
 80001b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	led[1].blue = 5;
 80001b4:	2305      	movs	r3, #5
 80001b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	led[1].white = 5;
 80001ba:	2305      	movs	r3, #5
 80001bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	led[2].red = 5;
 80001c0:	2305      	movs	r3, #5
 80001c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	led[2].green = 5;
 80001c6:	2305      	movs	r3, #5
 80001c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	led[2].blue = 5;
 80001cc:	2305      	movs	r3, #5
 80001ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	led[2].white = 5;
 80001d2:	2305      	movs	r3, #5
 80001d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	led[3].red = 15;
 80001d8:	230f      	movs	r3, #15
 80001da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	led[3].green = 15;
 80001de:	230f      	movs	r3, #15
 80001e0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	led[3].blue = 15;
 80001e4:	230f      	movs	r3, #15
 80001e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	led[3].white = 5;
 80001ea:	2305      	movs	r3, #5
 80001ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	led[4].red = 75;
 80001f0:	234b      	movs	r3, #75	; 0x4b
 80001f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	led[4].green = 75;
 80001f6:	234b      	movs	r3, #75	; 0x4b
 80001f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	led[4].blue = 75;
 80001fc:	234b      	movs	r3, #75	; 0x4b
 80001fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	led[4].white = 5;
 8000202:	2305      	movs	r3, #5
 8000204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	led[5].red = 200;
 8000208:	23c8      	movs	r3, #200	; 0xc8
 800020a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	led[5].green = 200;
 800020e:	23c8      	movs	r3, #200	; 0xc8
 8000210:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	led[5].blue = 200;
 8000214:	23c8      	movs	r3, #200	; 0xc8
 8000216:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	led[5].white = 10;
 800021a:	230a      	movs	r3, #10
 800021c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	led[6].red = 75;
 8000220:	234b      	movs	r3, #75	; 0x4b
 8000222:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	led[6].green = 75;
 8000226:	234b      	movs	r3, #75	; 0x4b
 8000228:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	led[6].blue = 75;
 800022c:	234b      	movs	r3, #75	; 0x4b
 800022e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	led[6].white = 5;
 8000232:	2305      	movs	r3, #5
 8000234:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	led[7].red = 15;
 8000238:	230f      	movs	r3, #15
 800023a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	led[7].green = 15;
 800023e:	230f      	movs	r3, #15
 8000240:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	led[7].blue = 15;
 8000244:	230f      	movs	r3, #15
 8000246:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	led[7].white = 5;
 800024a:	2305      	movs	r3, #5
 800024c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
//
//		showLEDs(led, 7, bus_2);
//		HAL_Delay(100);
//	}
	while (1) {
		if (notif & 1) {
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <sendOneLEDColor+0x118>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0f9      	beq.n	8000250 <sendOneLEDColor+0xe4>
			showLEDs(led, 7, bus_2);
 800025c:	f107 031c 	add.w	r3, r7, #28
 8000260:	2201      	movs	r2, #1
 8000262:	2107      	movs	r1, #7
 8000264:	4618      	mov	r0, r3
 8000266:	f000 faf1 	bl	800084c <showLEDs>
			HAL_Delay(1000);
 800026a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026e:	f000 fdc1 	bl	8000df4 <HAL_Delay>
			clearLEDs(7, bus_2);
 8000272:	2101      	movs	r1, #1
 8000274:	2007      	movs	r0, #7
 8000276:	f000 fac6 	bl	8000806 <clearLEDs>
			notif = 0;
 800027a:	4b02      	ldr	r3, [pc, #8]	; (8000284 <sendOneLEDColor+0x118>)
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
		if (notif & 1) {
 8000280:	e7e6      	b.n	8000250 <sendOneLEDColor+0xe4>
 8000282:	bf00      	nop
 8000284:	2000019c 	.word	0x2000019c

08000288 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
//	}
//	if (gotCalled == 1) {
//		notif = 1;
//		__HAL_TIM_SET_AUTORELOAD(htim, 2000);
//	}
	notif = 1;
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000292:	2201      	movs	r2, #1
 8000294:	601a      	str	r2, [r3, #0]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	2000019c 	.word	0x2000019c

080002a4 <HAL_TIM_TriggerCallback>:

void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	printf("lol");
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <HAL_TIM_TriggerCallback+0x18>)
 80002ae:	f002 fcb9 	bl	8002c24 <iprintf>
}
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	080038cc 	.word	0x080038cc

080002c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002c4:	f000 fd34 	bl	8000d30 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002c8:	f000 f82e 	bl	8000328 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002cc:	f000 f950 	bl	8000570 <MX_GPIO_Init>
	MX_DMA_Init();
 80002d0:	f000 f928 	bl	8000524 <MX_DMA_Init>
	MX_SPI2_Init();
 80002d4:	f000 f8a0 	bl	8000418 <MX_SPI2_Init>
	MX_SPI1_Init();
 80002d8:	f000 f868 	bl	80003ac <MX_SPI1_Init>
	MX_TIM2_Init();
 80002dc:	f000 f8d2 	bl	8000484 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e6:	480c      	ldr	r0, [pc, #48]	; (8000318 <main+0x58>)
 80002e8:	f001 f9fc 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80002ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f0:	f000 fd80 	bl	8000df4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fa:	4807      	ldr	r0, [pc, #28]	; (8000318 <main+0x58>)
 80002fc:	f001 f9f2 	bl	80016e4 <HAL_GPIO_WritePin>
	initializeSPIAdapter(&hspi1, &hspi2);
 8000300:	4906      	ldr	r1, [pc, #24]	; (800031c <main+0x5c>)
 8000302:	4807      	ldr	r0, [pc, #28]	; (8000320 <main+0x60>)
 8000304:	f000 f992 	bl	800062c <initializeSPIAdapter>
	initializeLEDApplication();
 8000308:	f7ff ff20 	bl	800014c <initializeLEDApplication>
	HAL_TIM_Base_Start_IT(&htim2);
 800030c:	4805      	ldr	r0, [pc, #20]	; (8000324 <main+0x64>)
 800030e:	f002 f84a 	bl	80023a6 <HAL_TIM_Base_Start_IT>
	sendOneLEDColor();
 8000312:	f7ff ff2b 	bl	800016c <sendOneLEDColor>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000316:	e7fe      	b.n	8000316 <main+0x56>
 8000318:	40011000 	.word	0x40011000
 800031c:	200001a0 	.word	0x200001a0
 8000320:	200001f8 	.word	0x200001f8
 8000324:	20000250 	.word	0x20000250

08000328 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b090      	sub	sp, #64	; 0x40
 800032c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f002 fbc5 	bl	8002ac6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034a:	2302      	movs	r3, #2
 800034c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034e:	2301      	movs	r3, #1
 8000350:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000352:	2310      	movs	r3, #16
 8000354:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000356:	2302      	movs	r3, #2
 8000358:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800035a:	2300      	movs	r3, #0
 800035c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800035e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000362:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000364:	f107 0318 	add.w	r3, r7, #24
 8000368:	4618      	mov	r0, r3
 800036a:	f001 f9d3 	bl	8001714 <HAL_RCC_OscConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x50>
		Error_Handler();
 8000374:	f000 f954 	bl	8000620 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000378:	230f      	movs	r3, #15
 800037a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037c:	2302      	movs	r3, #2
 800037e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000388:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2102      	movs	r1, #2
 8000392:	4618      	mov	r0, r3
 8000394:	f001 fc3e 	bl	8001c14 <HAL_RCC_ClockConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x7a>
		Error_Handler();
 800039e:	f000 f93f 	bl	8000620 <Error_Handler>
	}
}
 80003a2:	bf00      	nop
 80003a4:	3740      	adds	r7, #64	; 0x40
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80003b0:	4b17      	ldr	r3, [pc, #92]	; (8000410 <MX_SPI1_Init+0x64>)
 80003b2:	4a18      	ldr	r2, [pc, #96]	; (8000414 <MX_SPI1_Init+0x68>)
 80003b4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80003b6:	4b16      	ldr	r3, [pc, #88]	; (8000410 <MX_SPI1_Init+0x64>)
 80003b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003bc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_SPI1_Init+0x64>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <MX_SPI1_Init+0x64>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_SPI1_Init+0x64>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_SPI1_Init+0x64>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_SPI1_Init+0x64>)
 80003d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003dc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_SPI1_Init+0x64>)
 80003e0:	2210      	movs	r2, #16
 80003e2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <MX_SPI1_Init+0x64>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_SPI1_Init+0x64>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <MX_SPI1_Init+0x64>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_SPI1_Init+0x64>)
 80003f8:	220a      	movs	r2, #10
 80003fa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <MX_SPI1_Init+0x64>)
 80003fe:	f001 fd73 	bl	8001ee8 <HAL_SPI_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_SPI1_Init+0x60>
		Error_Handler();
 8000408:	f000 f90a 	bl	8000620 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	200001f8 	.word	0x200001f8
 8000414:	40013000 	.word	0x40013000

08000418 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800041c:	4b17      	ldr	r3, [pc, #92]	; (800047c <MX_SPI2_Init+0x64>)
 800041e:	4a18      	ldr	r2, [pc, #96]	; (8000480 <MX_SPI2_Init+0x68>)
 8000420:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000422:	4b16      	ldr	r3, [pc, #88]	; (800047c <MX_SPI2_Init+0x64>)
 8000424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000428:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_SPI2_Init+0x64>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_SPI2_Init+0x64>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_SPI2_Init+0x64>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_SPI2_Init+0x64>)
 800043e:	2200      	movs	r2, #0
 8000440:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_SPI2_Init+0x64>)
 8000444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000448:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_SPI2_Init+0x64>)
 800044c:	2208      	movs	r2, #8
 800044e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <MX_SPI2_Init+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_SPI2_Init+0x64>)
 8000458:	2200      	movs	r2, #0
 800045a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <MX_SPI2_Init+0x64>)
 800045e:	2200      	movs	r2, #0
 8000460:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_SPI2_Init+0x64>)
 8000464:	220a      	movs	r2, #10
 8000466:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <MX_SPI2_Init+0x64>)
 800046a:	f001 fd3d 	bl	8001ee8 <HAL_SPI_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000474:	f000 f8d4 	bl	8000620 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	200001a0 	.word	0x200001a0
 8000480:	40003800 	.word	0x40003800

08000484 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800048a:	f107 0308 	add.w	r3, r7, #8
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000498:	463b      	mov	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */
	htim2.Init.RepetitionCounter = 1;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <MX_TIM2_Init+0x9c>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	615a      	str	r2, [r3, #20]
	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80004a6:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <MX_TIM2_Init+0x9c>)
 80004a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ac:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 64000;
 80004ae:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <MX_TIM2_Init+0x9c>)
 80004b0:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80004b4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b6:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <MX_TIM2_Init+0x9c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 8000;
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <MX_TIM2_Init+0x9c>)
 80004be:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80004c2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c4:	4b16      	ldr	r3, [pc, #88]	; (8000520 <MX_TIM2_Init+0x9c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <MX_TIM2_Init+0x9c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80004d0:	4813      	ldr	r0, [pc, #76]	; (8000520 <MX_TIM2_Init+0x9c>)
 80004d2:	f001 ff3d 	bl	8002350 <HAL_TIM_Base_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM2_Init+0x5c>
		Error_Handler();
 80004dc:	f000 f8a0 	bl	8000620 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	4619      	mov	r1, r3
 80004ec:	480c      	ldr	r0, [pc, #48]	; (8000520 <MX_TIM2_Init+0x9c>)
 80004ee:	f002 f885 	bl	80025fc <HAL_TIM_ConfigClockSource>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM2_Init+0x78>
		Error_Handler();
 80004f8:	f000 f892 	bl	8000620 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004fc:	2300      	movs	r3, #0
 80004fe:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000504:	463b      	mov	r3, r7
 8000506:	4619      	mov	r1, r3
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_TIM2_Init+0x9c>)
 800050a:	f002 fa41 	bl	8002990 <HAL_TIMEx_MasterConfigSynchronization>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM2_Init+0x94>
			!= HAL_OK) {
		Error_Handler();
 8000514:	f000 f884 	bl	8000620 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000518:	bf00      	nop
 800051a:	3718      	adds	r7, #24
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000250 	.word	0x20000250

08000524 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <MX_DMA_Init+0x48>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a0f      	ldr	r2, [pc, #60]	; (800056c <MX_DMA_Init+0x48>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <MX_DMA_Init+0x48>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2100      	movs	r1, #0
 8000546:	200d      	movs	r0, #13
 8000548:	f000 fd4d 	bl	8000fe6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800054c:	200d      	movs	r0, #13
 800054e:	f000 fd66 	bl	800101e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	200f      	movs	r0, #15
 8000558:	f000 fd45 	bl	8000fe6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800055c:	200f      	movs	r0, #15
 800055e:	f000 fd5e 	bl	800101e <HAL_NVIC_EnableIRQ>

}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000584:	4b24      	ldr	r3, [pc, #144]	; (8000618 <MX_GPIO_Init+0xa8>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a23      	ldr	r2, [pc, #140]	; (8000618 <MX_GPIO_Init+0xa8>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <MX_GPIO_Init+0xa8>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0310 	and.w	r3, r3, #16
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <MX_GPIO_Init+0xa8>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <MX_GPIO_Init+0xa8>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <MX_GPIO_Init+0xa8>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0320 	and.w	r3, r3, #32
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <MX_GPIO_Init+0xa8>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a17      	ldr	r2, [pc, #92]	; (8000618 <MX_GPIO_Init+0xa8>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <MX_GPIO_Init+0xa8>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_GPIO_Init+0xa8>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a11      	ldr	r2, [pc, #68]	; (8000618 <MX_GPIO_Init+0xa8>)
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_GPIO_Init+0xa8>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0308 	and.w	r3, r3, #8
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ea:	480c      	ldr	r0, [pc, #48]	; (800061c <MX_GPIO_Init+0xac>)
 80005ec:	f001 f87a 	bl	80016e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4619      	mov	r1, r3
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <MX_GPIO_Init+0xac>)
 800060a:	f000 ff11 	bl	8001430 <HAL_GPIO_Init>

}
 800060e:	bf00      	nop
 8000610:	3720      	adds	r7, #32
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000
 800061c:	40011000 	.word	0x40011000

08000620 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <initializeSPIAdapter>:
#include "sk6812_rgbw.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void initializeSPIAdapter(SPI_HandleTypeDef *hspi_1, SPI_HandleTypeDef *hspi_2) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	memcpy(&first_hspi, hspi_1, sizeof(SPI_HandleTypeDef));
 8000636:	2258      	movs	r2, #88	; 0x58
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <initializeSPIAdapter+0x34>)
 800063c:	f002 fa38 	bl	8002ab0 <memcpy>
	memcpy(&second_hspi, hspi_2, sizeof(SPI_HandleTypeDef));
 8000640:	2258      	movs	r2, #88	; 0x58
 8000642:	6839      	ldr	r1, [r7, #0]
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <initializeSPIAdapter+0x38>)
 8000646:	f002 fa33 	bl	8002ab0 <memcpy>

	HAL_SPI_MspInit(&first_hspi);
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <initializeSPIAdapter+0x34>)
 800064c:	f000 f950 	bl	80008f0 <HAL_SPI_MspInit>
	HAL_SPI_MspInit(&second_hspi);
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <initializeSPIAdapter+0x38>)
 8000652:	f000 f94d 	bl	80008f0 <HAL_SPI_MspInit>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000144 	.word	0x20000144
 8000664:	200000a8 	.word	0x200000a8

08000668 <sendSymbolStreamOnLine>:

static void sendSymbolStreamOnLine(uint8_t *symbols, uint16_t length,
		spi_bus_num_t busNum) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b098      	sub	sp, #96	; 0x60
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	807b      	strh	r3, [r7, #2]
 8000674:	4613      	mov	r3, r2
 8000676:	707b      	strb	r3, [r7, #1]
	SPI_HandleTypeDef hspi;

	if(busNum == bus_1){
 8000678:	787b      	ldrb	r3, [r7, #1]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d108      	bne.n	8000690 <sendSymbolStreamOnLine+0x28>
		hspi = first_hspi;
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <sendSymbolStreamOnLine+0x5c>)
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	4611      	mov	r1, r2
 8000686:	2258      	movs	r2, #88	; 0x58
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fa11 	bl	8002ab0 <memcpy>
 800068e:	e00a      	b.n	80006a6 <sendSymbolStreamOnLine+0x3e>
	}
	else if(busNum == bus_2){
 8000690:	787b      	ldrb	r3, [r7, #1]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d107      	bne.n	80006a6 <sendSymbolStreamOnLine+0x3e>
		hspi = second_hspi;
 8000696:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <sendSymbolStreamOnLine+0x60>)
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	4611      	mov	r1, r2
 800069e:	2258      	movs	r2, #88	; 0x58
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fa05 	bl	8002ab0 <memcpy>
	}

	HAL_SPI_Transmit_DMA(&hspi, symbols, length);
 80006a6:	887a      	ldrh	r2, [r7, #2]
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fc7c 	bl	8001fac <HAL_SPI_Transmit_DMA>
	free(symbols);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f002 f9f3 	bl	8002aa0 <free>
}
 80006ba:	bf00      	nop
 80006bc:	3760      	adds	r7, #96	; 0x60
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000144 	.word	0x20000144
 80006c8:	200000a8 	.word	0x200000a8

080006cc <color2Symbol>:

static void color2Symbol(uint8_t color, uint8_t *symbol_stream) {
 80006cc:	b480      	push	{r7}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
	const uint8_t oneSymbol = 0b11110000;
 80006d8:	23f0      	movs	r3, #240	; 0xf0
 80006da:	73fb      	strb	r3, [r7, #15]
	const uint8_t zeroSymbol = 0b11000000;
 80006dc:	23c0      	movs	r3, #192	; 0xc0
 80006de:	73bb      	strb	r3, [r7, #14]
	uint16_t cursor = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	82fb      	strh	r3, [r7, #22]

	for (int i = 7; i >= 0; i--) {
 80006e4:	2307      	movs	r3, #7
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	e018      	b.n	800071c <color2Symbol+0x50>
		if (color & (1 << i)) {
 80006ea:	79fa      	ldrb	r2, [r7, #7]
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	fa42 f303 	asr.w	r3, r2, r3
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d005      	beq.n	8000706 <color2Symbol+0x3a>
			memcpy(symbol_stream + cursor, &oneSymbol, 1);
 80006fa:	8afb      	ldrh	r3, [r7, #22]
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	7bfa      	ldrb	r2, [r7, #15]
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e004      	b.n	8000710 <color2Symbol+0x44>
		} else {
			memcpy(symbol_stream + cursor, &zeroSymbol, 1);
 8000706:	8afb      	ldrh	r3, [r7, #22]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	4413      	add	r3, r2
 800070c:	7bba      	ldrb	r2, [r7, #14]
 800070e:	701a      	strb	r2, [r3, #0]
		}
		cursor++;
 8000710:	8afb      	ldrh	r3, [r7, #22]
 8000712:	3301      	adds	r3, #1
 8000714:	82fb      	strh	r3, [r7, #22]
	for (int i = 7; i >= 0; i--) {
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	3b01      	subs	r3, #1
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	2b00      	cmp	r3, #0
 8000720:	dae3      	bge.n	80006ea <color2Symbol+0x1e>
	}
}
 8000722:	bf00      	nop
 8000724:	371c      	adds	r7, #28
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <getColorSymbolStream>:

static void getColorSymbolStream(led_rgb_color_t *led, uint8_t *symbol_stream) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
	uint16_t cursor = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	81fb      	strh	r3, [r7, #14]

	color2Symbol(led->green, symbol_stream + cursor);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7858      	ldrb	r0, [r3, #1]
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	4413      	add	r3, r2
 8000744:	4619      	mov	r1, r3
 8000746:	f7ff ffc1 	bl	80006cc <color2Symbol>
	cursor += 8;
 800074a:	89fb      	ldrh	r3, [r7, #14]
 800074c:	3308      	adds	r3, #8
 800074e:	81fb      	strh	r3, [r7, #14]
	color2Symbol(led->red, symbol_stream + cursor);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7818      	ldrb	r0, [r3, #0]
 8000754:	89fb      	ldrh	r3, [r7, #14]
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	4413      	add	r3, r2
 800075a:	4619      	mov	r1, r3
 800075c:	f7ff ffb6 	bl	80006cc <color2Symbol>
	cursor += 8;
 8000760:	89fb      	ldrh	r3, [r7, #14]
 8000762:	3308      	adds	r3, #8
 8000764:	81fb      	strh	r3, [r7, #14]
	color2Symbol(led->blue, symbol_stream + cursor);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7898      	ldrb	r0, [r3, #2]
 800076a:	89fb      	ldrh	r3, [r7, #14]
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4619      	mov	r1, r3
 8000772:	f7ff ffab 	bl	80006cc <color2Symbol>
	cursor += 8;
 8000776:	89fb      	ldrh	r3, [r7, #14]
 8000778:	3308      	adds	r3, #8
 800077a:	81fb      	strh	r3, [r7, #14]
	color2Symbol(led->white, symbol_stream + cursor);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	78d8      	ldrb	r0, [r3, #3]
 8000780:	89fb      	ldrh	r3, [r7, #14]
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	4413      	add	r3, r2
 8000786:	4619      	mov	r1, r3
 8000788:	f7ff ffa0 	bl	80006cc <color2Symbol>
}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <buildSymbolStream>:

static void buildSymbolStream(uint8_t **stream, led_rgb_color_t *led,
		uint16_t ledNum) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	4613      	mov	r3, r2
 80007a0:	80fb      	strh	r3, [r7, #6]
	uint16_t stream_length = LED_STREAM_LENGTH(ledNum);
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	015b      	lsls	r3, r3, #5
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	3378      	adds	r3, #120	; 0x78
 80007aa:	823b      	strh	r3, [r7, #16]
	uint32_t cursor = START_OFFSET;
 80007ac:	233c      	movs	r3, #60	; 0x3c
 80007ae:	617b      	str	r3, [r7, #20]
	*stream = malloc(stream_length);
 80007b0:	8a3b      	ldrh	r3, [r7, #16]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 f96c 	bl	8002a90 <malloc>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	601a      	str	r2, [r3, #0]

	memset(*stream, 0, stream_length);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	8a3a      	ldrh	r2, [r7, #16]
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 f97c 	bl	8002ac6 <memset>
	for (uint16_t i = 0; i < ledNum; i++) {
 80007ce:	2300      	movs	r3, #0
 80007d0:	827b      	strh	r3, [r7, #18]
 80007d2:	e010      	b.n	80007f6 <buildSymbolStream+0x62>
		getColorSymbolStream(led + i, (*stream) + cursor);
 80007d4:	8a7b      	ldrh	r3, [r7, #18]
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	18d0      	adds	r0, r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	4413      	add	r3, r2
 80007e4:	4619      	mov	r1, r3
 80007e6:	f7ff ffa1 	bl	800072c <getColorSymbolStream>
		cursor += SINGLE_LED_FRAME_SIZE;
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	3320      	adds	r3, #32
 80007ee:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < ledNum; i++) {
 80007f0:	8a7b      	ldrh	r3, [r7, #18]
 80007f2:	3301      	adds	r3, #1
 80007f4:	827b      	strh	r3, [r7, #18]
 80007f6:	8a7a      	ldrh	r2, [r7, #18]
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d3ea      	bcc.n	80007d4 <buildSymbolStream+0x40>
	}
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <clearLEDs>:

void clearLEDs(uint16_t ledNum, spi_bus_num_t busNum) {
 8000806:	b580      	push	{r7, lr}
 8000808:	b084      	sub	sp, #16
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	460a      	mov	r2, r1
 8000810:	80fb      	strh	r3, [r7, #6]
 8000812:	4613      	mov	r3, r2
 8000814:	717b      	strb	r3, [r7, #5]
	led_rgb_color_t *led = malloc(sizeof(led_rgb_color_t) * ledNum);
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4618      	mov	r0, r3
 800081c:	f002 f938 	bl	8002a90 <malloc>
 8000820:	4603      	mov	r3, r0
 8000822:	60fb      	str	r3, [r7, #12]
	memset(led, 0, sizeof(led_rgb_color_t) * ledNum);
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	461a      	mov	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f002 f94a 	bl	8002ac6 <memset>

	showLEDs(led, ledNum, busNum);
 8000832:	797a      	ldrb	r2, [r7, #5]
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	4619      	mov	r1, r3
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f000 f807 	bl	800084c <showLEDs>
	free(led);
 800083e:	68f8      	ldr	r0, [r7, #12]
 8000840:	f002 f92e 	bl	8002aa0 <free>
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <showLEDs>:

void showLEDs(led_rgb_color_t *led, uint16_t ledNum, spi_bus_num_t busNum) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
 8000858:	4613      	mov	r3, r2
 800085a:	707b      	strb	r3, [r7, #1]
	uint8_t *symbols_stream = NULL;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
	uint16_t stream_length = LED_STREAM_LENGTH(ledNum);
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	015b      	lsls	r3, r3, #5
 8000864:	b29b      	uxth	r3, r3
 8000866:	3378      	adds	r3, #120	; 0x78
 8000868:	81fb      	strh	r3, [r7, #14]

	buildSymbolStream(&symbols_stream, led, ledNum);
 800086a:	887a      	ldrh	r2, [r7, #2]
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff8e 	bl	8000794 <buildSymbolStream>
	sendSymbolStreamOnLine(symbols_stream, stream_length, busNum);
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	787a      	ldrb	r2, [r7, #1]
 800087c:	89f9      	ldrh	r1, [r7, #14]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fef2 	bl	8000668 <sendSymbolStreamOnLine>
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_MspInit+0x5c>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <HAL_MspInit+0x5c>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6193      	str	r3, [r2, #24]
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_MspInit+0x5c>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x5c>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <HAL_MspInit+0x5c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	61d3      	str	r3, [r2, #28]
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_MspInit+0x5c>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_MspInit+0x60>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	4a04      	ldr	r2, [pc, #16]	; (80008ec <HAL_MspInit+0x60>)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40010000 	.word	0x40010000

080008f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a52      	ldr	r2, [pc, #328]	; (8000a54 <HAL_SPI_MspInit+0x164>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d14b      	bne.n	80009a8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000910:	4b51      	ldr	r3, [pc, #324]	; (8000a58 <HAL_SPI_MspInit+0x168>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a50      	ldr	r2, [pc, #320]	; (8000a58 <HAL_SPI_MspInit+0x168>)
 8000916:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b4e      	ldr	r3, [pc, #312]	; (8000a58 <HAL_SPI_MspInit+0x168>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b4b      	ldr	r3, [pc, #300]	; (8000a58 <HAL_SPI_MspInit+0x168>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a4a      	ldr	r2, [pc, #296]	; (8000a58 <HAL_SPI_MspInit+0x168>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b48      	ldr	r3, [pc, #288]	; (8000a58 <HAL_SPI_MspInit+0x168>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	4619      	mov	r1, r3
 8000952:	4842      	ldr	r0, [pc, #264]	; (8000a5c <HAL_SPI_MspInit+0x16c>)
 8000954:	f000 fd6c 	bl	8001430 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000958:	4b41      	ldr	r3, [pc, #260]	; (8000a60 <HAL_SPI_MspInit+0x170>)
 800095a:	4a42      	ldr	r2, [pc, #264]	; (8000a64 <HAL_SPI_MspInit+0x174>)
 800095c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800095e:	4b40      	ldr	r3, [pc, #256]	; (8000a60 <HAL_SPI_MspInit+0x170>)
 8000960:	2210      	movs	r2, #16
 8000962:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000964:	4b3e      	ldr	r3, [pc, #248]	; (8000a60 <HAL_SPI_MspInit+0x170>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800096a:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <HAL_SPI_MspInit+0x170>)
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000970:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <HAL_SPI_MspInit+0x170>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000976:	4b3a      	ldr	r3, [pc, #232]	; (8000a60 <HAL_SPI_MspInit+0x170>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800097c:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <HAL_SPI_MspInit+0x170>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000982:	4b37      	ldr	r3, [pc, #220]	; (8000a60 <HAL_SPI_MspInit+0x170>)
 8000984:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000988:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800098a:	4835      	ldr	r0, [pc, #212]	; (8000a60 <HAL_SPI_MspInit+0x170>)
 800098c:	f000 fb62 	bl	8001054 <HAL_DMA_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8000996:	f7ff fe43 	bl	8000620 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a30      	ldr	r2, [pc, #192]	; (8000a60 <HAL_SPI_MspInit+0x170>)
 800099e:	649a      	str	r2, [r3, #72]	; 0x48
 80009a0:	4a2f      	ldr	r2, [pc, #188]	; (8000a60 <HAL_SPI_MspInit+0x170>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009a6:	e050      	b.n	8000a4a <HAL_SPI_MspInit+0x15a>
  else if(hspi->Instance==SPI2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a2e      	ldr	r2, [pc, #184]	; (8000a68 <HAL_SPI_MspInit+0x178>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d14b      	bne.n	8000a4a <HAL_SPI_MspInit+0x15a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <HAL_SPI_MspInit+0x168>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <HAL_SPI_MspInit+0x168>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <HAL_SPI_MspInit+0x168>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <HAL_SPI_MspInit+0x168>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <HAL_SPI_MspInit+0x168>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <HAL_SPI_MspInit+0x168>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80009e2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80009e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0318 	add.w	r3, r7, #24
 80009f4:	4619      	mov	r1, r3
 80009f6:	481d      	ldr	r0, [pc, #116]	; (8000a6c <HAL_SPI_MspInit+0x17c>)
 80009f8:	f000 fd1a 	bl	8001430 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_SPI_MspInit+0x180>)
 80009fe:	4a1d      	ldr	r2, [pc, #116]	; (8000a74 <HAL_SPI_MspInit+0x184>)
 8000a00:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <HAL_SPI_MspInit+0x180>)
 8000a04:	2210      	movs	r2, #16
 8000a06:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_SPI_MspInit+0x180>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <HAL_SPI_MspInit+0x180>)
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_SPI_MspInit+0x180>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_SPI_MspInit+0x180>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <HAL_SPI_MspInit+0x180>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_SPI_MspInit+0x180>)
 8000a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a2e:	4810      	ldr	r0, [pc, #64]	; (8000a70 <HAL_SPI_MspInit+0x180>)
 8000a30:	f000 fb10 	bl	8001054 <HAL_DMA_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_SPI_MspInit+0x14e>
      Error_Handler();
 8000a3a:	f7ff fdf1 	bl	8000620 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <HAL_SPI_MspInit+0x180>)
 8000a42:	649a      	str	r2, [r3, #72]	; 0x48
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_SPI_MspInit+0x180>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40013000 	.word	0x40013000
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	200002d4 	.word	0x200002d4
 8000a64:	40020030 	.word	0x40020030
 8000a68:	40003800 	.word	0x40003800
 8000a6c:	40010c00 	.word	0x40010c00
 8000a70:	20000290 	.word	0x20000290
 8000a74:	40020058 	.word	0x40020058

08000a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a88:	d113      	bne.n	8000ab2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_TIM_Base_MspInit+0x44>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_TIM_Base_MspInit+0x44>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_TIM_Base_MspInit+0x44>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	201c      	movs	r0, #28
 8000aa8:	f000 fa9d 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aac:	201c      	movs	r0, #28
 8000aae:	f000 fab6 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <HardFault_Handler+0x4>

08000ad2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <MemManage_Handler+0x4>

08000ad8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <BusFault_Handler+0x4>

08000ade <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <UsageFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f956 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <DMA1_Channel3_IRQHandler+0x10>)
 8000b1a:	f000 fb55 	bl	80011c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200002d4 	.word	0x200002d4

08000b28 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <DMA1_Channel5_IRQHandler+0x10>)
 8000b2e:	f000 fb4b 	bl	80011c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000290 	.word	0x20000290

08000b3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <TIM2_IRQHandler+0x10>)
 8000b42:	f001 fc53 	bl	80023ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000250 	.word	0x20000250

08000b50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e00a      	b.n	8000b78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b62:	f3af 8000 	nop.w
 8000b66:	4601      	mov	r1, r0
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	b2ca      	uxtb	r2, r1
 8000b70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf0      	blt.n	8000b62 <_read+0x12>
	}

return len;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e009      	b.n	8000bb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf1      	blt.n	8000b9c <_write+0x12>
	}
	return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_close>:

int _close(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be8:	605a      	str	r2, [r3, #4]
	return 0;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr

08000bf6 <_isatty>:

int _isatty(int file)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b085      	sub	sp, #20
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
	return 0;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
	...

08000c24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <_sbrk+0x50>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x16>
		heap_end = &end;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <_sbrk+0x50>)
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <_sbrk+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <_sbrk+0x50>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <_sbrk+0x50>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	466a      	mov	r2, sp
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d907      	bls.n	8000c5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c4e:	f001 fef5 	bl	8002a3c <__errno>
 8000c52:	4602      	mov	r2, r0
 8000c54:	230c      	movs	r3, #12
 8000c56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c5c:	e006      	b.n	8000c6c <_sbrk+0x48>
	}

	heap_end += incr;
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <_sbrk+0x50>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <_sbrk+0x50>)
 8000c68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000009c 	.word	0x2000009c
 8000c78:	20000320 	.word	0x20000320

08000c7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <SystemInit+0x5c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <SystemInit+0x5c>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <SystemInit+0x5c>)
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	4911      	ldr	r1, [pc, #68]	; (8000cd8 <SystemInit+0x5c>)
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <SystemInit+0x60>)
 8000c94:	4013      	ands	r3, r2
 8000c96:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <SystemInit+0x5c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <SystemInit+0x5c>)
 8000c9e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <SystemInit+0x5c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SystemInit+0x5c>)
 8000cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <SystemInit+0x5c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <SystemInit+0x5c>)
 8000cba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000cbe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SystemInit+0x5c>)
 8000cc2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000cc6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SystemInit+0x64>)
 8000cca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cce:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	f8ff0000 	.word	0xf8ff0000
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ce4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ce6:	e003      	b.n	8000cf0 <LoopCopyDataInit>

08000ce8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000cea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000cec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cee:	3104      	adds	r1, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000cf4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cf6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cf8:	d3f6      	bcc.n	8000ce8 <CopyDataInit>
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000cfc:	e002      	b.n	8000d04 <LoopFillZerobss>

08000cfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d00:	f842 3b04 	str.w	r3, [r2], #4

08000d04 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d08:	d3f9      	bcc.n	8000cfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d0a:	f7ff ffb7 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f001 fe9b 	bl	8002a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d12:	f7ff fad5 	bl	80002c0 <main>
  bx lr
 8000d16:	4770      	bx	lr
  ldr r3, =_sidata
 8000d18:	08003994 	.word	0x08003994
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d20:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000d24:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000d28:	20000320 	.word	0x20000320

08000d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_2_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x28>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x28>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f945 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fd9e 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40022000 	.word	0x40022000

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f95d 	bl	800103a <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d98:	f000 f925 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_IncTick+0x1c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a03      	ldr	r2, [pc, #12]	; (8000ddc <HAL_IncTick+0x20>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000318 	.word	0x20000318

08000de0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b02      	ldr	r3, [pc, #8]	; (8000df0 <HAL_GetTick+0x10>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	20000318 	.word	0x20000318

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff fff0 	bl	8000de0 <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_Delay+0x40>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffe0 	bl	8000de0 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4906      	ldr	r1, [pc, #24]	; (8000ed0 <__NVIC_EnableIRQ+0x34>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb0:	f7ff ff90 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff2d 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff42 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff90 	bl	8000f28 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5f 	bl	8000ed4 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff35 	bl	8000e9c <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa2 	bl	8000f8c <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e043      	b.n	80010f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <HAL_DMA_Init+0xa8>)
 8001072:	4413      	add	r3, r2
 8001074:	4a22      	ldr	r2, [pc, #136]	; (8001100 <HAL_DMA_Init+0xac>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	091b      	lsrs	r3, r3, #4
 800107c:	009a      	lsls	r2, r3, #2
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a1f      	ldr	r2, [pc, #124]	; (8001104 <HAL_DMA_Init+0xb0>)
 8001086:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2202      	movs	r2, #2
 800108c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800109e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	bffdfff8 	.word	0xbffdfff8
 8001100:	cccccccd 	.word	0xcccccccd
 8001104:	40020000 	.word	0x40020000

08001108 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <HAL_DMA_Start_IT+0x20>
 8001124:	2302      	movs	r3, #2
 8001126:	e04a      	b.n	80011be <HAL_DMA_Start_IT+0xb6>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001136:	2b01      	cmp	r3, #1
 8001138:	d13a      	bne.n	80011b0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2202      	movs	r2, #2
 800113e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2200      	movs	r2, #0
 8001146:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f000 f938 	bl	80013d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	2b00      	cmp	r3, #0
 800116a:	d008      	beq.n	800117e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 020e 	orr.w	r2, r2, #14
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e00f      	b.n	800119e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0204 	bic.w	r2, r2, #4
 800118c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f042 020a 	orr.w	r2, r2, #10
 800119c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e005      	b.n	80011bc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80011b8:	2302      	movs	r3, #2
 80011ba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	2204      	movs	r2, #4
 80011e6:	409a      	lsls	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d04f      	beq.n	8001290 <HAL_DMA_IRQHandler+0xc8>
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d04a      	beq.n	8001290 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0320 	and.w	r3, r3, #32
 8001204:	2b00      	cmp	r3, #0
 8001206:	d107      	bne.n	8001218 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0204 	bic.w	r2, r2, #4
 8001216:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a66      	ldr	r2, [pc, #408]	; (80013b8 <HAL_DMA_IRQHandler+0x1f0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d029      	beq.n	8001276 <HAL_DMA_IRQHandler+0xae>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a65      	ldr	r2, [pc, #404]	; (80013bc <HAL_DMA_IRQHandler+0x1f4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d022      	beq.n	8001272 <HAL_DMA_IRQHandler+0xaa>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <HAL_DMA_IRQHandler+0x1f8>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01a      	beq.n	800126c <HAL_DMA_IRQHandler+0xa4>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a62      	ldr	r2, [pc, #392]	; (80013c4 <HAL_DMA_IRQHandler+0x1fc>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d012      	beq.n	8001266 <HAL_DMA_IRQHandler+0x9e>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a60      	ldr	r2, [pc, #384]	; (80013c8 <HAL_DMA_IRQHandler+0x200>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00a      	beq.n	8001260 <HAL_DMA_IRQHandler+0x98>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a5f      	ldr	r2, [pc, #380]	; (80013cc <HAL_DMA_IRQHandler+0x204>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d102      	bne.n	800125a <HAL_DMA_IRQHandler+0x92>
 8001254:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001258:	e00e      	b.n	8001278 <HAL_DMA_IRQHandler+0xb0>
 800125a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800125e:	e00b      	b.n	8001278 <HAL_DMA_IRQHandler+0xb0>
 8001260:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001264:	e008      	b.n	8001278 <HAL_DMA_IRQHandler+0xb0>
 8001266:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800126a:	e005      	b.n	8001278 <HAL_DMA_IRQHandler+0xb0>
 800126c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001270:	e002      	b.n	8001278 <HAL_DMA_IRQHandler+0xb0>
 8001272:	2340      	movs	r3, #64	; 0x40
 8001274:	e000      	b.n	8001278 <HAL_DMA_IRQHandler+0xb0>
 8001276:	2304      	movs	r3, #4
 8001278:	4a55      	ldr	r2, [pc, #340]	; (80013d0 <HAL_DMA_IRQHandler+0x208>)
 800127a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 8094 	beq.w	80013ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800128e:	e08e      	b.n	80013ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	2202      	movs	r2, #2
 8001296:	409a      	lsls	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4013      	ands	r3, r2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d056      	beq.n	800134e <HAL_DMA_IRQHandler+0x186>
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d051      	beq.n	800134e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0320 	and.w	r3, r3, #32
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10b      	bne.n	80012d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 020a 	bic.w	r2, r2, #10
 80012c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a38      	ldr	r2, [pc, #224]	; (80013b8 <HAL_DMA_IRQHandler+0x1f0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d029      	beq.n	800132e <HAL_DMA_IRQHandler+0x166>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a37      	ldr	r2, [pc, #220]	; (80013bc <HAL_DMA_IRQHandler+0x1f4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d022      	beq.n	800132a <HAL_DMA_IRQHandler+0x162>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a35      	ldr	r2, [pc, #212]	; (80013c0 <HAL_DMA_IRQHandler+0x1f8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01a      	beq.n	8001324 <HAL_DMA_IRQHandler+0x15c>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a34      	ldr	r2, [pc, #208]	; (80013c4 <HAL_DMA_IRQHandler+0x1fc>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d012      	beq.n	800131e <HAL_DMA_IRQHandler+0x156>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <HAL_DMA_IRQHandler+0x200>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00a      	beq.n	8001318 <HAL_DMA_IRQHandler+0x150>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a31      	ldr	r2, [pc, #196]	; (80013cc <HAL_DMA_IRQHandler+0x204>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d102      	bne.n	8001312 <HAL_DMA_IRQHandler+0x14a>
 800130c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001310:	e00e      	b.n	8001330 <HAL_DMA_IRQHandler+0x168>
 8001312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001316:	e00b      	b.n	8001330 <HAL_DMA_IRQHandler+0x168>
 8001318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800131c:	e008      	b.n	8001330 <HAL_DMA_IRQHandler+0x168>
 800131e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001322:	e005      	b.n	8001330 <HAL_DMA_IRQHandler+0x168>
 8001324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001328:	e002      	b.n	8001330 <HAL_DMA_IRQHandler+0x168>
 800132a:	2320      	movs	r3, #32
 800132c:	e000      	b.n	8001330 <HAL_DMA_IRQHandler+0x168>
 800132e:	2302      	movs	r3, #2
 8001330:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <HAL_DMA_IRQHandler+0x208>)
 8001332:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	2b00      	cmp	r3, #0
 8001342:	d034      	beq.n	80013ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800134c:	e02f      	b.n	80013ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	2208      	movs	r2, #8
 8001354:	409a      	lsls	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d028      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x1e8>
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	2b00      	cmp	r3, #0
 8001366:	d023      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 020e 	bic.w	r2, r2, #14
 8001376:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001380:	2101      	movs	r1, #1
 8001382:	fa01 f202 	lsl.w	r2, r1, r2
 8001386:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d004      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
    }
  }
  return;
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
}
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40020008 	.word	0x40020008
 80013bc:	4002001c 	.word	0x4002001c
 80013c0:	40020030 	.word	0x40020030
 80013c4:	40020044 	.word	0x40020044
 80013c8:	40020058 	.word	0x40020058
 80013cc:	4002006c 	.word	0x4002006c
 80013d0:	40020000 	.word	0x40020000

080013d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b10      	cmp	r3, #16
 8001400:	d108      	bne.n	8001414 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001412:	e007      	b.n	8001424 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	60da      	str	r2, [r3, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
	...

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b08b      	sub	sp, #44	; 0x2c
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	e127      	b.n	8001694 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001444:	2201      	movs	r2, #1
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	429a      	cmp	r2, r3
 800145e:	f040 8116 	bne.w	800168e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b12      	cmp	r3, #18
 8001468:	d034      	beq.n	80014d4 <HAL_GPIO_Init+0xa4>
 800146a:	2b12      	cmp	r3, #18
 800146c:	d80d      	bhi.n	800148a <HAL_GPIO_Init+0x5a>
 800146e:	2b02      	cmp	r3, #2
 8001470:	d02b      	beq.n	80014ca <HAL_GPIO_Init+0x9a>
 8001472:	2b02      	cmp	r3, #2
 8001474:	d804      	bhi.n	8001480 <HAL_GPIO_Init+0x50>
 8001476:	2b00      	cmp	r3, #0
 8001478:	d031      	beq.n	80014de <HAL_GPIO_Init+0xae>
 800147a:	2b01      	cmp	r3, #1
 800147c:	d01c      	beq.n	80014b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800147e:	e048      	b.n	8001512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001480:	2b03      	cmp	r3, #3
 8001482:	d043      	beq.n	800150c <HAL_GPIO_Init+0xdc>
 8001484:	2b11      	cmp	r3, #17
 8001486:	d01b      	beq.n	80014c0 <HAL_GPIO_Init+0x90>
          break;
 8001488:	e043      	b.n	8001512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800148a:	4a89      	ldr	r2, [pc, #548]	; (80016b0 <HAL_GPIO_Init+0x280>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d026      	beq.n	80014de <HAL_GPIO_Init+0xae>
 8001490:	4a87      	ldr	r2, [pc, #540]	; (80016b0 <HAL_GPIO_Init+0x280>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d806      	bhi.n	80014a4 <HAL_GPIO_Init+0x74>
 8001496:	4a87      	ldr	r2, [pc, #540]	; (80016b4 <HAL_GPIO_Init+0x284>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d020      	beq.n	80014de <HAL_GPIO_Init+0xae>
 800149c:	4a86      	ldr	r2, [pc, #536]	; (80016b8 <HAL_GPIO_Init+0x288>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01d      	beq.n	80014de <HAL_GPIO_Init+0xae>
          break;
 80014a2:	e036      	b.n	8001512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014a4:	4a85      	ldr	r2, [pc, #532]	; (80016bc <HAL_GPIO_Init+0x28c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0xae>
 80014aa:	4a85      	ldr	r2, [pc, #532]	; (80016c0 <HAL_GPIO_Init+0x290>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d016      	beq.n	80014de <HAL_GPIO_Init+0xae>
 80014b0:	4a84      	ldr	r2, [pc, #528]	; (80016c4 <HAL_GPIO_Init+0x294>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0xae>
          break;
 80014b6:	e02c      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e028      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	3304      	adds	r3, #4
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e023      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	3308      	adds	r3, #8
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e01e      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	330c      	adds	r3, #12
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e019      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014e6:	2304      	movs	r3, #4
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e012      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f4:	2308      	movs	r3, #8
 80014f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	611a      	str	r2, [r3, #16]
          break;
 80014fe:	e008      	b.n	8001512 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001500:	2308      	movs	r3, #8
 8001502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	615a      	str	r2, [r3, #20]
          break;
 800150a:	e002      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	2bff      	cmp	r3, #255	; 0xff
 8001516:	d801      	bhi.n	800151c <HAL_GPIO_Init+0xec>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	e001      	b.n	8001520 <HAL_GPIO_Init+0xf0>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3304      	adds	r3, #4
 8001520:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2bff      	cmp	r3, #255	; 0xff
 8001526:	d802      	bhi.n	800152e <HAL_GPIO_Init+0xfe>
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x104>
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	3b08      	subs	r3, #8
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	210f      	movs	r1, #15
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	401a      	ands	r2, r3
 8001546:	6a39      	ldr	r1, [r7, #32]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	431a      	orrs	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 8096 	beq.w	800168e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001562:	4b59      	ldr	r3, [pc, #356]	; (80016c8 <HAL_GPIO_Init+0x298>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4a58      	ldr	r2, [pc, #352]	; (80016c8 <HAL_GPIO_Init+0x298>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6193      	str	r3, [r2, #24]
 800156e:	4b56      	ldr	r3, [pc, #344]	; (80016c8 <HAL_GPIO_Init+0x298>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800157a:	4a54      	ldr	r2, [pc, #336]	; (80016cc <HAL_GPIO_Init+0x29c>)
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	3302      	adds	r3, #2
 8001582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001586:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	220f      	movs	r2, #15
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4013      	ands	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4b      	ldr	r2, [pc, #300]	; (80016d0 <HAL_GPIO_Init+0x2a0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x19e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <HAL_GPIO_Init+0x2a4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x19a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a49      	ldr	r2, [pc, #292]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x196>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a48      	ldr	r2, [pc, #288]	; (80016dc <HAL_GPIO_Init+0x2ac>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x192>
 80015be:	2303      	movs	r3, #3
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x1a0>
 80015c2:	2304      	movs	r3, #4
 80015c4:	e004      	b.n	80015d0 <HAL_GPIO_Init+0x1a0>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e002      	b.n	80015d0 <HAL_GPIO_Init+0x1a0>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_Init+0x1a0>
 80015ce:	2300      	movs	r3, #0
 80015d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d2:	f002 0203 	and.w	r2, r2, #3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	4093      	lsls	r3, r2
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e0:	493a      	ldr	r1, [pc, #232]	; (80016cc <HAL_GPIO_Init+0x29c>)
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4938      	ldr	r1, [pc, #224]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
 8001606:	e006      	b.n	8001616 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001608:	4b35      	ldr	r3, [pc, #212]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	43db      	mvns	r3, r3
 8001610:	4933      	ldr	r1, [pc, #204]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001612:	4013      	ands	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d006      	beq.n	8001630 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001622:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	492e      	ldr	r1, [pc, #184]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
 800162e:	e006      	b.n	800163e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	43db      	mvns	r3, r3
 8001638:	4929      	ldr	r1, [pc, #164]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 800163a:	4013      	ands	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	4924      	ldr	r1, [pc, #144]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
 8001656:	e006      	b.n	8001666 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001658:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	43db      	mvns	r3, r3
 8001660:	491f      	ldr	r1, [pc, #124]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001662:	4013      	ands	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	491a      	ldr	r1, [pc, #104]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	60cb      	str	r3, [r1, #12]
 800167e:	e006      	b.n	800168e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	43db      	mvns	r3, r3
 8001688:	4915      	ldr	r1, [pc, #84]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 800168a:	4013      	ands	r3, r2
 800168c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	3301      	adds	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f47f aed0 	bne.w	8001444 <HAL_GPIO_Init+0x14>
  }
}
 80016a4:	bf00      	nop
 80016a6:	372c      	adds	r7, #44	; 0x2c
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	10210000 	.word	0x10210000
 80016b4:	10110000 	.word	0x10110000
 80016b8:	10120000 	.word	0x10120000
 80016bc:	10310000 	.word	0x10310000
 80016c0:	10320000 	.word	0x10320000
 80016c4:	10220000 	.word	0x10220000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	40010800 	.word	0x40010800
 80016d4:	40010c00 	.word	0x40010c00
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40011400 	.word	0x40011400
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001700:	e003      	b.n	800170a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	041a      	lsls	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	611a      	str	r2, [r3, #16]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e26c      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8087 	beq.w	8001842 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001734:	4b92      	ldr	r3, [pc, #584]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b04      	cmp	r3, #4
 800173e:	d00c      	beq.n	800175a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001740:	4b8f      	ldr	r3, [pc, #572]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d112      	bne.n	8001772 <HAL_RCC_OscConfig+0x5e>
 800174c:	4b8c      	ldr	r3, [pc, #560]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001758:	d10b      	bne.n	8001772 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175a:	4b89      	ldr	r3, [pc, #548]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d06c      	beq.n	8001840 <HAL_RCC_OscConfig+0x12c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d168      	bne.n	8001840 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e246      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x76>
 800177c:	4b80      	ldr	r3, [pc, #512]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a7f      	ldr	r2, [pc, #508]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e02e      	b.n	80017e8 <HAL_RCC_OscConfig+0xd4>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x98>
 8001792:	4b7b      	ldr	r3, [pc, #492]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a7a      	ldr	r2, [pc, #488]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b78      	ldr	r3, [pc, #480]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a77      	ldr	r2, [pc, #476]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e01d      	b.n	80017e8 <HAL_RCC_OscConfig+0xd4>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0xbc>
 80017b6:	4b72      	ldr	r3, [pc, #456]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a71      	ldr	r2, [pc, #452]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b6f      	ldr	r3, [pc, #444]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6e      	ldr	r2, [pc, #440]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0xd4>
 80017d0:	4b6b      	ldr	r3, [pc, #428]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6a      	ldr	r2, [pc, #424]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b68      	ldr	r3, [pc, #416]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a67      	ldr	r2, [pc, #412]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff faf6 	bl	8000de0 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff faf2 	bl	8000de0 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1fa      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0xe4>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fae2 	bl	8000de0 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff fade 	bl	8000de0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1e6      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	4b53      	ldr	r3, [pc, #332]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x10c>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d063      	beq.n	8001916 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800184e:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800185a:	4b49      	ldr	r3, [pc, #292]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b08      	cmp	r3, #8
 8001864:	d11c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x18c>
 8001866:	4b46      	ldr	r3, [pc, #280]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d116      	bne.n	80018a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	4b43      	ldr	r3, [pc, #268]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x176>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e1ba      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188a:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4939      	ldr	r1, [pc, #228]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189e:	e03a      	b.n	8001916 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a8:	4b36      	ldr	r3, [pc, #216]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fa97 	bl	8000de0 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b6:	f7ff fa93 	bl	8000de0 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e19b      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d4:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4927      	ldr	r1, [pc, #156]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	e015      	b.n	8001916 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa76 	bl	8000de0 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff fa72 	bl	8000de0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e17a      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d03a      	beq.n	8001998 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d019      	beq.n	800195e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff fa56 	bl	8000de0 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff fa52 	bl	8000de0 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e15a      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001956:	2001      	movs	r0, #1
 8001958:	f000 faa8 	bl	8001eac <RCC_Delay>
 800195c:	e01c      	b.n	8001998 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff fa3c 	bl	8000de0 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196a:	e00f      	b.n	800198c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff fa38 	bl	8000de0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d908      	bls.n	800198c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e140      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	42420000 	.word	0x42420000
 8001988:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198c:	4b9e      	ldr	r3, [pc, #632]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e9      	bne.n	800196c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80a6 	beq.w	8001af2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019aa:	4b97      	ldr	r3, [pc, #604]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10d      	bne.n	80019d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b94      	ldr	r3, [pc, #592]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a93      	ldr	r2, [pc, #588]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b91      	ldr	r3, [pc, #580]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ce:	2301      	movs	r3, #1
 80019d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	4b8e      	ldr	r3, [pc, #568]	; (8001c0c <HAL_RCC_OscConfig+0x4f8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d118      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019de:	4b8b      	ldr	r3, [pc, #556]	; (8001c0c <HAL_RCC_OscConfig+0x4f8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a8a      	ldr	r2, [pc, #552]	; (8001c0c <HAL_RCC_OscConfig+0x4f8>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ea:	f7ff f9f9 	bl	8000de0 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f2:	f7ff f9f5 	bl	8000de0 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b64      	cmp	r3, #100	; 0x64
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e0fd      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	4b81      	ldr	r3, [pc, #516]	; (8001c0c <HAL_RCC_OscConfig+0x4f8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x312>
 8001a18:	4b7b      	ldr	r3, [pc, #492]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a7a      	ldr	r2, [pc, #488]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	e02d      	b.n	8001a82 <HAL_RCC_OscConfig+0x36e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x334>
 8001a2e:	4b76      	ldr	r3, [pc, #472]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a75      	ldr	r2, [pc, #468]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	4b73      	ldr	r3, [pc, #460]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a72      	ldr	r2, [pc, #456]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	6213      	str	r3, [r2, #32]
 8001a46:	e01c      	b.n	8001a82 <HAL_RCC_OscConfig+0x36e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d10c      	bne.n	8001a6a <HAL_RCC_OscConfig+0x356>
 8001a50:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a6c      	ldr	r2, [pc, #432]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6213      	str	r3, [r2, #32]
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0x36e>
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a66      	ldr	r2, [pc, #408]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	4b64      	ldr	r3, [pc, #400]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4a63      	ldr	r2, [pc, #396]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d015      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f9a9 	bl	8000de0 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff f9a5 	bl	8000de0 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0ab      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa8:	4b57      	ldr	r3, [pc, #348]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ee      	beq.n	8001a92 <HAL_RCC_OscConfig+0x37e>
 8001ab4:	e014      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff f993 	bl	8000de0 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff f98f 	bl	8000de0 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e095      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad4:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ee      	bne.n	8001abe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d105      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae6:	4b48      	ldr	r3, [pc, #288]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8081 	beq.w	8001bfe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afc:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d061      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d146      	bne.n	8001b9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <HAL_RCC_OscConfig+0x4fc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff f963 	bl	8000de0 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff f95f 	bl	8000de0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e067      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d108      	bne.n	8001b58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b46:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	492d      	ldr	r1, [pc, #180]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a19      	ldr	r1, [r3, #32]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	4927      	ldr	r1, [pc, #156]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_RCC_OscConfig+0x4fc>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff f933 	bl	8000de0 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff f92f 	bl	8000de0 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e037      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x46a>
 8001b9c:	e02f      	b.n	8001bfe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_RCC_OscConfig+0x4fc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f91c 	bl	8000de0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f918 	bl	8000de0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e020      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x498>
 8001bca:	e018      	b.n	8001bfe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e013      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	42420060 	.word	0x42420060

08001c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0d0      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d910      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b67      	ldr	r3, [pc, #412]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 0207 	bic.w	r2, r3, #7
 8001c3e:	4965      	ldr	r1, [pc, #404]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b63      	ldr	r3, [pc, #396]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0b8      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d020      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c70:	4b59      	ldr	r3, [pc, #356]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a58      	ldr	r2, [pc, #352]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c88:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4a52      	ldr	r2, [pc, #328]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c94:	4b50      	ldr	r3, [pc, #320]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	494d      	ldr	r1, [pc, #308]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d040      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d115      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e07f      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e073      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e06b      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf2:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f023 0203 	bic.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4936      	ldr	r1, [pc, #216]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d04:	f7ff f86c 	bl	8000de0 <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0c:	f7ff f868 	bl	8000de0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e053      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 020c 	and.w	r2, r3, #12
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1eb      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d210      	bcs.n	8001d64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 0207 	bic.w	r2, r3, #7
 8001d4a:	4922      	ldr	r1, [pc, #136]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e032      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4916      	ldr	r1, [pc, #88]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	490e      	ldr	r1, [pc, #56]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001da2:	f000 f821 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001da6:	4601      	mov	r1, r0
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001db4:	5cd3      	ldrb	r3, [r2, r3]
 8001db6:	fa21 f303 	lsr.w	r3, r1, r3
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x1cc>)
 8001dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1d0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ffca 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40022000 	.word	0x40022000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	080038e4 	.word	0x080038e4
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de8:	b490      	push	{r4, r7}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001df0:	1d3c      	adds	r4, r7, #4
 8001df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d002      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x40>
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x46>
 8001e26:	e02d      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e2a:	623b      	str	r3, [r7, #32]
      break;
 8001e2c:	e02d      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	0c5b      	lsrs	r3, r3, #17
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e66:	fb02 f203 	mul.w	r2, r2, r3
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
 8001e72:	e004      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	623b      	str	r3, [r7, #32]
      break;
 8001e82:	e002      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e86:	623b      	str	r3, [r7, #32]
      break;
 8001e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3728      	adds	r7, #40	; 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc90      	pop	{r4, r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	080038d0 	.word	0x080038d0
 8001e9c:	080038e0 	.word	0x080038e0
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	007a1200 	.word	0x007a1200
 8001ea8:	003d0900 	.word	0x003d0900

08001eac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <RCC_Delay+0x34>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <RCC_Delay+0x38>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0a5b      	lsrs	r3, r3, #9
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ec8:	bf00      	nop
  }
  while (Delay --);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1e5a      	subs	r2, r3, #1
 8001ece:	60fa      	str	r2, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f9      	bne.n	8001ec8 <RCC_Delay+0x1c>
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	10624dd3 	.word	0x10624dd3

08001ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e053      	b.n	8001fa2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7fe fceb 	bl	80008f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	ea42 0103 	orr.w	r1, r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	0c1a      	lsrs	r2, r3, #16
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f002 0204 	and.w	r2, r2, #4
 8001f80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_SPI_Transmit_DMA+0x20>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e093      	b.n	80020f4 <HAL_SPI_Transmit_DMA+0x148>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d002      	beq.n	8001fe6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fe4:	e081      	b.n	80020ea <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_SPI_Transmit_DMA+0x46>
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ff6:	e078      	b.n	80020ea <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	88fa      	ldrh	r2, [r7, #6]
 8002010:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	88fa      	ldrh	r2, [r7, #6]
 8002016:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800203e:	d107      	bne.n	8002050 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800204e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002054:	4a29      	ldr	r2, [pc, #164]	; (80020fc <HAL_SPI_Transmit_DMA+0x150>)
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205c:	4a28      	ldr	r2, [pc, #160]	; (8002100 <HAL_SPI_Transmit_DMA+0x154>)
 800205e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002064:	4a27      	ldr	r2, [pc, #156]	; (8002104 <HAL_SPI_Transmit_DMA+0x158>)
 8002066:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206c:	2200      	movs	r2, #0
 800206e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	4619      	mov	r1, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	330c      	adds	r3, #12
 8002080:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002086:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002088:	f7ff f83e 	bl	8001108 <HAL_DMA_Start_IT>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00c      	beq.n	80020ac <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	f043 0210 	orr.w	r2, r3, #16
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80020aa:	e01e      	b.n	80020ea <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b6:	2b40      	cmp	r3, #64	; 0x40
 80020b8:	d007      	beq.n	80020ca <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020c8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0220 	orr.w	r2, r2, #32
 80020d8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0202 	orr.w	r2, r2, #2
 80020e8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	080021e5 	.word	0x080021e5
 8002100:	0800213f 	.word	0x0800213f
 8002104:	08002201 	.word	0x08002201

08002108 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800214c:	f7fe fe48 	bl	8000de0 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b20      	cmp	r3, #32
 800215e:	d03b      	beq.n	80021d8 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0220 	bic.w	r2, r2, #32
 800216e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0202 	bic.w	r2, r2, #2
 800217e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	2164      	movs	r1, #100	; 0x64
 8002184:	6978      	ldr	r0, [r7, #20]
 8002186:	f000 f8c5 	bl	8002314 <SPI_EndRxTxTransaction>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002194:	f043 0220 	orr.w	r2, r3, #32
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2200      	movs	r2, #0
 80021be:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80021d0:	6978      	ldr	r0, [r7, #20]
 80021d2:	f7ff ffab 	bl	800212c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80021d6:	e002      	b.n	80021de <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80021d8:	6978      	ldr	r0, [r7, #20]
 80021da:	f7ff ff95 	bl	8002108 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff ff91 	bl	800211a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0203 	bic.w	r2, r2, #3
 800221c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7ff ff7a 	bl	800212c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002250:	e04c      	b.n	80022ec <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002258:	d048      	beq.n	80022ec <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800225a:	f7fe fdc1 	bl	8000de0 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d902      	bls.n	8002270 <SPI_WaitFlagStateUntilTimeout+0x30>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d13d      	bne.n	80022ec <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800227e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002288:	d111      	bne.n	80022ae <SPI_WaitFlagStateUntilTimeout+0x6e>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002292:	d004      	beq.n	800229e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229c:	d107      	bne.n	80022ae <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b6:	d10f      	bne.n	80022d8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e00f      	b.n	800230c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4013      	ands	r3, r2
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	429a      	cmp	r2, r3
 8002308:	d1a3      	bne.n	8002252 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2200      	movs	r2, #0
 8002328:	2180      	movs	r1, #128	; 0x80
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f7ff ff88 	bl	8002240 <SPI_WaitFlagStateUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233a:	f043 0220 	orr.w	r2, r3, #32
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e000      	b.n	8002348 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e01d      	b.n	800239e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fb7e 	bl	8000a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	4619      	mov	r1, r3
 800238e:	4610      	mov	r0, r2
 8002390:	f000 fa06 	bl	80027a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b06      	cmp	r3, #6
 80023ce:	d007      	beq.n	80023e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d122      	bne.n	8002448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d11b      	bne.n	8002448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0202 	mvn.w	r2, #2
 8002418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f9a4 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 8002434:	e005      	b.n	8002442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f997 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f9a6 	bl	800278e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b04      	cmp	r3, #4
 8002454:	d122      	bne.n	800249c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d11b      	bne.n	800249c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0204 	mvn.w	r2, #4
 800246c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f97a 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f96d 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f97c 	bl	800278e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d122      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d11b      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0208 	mvn.w	r2, #8
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2204      	movs	r2, #4
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f950 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f943 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f952 	bl	800278e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d122      	bne.n	8002544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b10      	cmp	r3, #16
 800250a:	d11b      	bne.n	8002544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0210 	mvn.w	r2, #16
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2208      	movs	r2, #8
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f926 	bl	800277c <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f919 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f928 	bl	800278e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d10e      	bne.n	8002570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d107      	bne.n	8002570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0201 	mvn.w	r2, #1
 8002568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fd fe8c 	bl	8000288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257a:	2b80      	cmp	r3, #128	; 0x80
 800257c:	d10e      	bne.n	800259c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d107      	bne.n	800259c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa47 	bl	8002a2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d10e      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b4:	2b40      	cmp	r3, #64	; 0x40
 80025b6:	d107      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fd fe6e 	bl	80002a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d10e      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d107      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0220 	mvn.w	r2, #32
 80025ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fa12 	bl	8002a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_TIM_ConfigClockSource+0x18>
 8002610:	2302      	movs	r3, #2
 8002612:	e0a6      	b.n	8002762 <HAL_TIM_ConfigClockSource+0x166>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800263a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b40      	cmp	r3, #64	; 0x40
 800264a:	d067      	beq.n	800271c <HAL_TIM_ConfigClockSource+0x120>
 800264c:	2b40      	cmp	r3, #64	; 0x40
 800264e:	d80b      	bhi.n	8002668 <HAL_TIM_ConfigClockSource+0x6c>
 8002650:	2b10      	cmp	r3, #16
 8002652:	d073      	beq.n	800273c <HAL_TIM_ConfigClockSource+0x140>
 8002654:	2b10      	cmp	r3, #16
 8002656:	d802      	bhi.n	800265e <HAL_TIM_ConfigClockSource+0x62>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d06f      	beq.n	800273c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800265c:	e078      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800265e:	2b20      	cmp	r3, #32
 8002660:	d06c      	beq.n	800273c <HAL_TIM_ConfigClockSource+0x140>
 8002662:	2b30      	cmp	r3, #48	; 0x30
 8002664:	d06a      	beq.n	800273c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002666:	e073      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002668:	2b70      	cmp	r3, #112	; 0x70
 800266a:	d00d      	beq.n	8002688 <HAL_TIM_ConfigClockSource+0x8c>
 800266c:	2b70      	cmp	r3, #112	; 0x70
 800266e:	d804      	bhi.n	800267a <HAL_TIM_ConfigClockSource+0x7e>
 8002670:	2b50      	cmp	r3, #80	; 0x50
 8002672:	d033      	beq.n	80026dc <HAL_TIM_ConfigClockSource+0xe0>
 8002674:	2b60      	cmp	r3, #96	; 0x60
 8002676:	d041      	beq.n	80026fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002678:	e06a      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800267a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267e:	d066      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x152>
 8002680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002684:	d017      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002686:	e063      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6899      	ldr	r1, [r3, #8]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f000 f95b 	bl	8002952 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	609a      	str	r2, [r3, #8]
      break;
 80026b4:	e04c      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6899      	ldr	r1, [r3, #8]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f000 f944 	bl	8002952 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026d8:	609a      	str	r2, [r3, #8]
      break;
 80026da:	e039      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	461a      	mov	r2, r3
 80026ea:	f000 f8bb 	bl	8002864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2150      	movs	r1, #80	; 0x50
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f912 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 80026fa:	e029      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	461a      	mov	r2, r3
 800270a:	f000 f8d9 	bl	80028c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2160      	movs	r1, #96	; 0x60
 8002714:	4618      	mov	r0, r3
 8002716:	f000 f902 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 800271a:	e019      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	461a      	mov	r2, r3
 800272a:	f000 f89b 	bl	8002864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2140      	movs	r1, #64	; 0x40
 8002734:	4618      	mov	r0, r3
 8002736:	f000 f8f2 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 800273a:	e009      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	4610      	mov	r0, r2
 8002748:	f000 f8e9 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 800274c:	e000      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800274e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a29      	ldr	r2, [pc, #164]	; (8002858 <TIM_Base_SetConfig+0xb8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00b      	beq.n	80027d0 <TIM_Base_SetConfig+0x30>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027be:	d007      	beq.n	80027d0 <TIM_Base_SetConfig+0x30>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a26      	ldr	r2, [pc, #152]	; (800285c <TIM_Base_SetConfig+0xbc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d003      	beq.n	80027d0 <TIM_Base_SetConfig+0x30>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a25      	ldr	r2, [pc, #148]	; (8002860 <TIM_Base_SetConfig+0xc0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d108      	bne.n	80027e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <TIM_Base_SetConfig+0xb8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00b      	beq.n	8002802 <TIM_Base_SetConfig+0x62>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d007      	beq.n	8002802 <TIM_Base_SetConfig+0x62>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a19      	ldr	r2, [pc, #100]	; (800285c <TIM_Base_SetConfig+0xbc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d003      	beq.n	8002802 <TIM_Base_SetConfig+0x62>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a18      	ldr	r2, [pc, #96]	; (8002860 <TIM_Base_SetConfig+0xc0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d108      	bne.n	8002814 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a07      	ldr	r2, [pc, #28]	; (8002858 <TIM_Base_SetConfig+0xb8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d103      	bne.n	8002848 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	615a      	str	r2, [r3, #20]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40000400 	.word	0x40000400
 8002860:	40000800 	.word	0x40000800

08002864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f023 0201 	bic.w	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800288e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f023 030a 	bic.w	r3, r3, #10
 80028a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 0210 	bic.w	r2, r3, #16
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	031b      	lsls	r3, r3, #12
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	621a      	str	r2, [r3, #32]
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	f043 0307 	orr.w	r3, r3, #7
 8002940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	609a      	str	r2, [r3, #8]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800296c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	021a      	lsls	r2, r3, #8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	431a      	orrs	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4313      	orrs	r3, r2
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	609a      	str	r2, [r3, #8]
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e032      	b.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <__errno>:
 8002a3c:	4b01      	ldr	r3, [pc, #4]	; (8002a44 <__errno+0x8>)
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	2000000c 	.word	0x2000000c

08002a48 <__libc_init_array>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	2500      	movs	r5, #0
 8002a4c:	4e0c      	ldr	r6, [pc, #48]	; (8002a80 <__libc_init_array+0x38>)
 8002a4e:	4c0d      	ldr	r4, [pc, #52]	; (8002a84 <__libc_init_array+0x3c>)
 8002a50:	1ba4      	subs	r4, r4, r6
 8002a52:	10a4      	asrs	r4, r4, #2
 8002a54:	42a5      	cmp	r5, r4
 8002a56:	d109      	bne.n	8002a6c <__libc_init_array+0x24>
 8002a58:	f000 ff2c 	bl	80038b4 <_init>
 8002a5c:	2500      	movs	r5, #0
 8002a5e:	4e0a      	ldr	r6, [pc, #40]	; (8002a88 <__libc_init_array+0x40>)
 8002a60:	4c0a      	ldr	r4, [pc, #40]	; (8002a8c <__libc_init_array+0x44>)
 8002a62:	1ba4      	subs	r4, r4, r6
 8002a64:	10a4      	asrs	r4, r4, #2
 8002a66:	42a5      	cmp	r5, r4
 8002a68:	d105      	bne.n	8002a76 <__libc_init_array+0x2e>
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a70:	4798      	blx	r3
 8002a72:	3501      	adds	r5, #1
 8002a74:	e7ee      	b.n	8002a54 <__libc_init_array+0xc>
 8002a76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a7a:	4798      	blx	r3
 8002a7c:	3501      	adds	r5, #1
 8002a7e:	e7f2      	b.n	8002a66 <__libc_init_array+0x1e>
 8002a80:	0800398c 	.word	0x0800398c
 8002a84:	0800398c 	.word	0x0800398c
 8002a88:	0800398c 	.word	0x0800398c
 8002a8c:	08003990 	.word	0x08003990

08002a90 <malloc>:
 8002a90:	4b02      	ldr	r3, [pc, #8]	; (8002a9c <malloc+0xc>)
 8002a92:	4601      	mov	r1, r0
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	f000 b86b 	b.w	8002b70 <_malloc_r>
 8002a9a:	bf00      	nop
 8002a9c:	2000000c 	.word	0x2000000c

08002aa0 <free>:
 8002aa0:	4b02      	ldr	r3, [pc, #8]	; (8002aac <free+0xc>)
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	f000 b817 	b.w	8002ad8 <_free_r>
 8002aaa:	bf00      	nop
 8002aac:	2000000c 	.word	0x2000000c

08002ab0 <memcpy>:
 8002ab0:	b510      	push	{r4, lr}
 8002ab2:	1e43      	subs	r3, r0, #1
 8002ab4:	440a      	add	r2, r1
 8002ab6:	4291      	cmp	r1, r2
 8002ab8:	d100      	bne.n	8002abc <memcpy+0xc>
 8002aba:	bd10      	pop	{r4, pc}
 8002abc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ac4:	e7f7      	b.n	8002ab6 <memcpy+0x6>

08002ac6 <memset>:
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4402      	add	r2, r0
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d100      	bne.n	8002ad0 <memset+0xa>
 8002ace:	4770      	bx	lr
 8002ad0:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad4:	e7f9      	b.n	8002aca <memset+0x4>
	...

08002ad8 <_free_r>:
 8002ad8:	b538      	push	{r3, r4, r5, lr}
 8002ada:	4605      	mov	r5, r0
 8002adc:	2900      	cmp	r1, #0
 8002ade:	d043      	beq.n	8002b68 <_free_r+0x90>
 8002ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ae4:	1f0c      	subs	r4, r1, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bfb8      	it	lt
 8002aea:	18e4      	addlt	r4, r4, r3
 8002aec:	f000 f98c 	bl	8002e08 <__malloc_lock>
 8002af0:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <_free_r+0x94>)
 8002af2:	6813      	ldr	r3, [r2, #0]
 8002af4:	4610      	mov	r0, r2
 8002af6:	b933      	cbnz	r3, 8002b06 <_free_r+0x2e>
 8002af8:	6063      	str	r3, [r4, #4]
 8002afa:	6014      	str	r4, [r2, #0]
 8002afc:	4628      	mov	r0, r5
 8002afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b02:	f000 b982 	b.w	8002e0a <__malloc_unlock>
 8002b06:	42a3      	cmp	r3, r4
 8002b08:	d90b      	bls.n	8002b22 <_free_r+0x4a>
 8002b0a:	6821      	ldr	r1, [r4, #0]
 8002b0c:	1862      	adds	r2, r4, r1
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	bf01      	itttt	eq
 8002b12:	681a      	ldreq	r2, [r3, #0]
 8002b14:	685b      	ldreq	r3, [r3, #4]
 8002b16:	1852      	addeq	r2, r2, r1
 8002b18:	6022      	streq	r2, [r4, #0]
 8002b1a:	6063      	str	r3, [r4, #4]
 8002b1c:	6004      	str	r4, [r0, #0]
 8002b1e:	e7ed      	b.n	8002afc <_free_r+0x24>
 8002b20:	4613      	mov	r3, r2
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	b10a      	cbz	r2, 8002b2a <_free_r+0x52>
 8002b26:	42a2      	cmp	r2, r4
 8002b28:	d9fa      	bls.n	8002b20 <_free_r+0x48>
 8002b2a:	6819      	ldr	r1, [r3, #0]
 8002b2c:	1858      	adds	r0, r3, r1
 8002b2e:	42a0      	cmp	r0, r4
 8002b30:	d10b      	bne.n	8002b4a <_free_r+0x72>
 8002b32:	6820      	ldr	r0, [r4, #0]
 8002b34:	4401      	add	r1, r0
 8002b36:	1858      	adds	r0, r3, r1
 8002b38:	4282      	cmp	r2, r0
 8002b3a:	6019      	str	r1, [r3, #0]
 8002b3c:	d1de      	bne.n	8002afc <_free_r+0x24>
 8002b3e:	6810      	ldr	r0, [r2, #0]
 8002b40:	6852      	ldr	r2, [r2, #4]
 8002b42:	4401      	add	r1, r0
 8002b44:	6019      	str	r1, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	e7d8      	b.n	8002afc <_free_r+0x24>
 8002b4a:	d902      	bls.n	8002b52 <_free_r+0x7a>
 8002b4c:	230c      	movs	r3, #12
 8002b4e:	602b      	str	r3, [r5, #0]
 8002b50:	e7d4      	b.n	8002afc <_free_r+0x24>
 8002b52:	6820      	ldr	r0, [r4, #0]
 8002b54:	1821      	adds	r1, r4, r0
 8002b56:	428a      	cmp	r2, r1
 8002b58:	bf01      	itttt	eq
 8002b5a:	6811      	ldreq	r1, [r2, #0]
 8002b5c:	6852      	ldreq	r2, [r2, #4]
 8002b5e:	1809      	addeq	r1, r1, r0
 8002b60:	6021      	streq	r1, [r4, #0]
 8002b62:	6062      	str	r2, [r4, #4]
 8002b64:	605c      	str	r4, [r3, #4]
 8002b66:	e7c9      	b.n	8002afc <_free_r+0x24>
 8002b68:	bd38      	pop	{r3, r4, r5, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200000a0 	.word	0x200000a0

08002b70 <_malloc_r>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	1ccd      	adds	r5, r1, #3
 8002b74:	f025 0503 	bic.w	r5, r5, #3
 8002b78:	3508      	adds	r5, #8
 8002b7a:	2d0c      	cmp	r5, #12
 8002b7c:	bf38      	it	cc
 8002b7e:	250c      	movcc	r5, #12
 8002b80:	2d00      	cmp	r5, #0
 8002b82:	4606      	mov	r6, r0
 8002b84:	db01      	blt.n	8002b8a <_malloc_r+0x1a>
 8002b86:	42a9      	cmp	r1, r5
 8002b88:	d903      	bls.n	8002b92 <_malloc_r+0x22>
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	6033      	str	r3, [r6, #0]
 8002b8e:	2000      	movs	r0, #0
 8002b90:	bd70      	pop	{r4, r5, r6, pc}
 8002b92:	f000 f939 	bl	8002e08 <__malloc_lock>
 8002b96:	4a21      	ldr	r2, [pc, #132]	; (8002c1c <_malloc_r+0xac>)
 8002b98:	6814      	ldr	r4, [r2, #0]
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	b991      	cbnz	r1, 8002bc4 <_malloc_r+0x54>
 8002b9e:	4c20      	ldr	r4, [pc, #128]	; (8002c20 <_malloc_r+0xb0>)
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	b91b      	cbnz	r3, 8002bac <_malloc_r+0x3c>
 8002ba4:	4630      	mov	r0, r6
 8002ba6:	f000 f855 	bl	8002c54 <_sbrk_r>
 8002baa:	6020      	str	r0, [r4, #0]
 8002bac:	4629      	mov	r1, r5
 8002bae:	4630      	mov	r0, r6
 8002bb0:	f000 f850 	bl	8002c54 <_sbrk_r>
 8002bb4:	1c43      	adds	r3, r0, #1
 8002bb6:	d124      	bne.n	8002c02 <_malloc_r+0x92>
 8002bb8:	230c      	movs	r3, #12
 8002bba:	4630      	mov	r0, r6
 8002bbc:	6033      	str	r3, [r6, #0]
 8002bbe:	f000 f924 	bl	8002e0a <__malloc_unlock>
 8002bc2:	e7e4      	b.n	8002b8e <_malloc_r+0x1e>
 8002bc4:	680b      	ldr	r3, [r1, #0]
 8002bc6:	1b5b      	subs	r3, r3, r5
 8002bc8:	d418      	bmi.n	8002bfc <_malloc_r+0x8c>
 8002bca:	2b0b      	cmp	r3, #11
 8002bcc:	d90f      	bls.n	8002bee <_malloc_r+0x7e>
 8002bce:	600b      	str	r3, [r1, #0]
 8002bd0:	18cc      	adds	r4, r1, r3
 8002bd2:	50cd      	str	r5, [r1, r3]
 8002bd4:	4630      	mov	r0, r6
 8002bd6:	f000 f918 	bl	8002e0a <__malloc_unlock>
 8002bda:	f104 000b 	add.w	r0, r4, #11
 8002bde:	1d23      	adds	r3, r4, #4
 8002be0:	f020 0007 	bic.w	r0, r0, #7
 8002be4:	1ac3      	subs	r3, r0, r3
 8002be6:	d0d3      	beq.n	8002b90 <_malloc_r+0x20>
 8002be8:	425a      	negs	r2, r3
 8002bea:	50e2      	str	r2, [r4, r3]
 8002bec:	e7d0      	b.n	8002b90 <_malloc_r+0x20>
 8002bee:	684b      	ldr	r3, [r1, #4]
 8002bf0:	428c      	cmp	r4, r1
 8002bf2:	bf16      	itet	ne
 8002bf4:	6063      	strne	r3, [r4, #4]
 8002bf6:	6013      	streq	r3, [r2, #0]
 8002bf8:	460c      	movne	r4, r1
 8002bfa:	e7eb      	b.n	8002bd4 <_malloc_r+0x64>
 8002bfc:	460c      	mov	r4, r1
 8002bfe:	6849      	ldr	r1, [r1, #4]
 8002c00:	e7cc      	b.n	8002b9c <_malloc_r+0x2c>
 8002c02:	1cc4      	adds	r4, r0, #3
 8002c04:	f024 0403 	bic.w	r4, r4, #3
 8002c08:	42a0      	cmp	r0, r4
 8002c0a:	d005      	beq.n	8002c18 <_malloc_r+0xa8>
 8002c0c:	1a21      	subs	r1, r4, r0
 8002c0e:	4630      	mov	r0, r6
 8002c10:	f000 f820 	bl	8002c54 <_sbrk_r>
 8002c14:	3001      	adds	r0, #1
 8002c16:	d0cf      	beq.n	8002bb8 <_malloc_r+0x48>
 8002c18:	6025      	str	r5, [r4, #0]
 8002c1a:	e7db      	b.n	8002bd4 <_malloc_r+0x64>
 8002c1c:	200000a0 	.word	0x200000a0
 8002c20:	200000a4 	.word	0x200000a4

08002c24 <iprintf>:
 8002c24:	b40f      	push	{r0, r1, r2, r3}
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <iprintf+0x2c>)
 8002c28:	b513      	push	{r0, r1, r4, lr}
 8002c2a:	681c      	ldr	r4, [r3, #0]
 8002c2c:	b124      	cbz	r4, 8002c38 <iprintf+0x14>
 8002c2e:	69a3      	ldr	r3, [r4, #24]
 8002c30:	b913      	cbnz	r3, 8002c38 <iprintf+0x14>
 8002c32:	4620      	mov	r0, r4
 8002c34:	f000 f85e 	bl	8002cf4 <__sinit>
 8002c38:	ab05      	add	r3, sp, #20
 8002c3a:	9a04      	ldr	r2, [sp, #16]
 8002c3c:	68a1      	ldr	r1, [r4, #8]
 8002c3e:	4620      	mov	r0, r4
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	f000 f90b 	bl	8002e5c <_vfiprintf_r>
 8002c46:	b002      	add	sp, #8
 8002c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c4c:	b004      	add	sp, #16
 8002c4e:	4770      	bx	lr
 8002c50:	2000000c 	.word	0x2000000c

08002c54 <_sbrk_r>:
 8002c54:	b538      	push	{r3, r4, r5, lr}
 8002c56:	2300      	movs	r3, #0
 8002c58:	4c05      	ldr	r4, [pc, #20]	; (8002c70 <_sbrk_r+0x1c>)
 8002c5a:	4605      	mov	r5, r0
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	6023      	str	r3, [r4, #0]
 8002c60:	f7fd ffe0 	bl	8000c24 <_sbrk>
 8002c64:	1c43      	adds	r3, r0, #1
 8002c66:	d102      	bne.n	8002c6e <_sbrk_r+0x1a>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	b103      	cbz	r3, 8002c6e <_sbrk_r+0x1a>
 8002c6c:	602b      	str	r3, [r5, #0]
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}
 8002c70:	2000031c 	.word	0x2000031c

08002c74 <std>:
 8002c74:	2300      	movs	r3, #0
 8002c76:	b510      	push	{r4, lr}
 8002c78:	4604      	mov	r4, r0
 8002c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8002c7e:	6083      	str	r3, [r0, #8]
 8002c80:	8181      	strh	r1, [r0, #12]
 8002c82:	6643      	str	r3, [r0, #100]	; 0x64
 8002c84:	81c2      	strh	r2, [r0, #14]
 8002c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c8a:	6183      	str	r3, [r0, #24]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	2208      	movs	r2, #8
 8002c90:	305c      	adds	r0, #92	; 0x5c
 8002c92:	f7ff ff18 	bl	8002ac6 <memset>
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <std+0x38>)
 8002c98:	6224      	str	r4, [r4, #32]
 8002c9a:	6263      	str	r3, [r4, #36]	; 0x24
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <std+0x3c>)
 8002c9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <std+0x40>)
 8002ca2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <std+0x44>)
 8002ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8002ca8:	bd10      	pop	{r4, pc}
 8002caa:	bf00      	nop
 8002cac:	08003399 	.word	0x08003399
 8002cb0:	080033bb 	.word	0x080033bb
 8002cb4:	080033f3 	.word	0x080033f3
 8002cb8:	08003417 	.word	0x08003417

08002cbc <_cleanup_r>:
 8002cbc:	4901      	ldr	r1, [pc, #4]	; (8002cc4 <_cleanup_r+0x8>)
 8002cbe:	f000 b885 	b.w	8002dcc <_fwalk_reent>
 8002cc2:	bf00      	nop
 8002cc4:	080036f1 	.word	0x080036f1

08002cc8 <__sfmoreglue>:
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	2568      	movs	r5, #104	; 0x68
 8002ccc:	1e4a      	subs	r2, r1, #1
 8002cce:	4355      	muls	r5, r2
 8002cd0:	460e      	mov	r6, r1
 8002cd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002cd6:	f7ff ff4b 	bl	8002b70 <_malloc_r>
 8002cda:	4604      	mov	r4, r0
 8002cdc:	b140      	cbz	r0, 8002cf0 <__sfmoreglue+0x28>
 8002cde:	2100      	movs	r1, #0
 8002ce0:	e9c0 1600 	strd	r1, r6, [r0]
 8002ce4:	300c      	adds	r0, #12
 8002ce6:	60a0      	str	r0, [r4, #8]
 8002ce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002cec:	f7ff feeb 	bl	8002ac6 <memset>
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	bd70      	pop	{r4, r5, r6, pc}

08002cf4 <__sinit>:
 8002cf4:	6983      	ldr	r3, [r0, #24]
 8002cf6:	b510      	push	{r4, lr}
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	bb33      	cbnz	r3, 8002d4a <__sinit+0x56>
 8002cfc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002d00:	6503      	str	r3, [r0, #80]	; 0x50
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <__sinit+0x58>)
 8002d04:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <__sinit+0x5c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6282      	str	r2, [r0, #40]	; 0x28
 8002d0a:	4298      	cmp	r0, r3
 8002d0c:	bf04      	itt	eq
 8002d0e:	2301      	moveq	r3, #1
 8002d10:	6183      	streq	r3, [r0, #24]
 8002d12:	f000 f81f 	bl	8002d54 <__sfp>
 8002d16:	6060      	str	r0, [r4, #4]
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f000 f81b 	bl	8002d54 <__sfp>
 8002d1e:	60a0      	str	r0, [r4, #8]
 8002d20:	4620      	mov	r0, r4
 8002d22:	f000 f817 	bl	8002d54 <__sfp>
 8002d26:	2200      	movs	r2, #0
 8002d28:	60e0      	str	r0, [r4, #12]
 8002d2a:	2104      	movs	r1, #4
 8002d2c:	6860      	ldr	r0, [r4, #4]
 8002d2e:	f7ff ffa1 	bl	8002c74 <std>
 8002d32:	2201      	movs	r2, #1
 8002d34:	2109      	movs	r1, #9
 8002d36:	68a0      	ldr	r0, [r4, #8]
 8002d38:	f7ff ff9c 	bl	8002c74 <std>
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	2112      	movs	r1, #18
 8002d40:	68e0      	ldr	r0, [r4, #12]
 8002d42:	f7ff ff97 	bl	8002c74 <std>
 8002d46:	2301      	movs	r3, #1
 8002d48:	61a3      	str	r3, [r4, #24]
 8002d4a:	bd10      	pop	{r4, pc}
 8002d4c:	080038f4 	.word	0x080038f4
 8002d50:	08002cbd 	.word	0x08002cbd

08002d54 <__sfp>:
 8002d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <__sfp+0x70>)
 8002d58:	4607      	mov	r7, r0
 8002d5a:	681e      	ldr	r6, [r3, #0]
 8002d5c:	69b3      	ldr	r3, [r6, #24]
 8002d5e:	b913      	cbnz	r3, 8002d66 <__sfp+0x12>
 8002d60:	4630      	mov	r0, r6
 8002d62:	f7ff ffc7 	bl	8002cf4 <__sinit>
 8002d66:	3648      	adds	r6, #72	; 0x48
 8002d68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	d503      	bpl.n	8002d78 <__sfp+0x24>
 8002d70:	6833      	ldr	r3, [r6, #0]
 8002d72:	b133      	cbz	r3, 8002d82 <__sfp+0x2e>
 8002d74:	6836      	ldr	r6, [r6, #0]
 8002d76:	e7f7      	b.n	8002d68 <__sfp+0x14>
 8002d78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d7c:	b16d      	cbz	r5, 8002d9a <__sfp+0x46>
 8002d7e:	3468      	adds	r4, #104	; 0x68
 8002d80:	e7f4      	b.n	8002d6c <__sfp+0x18>
 8002d82:	2104      	movs	r1, #4
 8002d84:	4638      	mov	r0, r7
 8002d86:	f7ff ff9f 	bl	8002cc8 <__sfmoreglue>
 8002d8a:	6030      	str	r0, [r6, #0]
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	d1f1      	bne.n	8002d74 <__sfp+0x20>
 8002d90:	230c      	movs	r3, #12
 8002d92:	4604      	mov	r4, r0
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	4620      	mov	r0, r4
 8002d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <__sfp+0x74>)
 8002d9c:	6665      	str	r5, [r4, #100]	; 0x64
 8002d9e:	e9c4 5500 	strd	r5, r5, [r4]
 8002da2:	60a5      	str	r5, [r4, #8]
 8002da4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002da8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002dac:	2208      	movs	r2, #8
 8002dae:	4629      	mov	r1, r5
 8002db0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002db4:	f7ff fe87 	bl	8002ac6 <memset>
 8002db8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002dbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002dc0:	e7e9      	b.n	8002d96 <__sfp+0x42>
 8002dc2:	bf00      	nop
 8002dc4:	080038f4 	.word	0x080038f4
 8002dc8:	ffff0001 	.word	0xffff0001

08002dcc <_fwalk_reent>:
 8002dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dd0:	4680      	mov	r8, r0
 8002dd2:	4689      	mov	r9, r1
 8002dd4:	2600      	movs	r6, #0
 8002dd6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002dda:	b914      	cbnz	r4, 8002de2 <_fwalk_reent+0x16>
 8002ddc:	4630      	mov	r0, r6
 8002dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002de2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002de6:	3f01      	subs	r7, #1
 8002de8:	d501      	bpl.n	8002dee <_fwalk_reent+0x22>
 8002dea:	6824      	ldr	r4, [r4, #0]
 8002dec:	e7f5      	b.n	8002dda <_fwalk_reent+0xe>
 8002dee:	89ab      	ldrh	r3, [r5, #12]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d907      	bls.n	8002e04 <_fwalk_reent+0x38>
 8002df4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	d003      	beq.n	8002e04 <_fwalk_reent+0x38>
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4640      	mov	r0, r8
 8002e00:	47c8      	blx	r9
 8002e02:	4306      	orrs	r6, r0
 8002e04:	3568      	adds	r5, #104	; 0x68
 8002e06:	e7ee      	b.n	8002de6 <_fwalk_reent+0x1a>

08002e08 <__malloc_lock>:
 8002e08:	4770      	bx	lr

08002e0a <__malloc_unlock>:
 8002e0a:	4770      	bx	lr

08002e0c <__sfputc_r>:
 8002e0c:	6893      	ldr	r3, [r2, #8]
 8002e0e:	b410      	push	{r4}
 8002e10:	3b01      	subs	r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	6093      	str	r3, [r2, #8]
 8002e16:	da07      	bge.n	8002e28 <__sfputc_r+0x1c>
 8002e18:	6994      	ldr	r4, [r2, #24]
 8002e1a:	42a3      	cmp	r3, r4
 8002e1c:	db01      	blt.n	8002e22 <__sfputc_r+0x16>
 8002e1e:	290a      	cmp	r1, #10
 8002e20:	d102      	bne.n	8002e28 <__sfputc_r+0x1c>
 8002e22:	bc10      	pop	{r4}
 8002e24:	f000 bafc 	b.w	8003420 <__swbuf_r>
 8002e28:	6813      	ldr	r3, [r2, #0]
 8002e2a:	1c58      	adds	r0, r3, #1
 8002e2c:	6010      	str	r0, [r2, #0]
 8002e2e:	7019      	strb	r1, [r3, #0]
 8002e30:	4608      	mov	r0, r1
 8002e32:	bc10      	pop	{r4}
 8002e34:	4770      	bx	lr

08002e36 <__sfputs_r>:
 8002e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e38:	4606      	mov	r6, r0
 8002e3a:	460f      	mov	r7, r1
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	18d5      	adds	r5, r2, r3
 8002e40:	42ac      	cmp	r4, r5
 8002e42:	d101      	bne.n	8002e48 <__sfputs_r+0x12>
 8002e44:	2000      	movs	r0, #0
 8002e46:	e007      	b.n	8002e58 <__sfputs_r+0x22>
 8002e48:	463a      	mov	r2, r7
 8002e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e4e:	4630      	mov	r0, r6
 8002e50:	f7ff ffdc 	bl	8002e0c <__sfputc_r>
 8002e54:	1c43      	adds	r3, r0, #1
 8002e56:	d1f3      	bne.n	8002e40 <__sfputs_r+0xa>
 8002e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e5c <_vfiprintf_r>:
 8002e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e60:	460c      	mov	r4, r1
 8002e62:	b09d      	sub	sp, #116	; 0x74
 8002e64:	4617      	mov	r7, r2
 8002e66:	461d      	mov	r5, r3
 8002e68:	4606      	mov	r6, r0
 8002e6a:	b118      	cbz	r0, 8002e74 <_vfiprintf_r+0x18>
 8002e6c:	6983      	ldr	r3, [r0, #24]
 8002e6e:	b90b      	cbnz	r3, 8002e74 <_vfiprintf_r+0x18>
 8002e70:	f7ff ff40 	bl	8002cf4 <__sinit>
 8002e74:	4b7c      	ldr	r3, [pc, #496]	; (8003068 <_vfiprintf_r+0x20c>)
 8002e76:	429c      	cmp	r4, r3
 8002e78:	d158      	bne.n	8002f2c <_vfiprintf_r+0xd0>
 8002e7a:	6874      	ldr	r4, [r6, #4]
 8002e7c:	89a3      	ldrh	r3, [r4, #12]
 8002e7e:	0718      	lsls	r0, r3, #28
 8002e80:	d55e      	bpl.n	8002f40 <_vfiprintf_r+0xe4>
 8002e82:	6923      	ldr	r3, [r4, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d05b      	beq.n	8002f40 <_vfiprintf_r+0xe4>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e8c:	2320      	movs	r3, #32
 8002e8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e92:	2330      	movs	r3, #48	; 0x30
 8002e94:	f04f 0b01 	mov.w	fp, #1
 8002e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e9c:	9503      	str	r5, [sp, #12]
 8002e9e:	46b8      	mov	r8, r7
 8002ea0:	4645      	mov	r5, r8
 8002ea2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ea6:	b10b      	cbz	r3, 8002eac <_vfiprintf_r+0x50>
 8002ea8:	2b25      	cmp	r3, #37	; 0x25
 8002eaa:	d154      	bne.n	8002f56 <_vfiprintf_r+0xfa>
 8002eac:	ebb8 0a07 	subs.w	sl, r8, r7
 8002eb0:	d00b      	beq.n	8002eca <_vfiprintf_r+0x6e>
 8002eb2:	4653      	mov	r3, sl
 8002eb4:	463a      	mov	r2, r7
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	4630      	mov	r0, r6
 8002eba:	f7ff ffbc 	bl	8002e36 <__sfputs_r>
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	f000 80c2 	beq.w	8003048 <_vfiprintf_r+0x1ec>
 8002ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ec6:	4453      	add	r3, sl
 8002ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8002eca:	f898 3000 	ldrb.w	r3, [r8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80ba 	beq.w	8003048 <_vfiprintf_r+0x1ec>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ede:	9304      	str	r3, [sp, #16]
 8002ee0:	9307      	str	r3, [sp, #28]
 8002ee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ee6:	931a      	str	r3, [sp, #104]	; 0x68
 8002ee8:	46a8      	mov	r8, r5
 8002eea:	2205      	movs	r2, #5
 8002eec:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002ef0:	485e      	ldr	r0, [pc, #376]	; (800306c <_vfiprintf_r+0x210>)
 8002ef2:	f000 fc9d 	bl	8003830 <memchr>
 8002ef6:	9b04      	ldr	r3, [sp, #16]
 8002ef8:	bb78      	cbnz	r0, 8002f5a <_vfiprintf_r+0xfe>
 8002efa:	06d9      	lsls	r1, r3, #27
 8002efc:	bf44      	itt	mi
 8002efe:	2220      	movmi	r2, #32
 8002f00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f04:	071a      	lsls	r2, r3, #28
 8002f06:	bf44      	itt	mi
 8002f08:	222b      	movmi	r2, #43	; 0x2b
 8002f0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f0e:	782a      	ldrb	r2, [r5, #0]
 8002f10:	2a2a      	cmp	r2, #42	; 0x2a
 8002f12:	d02a      	beq.n	8002f6a <_vfiprintf_r+0x10e>
 8002f14:	46a8      	mov	r8, r5
 8002f16:	2000      	movs	r0, #0
 8002f18:	250a      	movs	r5, #10
 8002f1a:	9a07      	ldr	r2, [sp, #28]
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f22:	3b30      	subs	r3, #48	; 0x30
 8002f24:	2b09      	cmp	r3, #9
 8002f26:	d969      	bls.n	8002ffc <_vfiprintf_r+0x1a0>
 8002f28:	b360      	cbz	r0, 8002f84 <_vfiprintf_r+0x128>
 8002f2a:	e024      	b.n	8002f76 <_vfiprintf_r+0x11a>
 8002f2c:	4b50      	ldr	r3, [pc, #320]	; (8003070 <_vfiprintf_r+0x214>)
 8002f2e:	429c      	cmp	r4, r3
 8002f30:	d101      	bne.n	8002f36 <_vfiprintf_r+0xda>
 8002f32:	68b4      	ldr	r4, [r6, #8]
 8002f34:	e7a2      	b.n	8002e7c <_vfiprintf_r+0x20>
 8002f36:	4b4f      	ldr	r3, [pc, #316]	; (8003074 <_vfiprintf_r+0x218>)
 8002f38:	429c      	cmp	r4, r3
 8002f3a:	bf08      	it	eq
 8002f3c:	68f4      	ldreq	r4, [r6, #12]
 8002f3e:	e79d      	b.n	8002e7c <_vfiprintf_r+0x20>
 8002f40:	4621      	mov	r1, r4
 8002f42:	4630      	mov	r0, r6
 8002f44:	f000 fad0 	bl	80034e8 <__swsetup_r>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d09d      	beq.n	8002e88 <_vfiprintf_r+0x2c>
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f50:	b01d      	add	sp, #116	; 0x74
 8002f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f56:	46a8      	mov	r8, r5
 8002f58:	e7a2      	b.n	8002ea0 <_vfiprintf_r+0x44>
 8002f5a:	4a44      	ldr	r2, [pc, #272]	; (800306c <_vfiprintf_r+0x210>)
 8002f5c:	4645      	mov	r5, r8
 8002f5e:	1a80      	subs	r0, r0, r2
 8002f60:	fa0b f000 	lsl.w	r0, fp, r0
 8002f64:	4318      	orrs	r0, r3
 8002f66:	9004      	str	r0, [sp, #16]
 8002f68:	e7be      	b.n	8002ee8 <_vfiprintf_r+0x8c>
 8002f6a:	9a03      	ldr	r2, [sp, #12]
 8002f6c:	1d11      	adds	r1, r2, #4
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	9103      	str	r1, [sp, #12]
 8002f72:	2a00      	cmp	r2, #0
 8002f74:	db01      	blt.n	8002f7a <_vfiprintf_r+0x11e>
 8002f76:	9207      	str	r2, [sp, #28]
 8002f78:	e004      	b.n	8002f84 <_vfiprintf_r+0x128>
 8002f7a:	4252      	negs	r2, r2
 8002f7c:	f043 0302 	orr.w	r3, r3, #2
 8002f80:	9207      	str	r2, [sp, #28]
 8002f82:	9304      	str	r3, [sp, #16]
 8002f84:	f898 3000 	ldrb.w	r3, [r8]
 8002f88:	2b2e      	cmp	r3, #46	; 0x2e
 8002f8a:	d10e      	bne.n	8002faa <_vfiprintf_r+0x14e>
 8002f8c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002f90:	2b2a      	cmp	r3, #42	; 0x2a
 8002f92:	d138      	bne.n	8003006 <_vfiprintf_r+0x1aa>
 8002f94:	9b03      	ldr	r3, [sp, #12]
 8002f96:	f108 0802 	add.w	r8, r8, #2
 8002f9a:	1d1a      	adds	r2, r3, #4
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	9203      	str	r2, [sp, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bfb8      	it	lt
 8002fa4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002fa8:	9305      	str	r3, [sp, #20]
 8002faa:	4d33      	ldr	r5, [pc, #204]	; (8003078 <_vfiprintf_r+0x21c>)
 8002fac:	2203      	movs	r2, #3
 8002fae:	f898 1000 	ldrb.w	r1, [r8]
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f000 fc3c 	bl	8003830 <memchr>
 8002fb8:	b140      	cbz	r0, 8002fcc <_vfiprintf_r+0x170>
 8002fba:	2340      	movs	r3, #64	; 0x40
 8002fbc:	1b40      	subs	r0, r0, r5
 8002fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8002fc2:	9b04      	ldr	r3, [sp, #16]
 8002fc4:	f108 0801 	add.w	r8, r8, #1
 8002fc8:	4303      	orrs	r3, r0
 8002fca:	9304      	str	r3, [sp, #16]
 8002fcc:	f898 1000 	ldrb.w	r1, [r8]
 8002fd0:	2206      	movs	r2, #6
 8002fd2:	482a      	ldr	r0, [pc, #168]	; (800307c <_vfiprintf_r+0x220>)
 8002fd4:	f108 0701 	add.w	r7, r8, #1
 8002fd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fdc:	f000 fc28 	bl	8003830 <memchr>
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	d037      	beq.n	8003054 <_vfiprintf_r+0x1f8>
 8002fe4:	4b26      	ldr	r3, [pc, #152]	; (8003080 <_vfiprintf_r+0x224>)
 8002fe6:	bb1b      	cbnz	r3, 8003030 <_vfiprintf_r+0x1d4>
 8002fe8:	9b03      	ldr	r3, [sp, #12]
 8002fea:	3307      	adds	r3, #7
 8002fec:	f023 0307 	bic.w	r3, r3, #7
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	9303      	str	r3, [sp, #12]
 8002ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ff6:	444b      	add	r3, r9
 8002ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8002ffa:	e750      	b.n	8002e9e <_vfiprintf_r+0x42>
 8002ffc:	fb05 3202 	mla	r2, r5, r2, r3
 8003000:	2001      	movs	r0, #1
 8003002:	4688      	mov	r8, r1
 8003004:	e78a      	b.n	8002f1c <_vfiprintf_r+0xc0>
 8003006:	2300      	movs	r3, #0
 8003008:	250a      	movs	r5, #10
 800300a:	4619      	mov	r1, r3
 800300c:	f108 0801 	add.w	r8, r8, #1
 8003010:	9305      	str	r3, [sp, #20]
 8003012:	4640      	mov	r0, r8
 8003014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003018:	3a30      	subs	r2, #48	; 0x30
 800301a:	2a09      	cmp	r2, #9
 800301c:	d903      	bls.n	8003026 <_vfiprintf_r+0x1ca>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0c3      	beq.n	8002faa <_vfiprintf_r+0x14e>
 8003022:	9105      	str	r1, [sp, #20]
 8003024:	e7c1      	b.n	8002faa <_vfiprintf_r+0x14e>
 8003026:	fb05 2101 	mla	r1, r5, r1, r2
 800302a:	2301      	movs	r3, #1
 800302c:	4680      	mov	r8, r0
 800302e:	e7f0      	b.n	8003012 <_vfiprintf_r+0x1b6>
 8003030:	ab03      	add	r3, sp, #12
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	4622      	mov	r2, r4
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <_vfiprintf_r+0x228>)
 8003038:	a904      	add	r1, sp, #16
 800303a:	4630      	mov	r0, r6
 800303c:	f3af 8000 	nop.w
 8003040:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003044:	4681      	mov	r9, r0
 8003046:	d1d5      	bne.n	8002ff4 <_vfiprintf_r+0x198>
 8003048:	89a3      	ldrh	r3, [r4, #12]
 800304a:	065b      	lsls	r3, r3, #25
 800304c:	f53f af7e 	bmi.w	8002f4c <_vfiprintf_r+0xf0>
 8003050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003052:	e77d      	b.n	8002f50 <_vfiprintf_r+0xf4>
 8003054:	ab03      	add	r3, sp, #12
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	4622      	mov	r2, r4
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <_vfiprintf_r+0x228>)
 800305c:	a904      	add	r1, sp, #16
 800305e:	4630      	mov	r0, r6
 8003060:	f000 f888 	bl	8003174 <_printf_i>
 8003064:	e7ec      	b.n	8003040 <_vfiprintf_r+0x1e4>
 8003066:	bf00      	nop
 8003068:	08003918 	.word	0x08003918
 800306c:	08003958 	.word	0x08003958
 8003070:	08003938 	.word	0x08003938
 8003074:	080038f8 	.word	0x080038f8
 8003078:	0800395e 	.word	0x0800395e
 800307c:	08003962 	.word	0x08003962
 8003080:	00000000 	.word	0x00000000
 8003084:	08002e37 	.word	0x08002e37

08003088 <_printf_common>:
 8003088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800308c:	4691      	mov	r9, r2
 800308e:	461f      	mov	r7, r3
 8003090:	688a      	ldr	r2, [r1, #8]
 8003092:	690b      	ldr	r3, [r1, #16]
 8003094:	4606      	mov	r6, r0
 8003096:	4293      	cmp	r3, r2
 8003098:	bfb8      	it	lt
 800309a:	4613      	movlt	r3, r2
 800309c:	f8c9 3000 	str.w	r3, [r9]
 80030a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030a4:	460c      	mov	r4, r1
 80030a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030aa:	b112      	cbz	r2, 80030b2 <_printf_common+0x2a>
 80030ac:	3301      	adds	r3, #1
 80030ae:	f8c9 3000 	str.w	r3, [r9]
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	0699      	lsls	r1, r3, #26
 80030b6:	bf42      	ittt	mi
 80030b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030bc:	3302      	addmi	r3, #2
 80030be:	f8c9 3000 	strmi.w	r3, [r9]
 80030c2:	6825      	ldr	r5, [r4, #0]
 80030c4:	f015 0506 	ands.w	r5, r5, #6
 80030c8:	d107      	bne.n	80030da <_printf_common+0x52>
 80030ca:	f104 0a19 	add.w	sl, r4, #25
 80030ce:	68e3      	ldr	r3, [r4, #12]
 80030d0:	f8d9 2000 	ldr.w	r2, [r9]
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	42ab      	cmp	r3, r5
 80030d8:	dc29      	bgt.n	800312e <_printf_common+0xa6>
 80030da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	3300      	adds	r3, #0
 80030e2:	bf18      	it	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	0692      	lsls	r2, r2, #26
 80030e8:	d42e      	bmi.n	8003148 <_printf_common+0xc0>
 80030ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030ee:	4639      	mov	r1, r7
 80030f0:	4630      	mov	r0, r6
 80030f2:	47c0      	blx	r8
 80030f4:	3001      	adds	r0, #1
 80030f6:	d021      	beq.n	800313c <_printf_common+0xb4>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	68e5      	ldr	r5, [r4, #12]
 80030fc:	f003 0306 	and.w	r3, r3, #6
 8003100:	2b04      	cmp	r3, #4
 8003102:	bf18      	it	ne
 8003104:	2500      	movne	r5, #0
 8003106:	f8d9 2000 	ldr.w	r2, [r9]
 800310a:	f04f 0900 	mov.w	r9, #0
 800310e:	bf08      	it	eq
 8003110:	1aad      	subeq	r5, r5, r2
 8003112:	68a3      	ldr	r3, [r4, #8]
 8003114:	6922      	ldr	r2, [r4, #16]
 8003116:	bf08      	it	eq
 8003118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800311c:	4293      	cmp	r3, r2
 800311e:	bfc4      	itt	gt
 8003120:	1a9b      	subgt	r3, r3, r2
 8003122:	18ed      	addgt	r5, r5, r3
 8003124:	341a      	adds	r4, #26
 8003126:	454d      	cmp	r5, r9
 8003128:	d11a      	bne.n	8003160 <_printf_common+0xd8>
 800312a:	2000      	movs	r0, #0
 800312c:	e008      	b.n	8003140 <_printf_common+0xb8>
 800312e:	2301      	movs	r3, #1
 8003130:	4652      	mov	r2, sl
 8003132:	4639      	mov	r1, r7
 8003134:	4630      	mov	r0, r6
 8003136:	47c0      	blx	r8
 8003138:	3001      	adds	r0, #1
 800313a:	d103      	bne.n	8003144 <_printf_common+0xbc>
 800313c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003144:	3501      	adds	r5, #1
 8003146:	e7c2      	b.n	80030ce <_printf_common+0x46>
 8003148:	2030      	movs	r0, #48	; 0x30
 800314a:	18e1      	adds	r1, r4, r3
 800314c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003156:	4422      	add	r2, r4
 8003158:	3302      	adds	r3, #2
 800315a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800315e:	e7c4      	b.n	80030ea <_printf_common+0x62>
 8003160:	2301      	movs	r3, #1
 8003162:	4622      	mov	r2, r4
 8003164:	4639      	mov	r1, r7
 8003166:	4630      	mov	r0, r6
 8003168:	47c0      	blx	r8
 800316a:	3001      	adds	r0, #1
 800316c:	d0e6      	beq.n	800313c <_printf_common+0xb4>
 800316e:	f109 0901 	add.w	r9, r9, #1
 8003172:	e7d8      	b.n	8003126 <_printf_common+0x9e>

08003174 <_printf_i>:
 8003174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003178:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800317c:	460c      	mov	r4, r1
 800317e:	7e09      	ldrb	r1, [r1, #24]
 8003180:	b085      	sub	sp, #20
 8003182:	296e      	cmp	r1, #110	; 0x6e
 8003184:	4617      	mov	r7, r2
 8003186:	4606      	mov	r6, r0
 8003188:	4698      	mov	r8, r3
 800318a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800318c:	f000 80b3 	beq.w	80032f6 <_printf_i+0x182>
 8003190:	d822      	bhi.n	80031d8 <_printf_i+0x64>
 8003192:	2963      	cmp	r1, #99	; 0x63
 8003194:	d036      	beq.n	8003204 <_printf_i+0x90>
 8003196:	d80a      	bhi.n	80031ae <_printf_i+0x3a>
 8003198:	2900      	cmp	r1, #0
 800319a:	f000 80b9 	beq.w	8003310 <_printf_i+0x19c>
 800319e:	2958      	cmp	r1, #88	; 0x58
 80031a0:	f000 8083 	beq.w	80032aa <_printf_i+0x136>
 80031a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80031ac:	e032      	b.n	8003214 <_printf_i+0xa0>
 80031ae:	2964      	cmp	r1, #100	; 0x64
 80031b0:	d001      	beq.n	80031b6 <_printf_i+0x42>
 80031b2:	2969      	cmp	r1, #105	; 0x69
 80031b4:	d1f6      	bne.n	80031a4 <_printf_i+0x30>
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	6813      	ldr	r3, [r2, #0]
 80031ba:	0605      	lsls	r5, r0, #24
 80031bc:	f103 0104 	add.w	r1, r3, #4
 80031c0:	d52a      	bpl.n	8003218 <_printf_i+0xa4>
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6011      	str	r1, [r2, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	da03      	bge.n	80031d2 <_printf_i+0x5e>
 80031ca:	222d      	movs	r2, #45	; 0x2d
 80031cc:	425b      	negs	r3, r3
 80031ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031d2:	486f      	ldr	r0, [pc, #444]	; (8003390 <_printf_i+0x21c>)
 80031d4:	220a      	movs	r2, #10
 80031d6:	e039      	b.n	800324c <_printf_i+0xd8>
 80031d8:	2973      	cmp	r1, #115	; 0x73
 80031da:	f000 809d 	beq.w	8003318 <_printf_i+0x1a4>
 80031de:	d808      	bhi.n	80031f2 <_printf_i+0x7e>
 80031e0:	296f      	cmp	r1, #111	; 0x6f
 80031e2:	d020      	beq.n	8003226 <_printf_i+0xb2>
 80031e4:	2970      	cmp	r1, #112	; 0x70
 80031e6:	d1dd      	bne.n	80031a4 <_printf_i+0x30>
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	f043 0320 	orr.w	r3, r3, #32
 80031ee:	6023      	str	r3, [r4, #0]
 80031f0:	e003      	b.n	80031fa <_printf_i+0x86>
 80031f2:	2975      	cmp	r1, #117	; 0x75
 80031f4:	d017      	beq.n	8003226 <_printf_i+0xb2>
 80031f6:	2978      	cmp	r1, #120	; 0x78
 80031f8:	d1d4      	bne.n	80031a4 <_printf_i+0x30>
 80031fa:	2378      	movs	r3, #120	; 0x78
 80031fc:	4865      	ldr	r0, [pc, #404]	; (8003394 <_printf_i+0x220>)
 80031fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003202:	e055      	b.n	80032b0 <_printf_i+0x13c>
 8003204:	6813      	ldr	r3, [r2, #0]
 8003206:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800320a:	1d19      	adds	r1, r3, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6011      	str	r1, [r2, #0]
 8003210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003214:	2301      	movs	r3, #1
 8003216:	e08c      	b.n	8003332 <_printf_i+0x1be>
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800321e:	6011      	str	r1, [r2, #0]
 8003220:	bf18      	it	ne
 8003222:	b21b      	sxthne	r3, r3
 8003224:	e7cf      	b.n	80031c6 <_printf_i+0x52>
 8003226:	6813      	ldr	r3, [r2, #0]
 8003228:	6825      	ldr	r5, [r4, #0]
 800322a:	1d18      	adds	r0, r3, #4
 800322c:	6010      	str	r0, [r2, #0]
 800322e:	0628      	lsls	r0, r5, #24
 8003230:	d501      	bpl.n	8003236 <_printf_i+0xc2>
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	e002      	b.n	800323c <_printf_i+0xc8>
 8003236:	0668      	lsls	r0, r5, #25
 8003238:	d5fb      	bpl.n	8003232 <_printf_i+0xbe>
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	296f      	cmp	r1, #111	; 0x6f
 800323e:	bf14      	ite	ne
 8003240:	220a      	movne	r2, #10
 8003242:	2208      	moveq	r2, #8
 8003244:	4852      	ldr	r0, [pc, #328]	; (8003390 <_printf_i+0x21c>)
 8003246:	2100      	movs	r1, #0
 8003248:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800324c:	6865      	ldr	r5, [r4, #4]
 800324e:	2d00      	cmp	r5, #0
 8003250:	60a5      	str	r5, [r4, #8]
 8003252:	f2c0 8095 	blt.w	8003380 <_printf_i+0x20c>
 8003256:	6821      	ldr	r1, [r4, #0]
 8003258:	f021 0104 	bic.w	r1, r1, #4
 800325c:	6021      	str	r1, [r4, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d13d      	bne.n	80032de <_printf_i+0x16a>
 8003262:	2d00      	cmp	r5, #0
 8003264:	f040 808e 	bne.w	8003384 <_printf_i+0x210>
 8003268:	4665      	mov	r5, ip
 800326a:	2a08      	cmp	r2, #8
 800326c:	d10b      	bne.n	8003286 <_printf_i+0x112>
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	07db      	lsls	r3, r3, #31
 8003272:	d508      	bpl.n	8003286 <_printf_i+0x112>
 8003274:	6923      	ldr	r3, [r4, #16]
 8003276:	6862      	ldr	r2, [r4, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	bfde      	ittt	le
 800327c:	2330      	movle	r3, #48	; 0x30
 800327e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003282:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003286:	ebac 0305 	sub.w	r3, ip, r5
 800328a:	6123      	str	r3, [r4, #16]
 800328c:	f8cd 8000 	str.w	r8, [sp]
 8003290:	463b      	mov	r3, r7
 8003292:	aa03      	add	r2, sp, #12
 8003294:	4621      	mov	r1, r4
 8003296:	4630      	mov	r0, r6
 8003298:	f7ff fef6 	bl	8003088 <_printf_common>
 800329c:	3001      	adds	r0, #1
 800329e:	d14d      	bne.n	800333c <_printf_i+0x1c8>
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032a4:	b005      	add	sp, #20
 80032a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032aa:	4839      	ldr	r0, [pc, #228]	; (8003390 <_printf_i+0x21c>)
 80032ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80032b0:	6813      	ldr	r3, [r2, #0]
 80032b2:	6821      	ldr	r1, [r4, #0]
 80032b4:	1d1d      	adds	r5, r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6015      	str	r5, [r2, #0]
 80032ba:	060a      	lsls	r2, r1, #24
 80032bc:	d50b      	bpl.n	80032d6 <_printf_i+0x162>
 80032be:	07ca      	lsls	r2, r1, #31
 80032c0:	bf44      	itt	mi
 80032c2:	f041 0120 	orrmi.w	r1, r1, #32
 80032c6:	6021      	strmi	r1, [r4, #0]
 80032c8:	b91b      	cbnz	r3, 80032d2 <_printf_i+0x15e>
 80032ca:	6822      	ldr	r2, [r4, #0]
 80032cc:	f022 0220 	bic.w	r2, r2, #32
 80032d0:	6022      	str	r2, [r4, #0]
 80032d2:	2210      	movs	r2, #16
 80032d4:	e7b7      	b.n	8003246 <_printf_i+0xd2>
 80032d6:	064d      	lsls	r5, r1, #25
 80032d8:	bf48      	it	mi
 80032da:	b29b      	uxthmi	r3, r3
 80032dc:	e7ef      	b.n	80032be <_printf_i+0x14a>
 80032de:	4665      	mov	r5, ip
 80032e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80032e4:	fb02 3311 	mls	r3, r2, r1, r3
 80032e8:	5cc3      	ldrb	r3, [r0, r3]
 80032ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032ee:	460b      	mov	r3, r1
 80032f0:	2900      	cmp	r1, #0
 80032f2:	d1f5      	bne.n	80032e0 <_printf_i+0x16c>
 80032f4:	e7b9      	b.n	800326a <_printf_i+0xf6>
 80032f6:	6813      	ldr	r3, [r2, #0]
 80032f8:	6825      	ldr	r5, [r4, #0]
 80032fa:	1d18      	adds	r0, r3, #4
 80032fc:	6961      	ldr	r1, [r4, #20]
 80032fe:	6010      	str	r0, [r2, #0]
 8003300:	0628      	lsls	r0, r5, #24
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	d501      	bpl.n	800330a <_printf_i+0x196>
 8003306:	6019      	str	r1, [r3, #0]
 8003308:	e002      	b.n	8003310 <_printf_i+0x19c>
 800330a:	066a      	lsls	r2, r5, #25
 800330c:	d5fb      	bpl.n	8003306 <_printf_i+0x192>
 800330e:	8019      	strh	r1, [r3, #0]
 8003310:	2300      	movs	r3, #0
 8003312:	4665      	mov	r5, ip
 8003314:	6123      	str	r3, [r4, #16]
 8003316:	e7b9      	b.n	800328c <_printf_i+0x118>
 8003318:	6813      	ldr	r3, [r2, #0]
 800331a:	1d19      	adds	r1, r3, #4
 800331c:	6011      	str	r1, [r2, #0]
 800331e:	681d      	ldr	r5, [r3, #0]
 8003320:	6862      	ldr	r2, [r4, #4]
 8003322:	2100      	movs	r1, #0
 8003324:	4628      	mov	r0, r5
 8003326:	f000 fa83 	bl	8003830 <memchr>
 800332a:	b108      	cbz	r0, 8003330 <_printf_i+0x1bc>
 800332c:	1b40      	subs	r0, r0, r5
 800332e:	6060      	str	r0, [r4, #4]
 8003330:	6863      	ldr	r3, [r4, #4]
 8003332:	6123      	str	r3, [r4, #16]
 8003334:	2300      	movs	r3, #0
 8003336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800333a:	e7a7      	b.n	800328c <_printf_i+0x118>
 800333c:	6923      	ldr	r3, [r4, #16]
 800333e:	462a      	mov	r2, r5
 8003340:	4639      	mov	r1, r7
 8003342:	4630      	mov	r0, r6
 8003344:	47c0      	blx	r8
 8003346:	3001      	adds	r0, #1
 8003348:	d0aa      	beq.n	80032a0 <_printf_i+0x12c>
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	079b      	lsls	r3, r3, #30
 800334e:	d413      	bmi.n	8003378 <_printf_i+0x204>
 8003350:	68e0      	ldr	r0, [r4, #12]
 8003352:	9b03      	ldr	r3, [sp, #12]
 8003354:	4298      	cmp	r0, r3
 8003356:	bfb8      	it	lt
 8003358:	4618      	movlt	r0, r3
 800335a:	e7a3      	b.n	80032a4 <_printf_i+0x130>
 800335c:	2301      	movs	r3, #1
 800335e:	464a      	mov	r2, r9
 8003360:	4639      	mov	r1, r7
 8003362:	4630      	mov	r0, r6
 8003364:	47c0      	blx	r8
 8003366:	3001      	adds	r0, #1
 8003368:	d09a      	beq.n	80032a0 <_printf_i+0x12c>
 800336a:	3501      	adds	r5, #1
 800336c:	68e3      	ldr	r3, [r4, #12]
 800336e:	9a03      	ldr	r2, [sp, #12]
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	42ab      	cmp	r3, r5
 8003374:	dcf2      	bgt.n	800335c <_printf_i+0x1e8>
 8003376:	e7eb      	b.n	8003350 <_printf_i+0x1dc>
 8003378:	2500      	movs	r5, #0
 800337a:	f104 0919 	add.w	r9, r4, #25
 800337e:	e7f5      	b.n	800336c <_printf_i+0x1f8>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ac      	bne.n	80032de <_printf_i+0x16a>
 8003384:	7803      	ldrb	r3, [r0, #0]
 8003386:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800338a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800338e:	e76c      	b.n	800326a <_printf_i+0xf6>
 8003390:	08003969 	.word	0x08003969
 8003394:	0800397a 	.word	0x0800397a

08003398 <__sread>:
 8003398:	b510      	push	{r4, lr}
 800339a:	460c      	mov	r4, r1
 800339c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a0:	f000 fa54 	bl	800384c <_read_r>
 80033a4:	2800      	cmp	r0, #0
 80033a6:	bfab      	itete	ge
 80033a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80033aa:	89a3      	ldrhlt	r3, [r4, #12]
 80033ac:	181b      	addge	r3, r3, r0
 80033ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80033b2:	bfac      	ite	ge
 80033b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80033b6:	81a3      	strhlt	r3, [r4, #12]
 80033b8:	bd10      	pop	{r4, pc}

080033ba <__swrite>:
 80033ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033be:	461f      	mov	r7, r3
 80033c0:	898b      	ldrh	r3, [r1, #12]
 80033c2:	4605      	mov	r5, r0
 80033c4:	05db      	lsls	r3, r3, #23
 80033c6:	460c      	mov	r4, r1
 80033c8:	4616      	mov	r6, r2
 80033ca:	d505      	bpl.n	80033d8 <__swrite+0x1e>
 80033cc:	2302      	movs	r3, #2
 80033ce:	2200      	movs	r2, #0
 80033d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033d4:	f000 f9b6 	bl	8003744 <_lseek_r>
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	4632      	mov	r2, r6
 80033dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033e0:	81a3      	strh	r3, [r4, #12]
 80033e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033e6:	463b      	mov	r3, r7
 80033e8:	4628      	mov	r0, r5
 80033ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033ee:	f000 b869 	b.w	80034c4 <_write_r>

080033f2 <__sseek>:
 80033f2:	b510      	push	{r4, lr}
 80033f4:	460c      	mov	r4, r1
 80033f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033fa:	f000 f9a3 	bl	8003744 <_lseek_r>
 80033fe:	1c43      	adds	r3, r0, #1
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	bf15      	itete	ne
 8003404:	6560      	strne	r0, [r4, #84]	; 0x54
 8003406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800340a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800340e:	81a3      	strheq	r3, [r4, #12]
 8003410:	bf18      	it	ne
 8003412:	81a3      	strhne	r3, [r4, #12]
 8003414:	bd10      	pop	{r4, pc}

08003416 <__sclose>:
 8003416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800341a:	f000 b8d3 	b.w	80035c4 <_close_r>
	...

08003420 <__swbuf_r>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	460e      	mov	r6, r1
 8003424:	4614      	mov	r4, r2
 8003426:	4605      	mov	r5, r0
 8003428:	b118      	cbz	r0, 8003432 <__swbuf_r+0x12>
 800342a:	6983      	ldr	r3, [r0, #24]
 800342c:	b90b      	cbnz	r3, 8003432 <__swbuf_r+0x12>
 800342e:	f7ff fc61 	bl	8002cf4 <__sinit>
 8003432:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <__swbuf_r+0x98>)
 8003434:	429c      	cmp	r4, r3
 8003436:	d12a      	bne.n	800348e <__swbuf_r+0x6e>
 8003438:	686c      	ldr	r4, [r5, #4]
 800343a:	69a3      	ldr	r3, [r4, #24]
 800343c:	60a3      	str	r3, [r4, #8]
 800343e:	89a3      	ldrh	r3, [r4, #12]
 8003440:	071a      	lsls	r2, r3, #28
 8003442:	d52e      	bpl.n	80034a2 <__swbuf_r+0x82>
 8003444:	6923      	ldr	r3, [r4, #16]
 8003446:	b363      	cbz	r3, 80034a2 <__swbuf_r+0x82>
 8003448:	6923      	ldr	r3, [r4, #16]
 800344a:	6820      	ldr	r0, [r4, #0]
 800344c:	b2f6      	uxtb	r6, r6
 800344e:	1ac0      	subs	r0, r0, r3
 8003450:	6963      	ldr	r3, [r4, #20]
 8003452:	4637      	mov	r7, r6
 8003454:	4283      	cmp	r3, r0
 8003456:	dc04      	bgt.n	8003462 <__swbuf_r+0x42>
 8003458:	4621      	mov	r1, r4
 800345a:	4628      	mov	r0, r5
 800345c:	f000 f948 	bl	80036f0 <_fflush_r>
 8003460:	bb28      	cbnz	r0, 80034ae <__swbuf_r+0x8e>
 8003462:	68a3      	ldr	r3, [r4, #8]
 8003464:	3001      	adds	r0, #1
 8003466:	3b01      	subs	r3, #1
 8003468:	60a3      	str	r3, [r4, #8]
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	6022      	str	r2, [r4, #0]
 8003470:	701e      	strb	r6, [r3, #0]
 8003472:	6963      	ldr	r3, [r4, #20]
 8003474:	4283      	cmp	r3, r0
 8003476:	d004      	beq.n	8003482 <__swbuf_r+0x62>
 8003478:	89a3      	ldrh	r3, [r4, #12]
 800347a:	07db      	lsls	r3, r3, #31
 800347c:	d519      	bpl.n	80034b2 <__swbuf_r+0x92>
 800347e:	2e0a      	cmp	r6, #10
 8003480:	d117      	bne.n	80034b2 <__swbuf_r+0x92>
 8003482:	4621      	mov	r1, r4
 8003484:	4628      	mov	r0, r5
 8003486:	f000 f933 	bl	80036f0 <_fflush_r>
 800348a:	b190      	cbz	r0, 80034b2 <__swbuf_r+0x92>
 800348c:	e00f      	b.n	80034ae <__swbuf_r+0x8e>
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <__swbuf_r+0x9c>)
 8003490:	429c      	cmp	r4, r3
 8003492:	d101      	bne.n	8003498 <__swbuf_r+0x78>
 8003494:	68ac      	ldr	r4, [r5, #8]
 8003496:	e7d0      	b.n	800343a <__swbuf_r+0x1a>
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <__swbuf_r+0xa0>)
 800349a:	429c      	cmp	r4, r3
 800349c:	bf08      	it	eq
 800349e:	68ec      	ldreq	r4, [r5, #12]
 80034a0:	e7cb      	b.n	800343a <__swbuf_r+0x1a>
 80034a2:	4621      	mov	r1, r4
 80034a4:	4628      	mov	r0, r5
 80034a6:	f000 f81f 	bl	80034e8 <__swsetup_r>
 80034aa:	2800      	cmp	r0, #0
 80034ac:	d0cc      	beq.n	8003448 <__swbuf_r+0x28>
 80034ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80034b2:	4638      	mov	r0, r7
 80034b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034b6:	bf00      	nop
 80034b8:	08003918 	.word	0x08003918
 80034bc:	08003938 	.word	0x08003938
 80034c0:	080038f8 	.word	0x080038f8

080034c4 <_write_r>:
 80034c4:	b538      	push	{r3, r4, r5, lr}
 80034c6:	4605      	mov	r5, r0
 80034c8:	4608      	mov	r0, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	2200      	movs	r2, #0
 80034ce:	4c05      	ldr	r4, [pc, #20]	; (80034e4 <_write_r+0x20>)
 80034d0:	6022      	str	r2, [r4, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f7fd fb59 	bl	8000b8a <_write>
 80034d8:	1c43      	adds	r3, r0, #1
 80034da:	d102      	bne.n	80034e2 <_write_r+0x1e>
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	b103      	cbz	r3, 80034e2 <_write_r+0x1e>
 80034e0:	602b      	str	r3, [r5, #0]
 80034e2:	bd38      	pop	{r3, r4, r5, pc}
 80034e4:	2000031c 	.word	0x2000031c

080034e8 <__swsetup_r>:
 80034e8:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <__swsetup_r+0xcc>)
 80034ea:	b570      	push	{r4, r5, r6, lr}
 80034ec:	681d      	ldr	r5, [r3, #0]
 80034ee:	4606      	mov	r6, r0
 80034f0:	460c      	mov	r4, r1
 80034f2:	b125      	cbz	r5, 80034fe <__swsetup_r+0x16>
 80034f4:	69ab      	ldr	r3, [r5, #24]
 80034f6:	b913      	cbnz	r3, 80034fe <__swsetup_r+0x16>
 80034f8:	4628      	mov	r0, r5
 80034fa:	f7ff fbfb 	bl	8002cf4 <__sinit>
 80034fe:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <__swsetup_r+0xd0>)
 8003500:	429c      	cmp	r4, r3
 8003502:	d10f      	bne.n	8003524 <__swsetup_r+0x3c>
 8003504:	686c      	ldr	r4, [r5, #4]
 8003506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800350a:	b29a      	uxth	r2, r3
 800350c:	0715      	lsls	r5, r2, #28
 800350e:	d42c      	bmi.n	800356a <__swsetup_r+0x82>
 8003510:	06d0      	lsls	r0, r2, #27
 8003512:	d411      	bmi.n	8003538 <__swsetup_r+0x50>
 8003514:	2209      	movs	r2, #9
 8003516:	6032      	str	r2, [r6, #0]
 8003518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800351c:	81a3      	strh	r3, [r4, #12]
 800351e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003522:	e03e      	b.n	80035a2 <__swsetup_r+0xba>
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <__swsetup_r+0xd4>)
 8003526:	429c      	cmp	r4, r3
 8003528:	d101      	bne.n	800352e <__swsetup_r+0x46>
 800352a:	68ac      	ldr	r4, [r5, #8]
 800352c:	e7eb      	b.n	8003506 <__swsetup_r+0x1e>
 800352e:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <__swsetup_r+0xd8>)
 8003530:	429c      	cmp	r4, r3
 8003532:	bf08      	it	eq
 8003534:	68ec      	ldreq	r4, [r5, #12]
 8003536:	e7e6      	b.n	8003506 <__swsetup_r+0x1e>
 8003538:	0751      	lsls	r1, r2, #29
 800353a:	d512      	bpl.n	8003562 <__swsetup_r+0x7a>
 800353c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800353e:	b141      	cbz	r1, 8003552 <__swsetup_r+0x6a>
 8003540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003544:	4299      	cmp	r1, r3
 8003546:	d002      	beq.n	800354e <__swsetup_r+0x66>
 8003548:	4630      	mov	r0, r6
 800354a:	f7ff fac5 	bl	8002ad8 <_free_r>
 800354e:	2300      	movs	r3, #0
 8003550:	6363      	str	r3, [r4, #52]	; 0x34
 8003552:	89a3      	ldrh	r3, [r4, #12]
 8003554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003558:	81a3      	strh	r3, [r4, #12]
 800355a:	2300      	movs	r3, #0
 800355c:	6063      	str	r3, [r4, #4]
 800355e:	6923      	ldr	r3, [r4, #16]
 8003560:	6023      	str	r3, [r4, #0]
 8003562:	89a3      	ldrh	r3, [r4, #12]
 8003564:	f043 0308 	orr.w	r3, r3, #8
 8003568:	81a3      	strh	r3, [r4, #12]
 800356a:	6923      	ldr	r3, [r4, #16]
 800356c:	b94b      	cbnz	r3, 8003582 <__swsetup_r+0x9a>
 800356e:	89a3      	ldrh	r3, [r4, #12]
 8003570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003578:	d003      	beq.n	8003582 <__swsetup_r+0x9a>
 800357a:	4621      	mov	r1, r4
 800357c:	4630      	mov	r0, r6
 800357e:	f000 f917 	bl	80037b0 <__smakebuf_r>
 8003582:	89a2      	ldrh	r2, [r4, #12]
 8003584:	f012 0301 	ands.w	r3, r2, #1
 8003588:	d00c      	beq.n	80035a4 <__swsetup_r+0xbc>
 800358a:	2300      	movs	r3, #0
 800358c:	60a3      	str	r3, [r4, #8]
 800358e:	6963      	ldr	r3, [r4, #20]
 8003590:	425b      	negs	r3, r3
 8003592:	61a3      	str	r3, [r4, #24]
 8003594:	6923      	ldr	r3, [r4, #16]
 8003596:	b953      	cbnz	r3, 80035ae <__swsetup_r+0xc6>
 8003598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800359c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80035a0:	d1ba      	bne.n	8003518 <__swsetup_r+0x30>
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	0792      	lsls	r2, r2, #30
 80035a6:	bf58      	it	pl
 80035a8:	6963      	ldrpl	r3, [r4, #20]
 80035aa:	60a3      	str	r3, [r4, #8]
 80035ac:	e7f2      	b.n	8003594 <__swsetup_r+0xac>
 80035ae:	2000      	movs	r0, #0
 80035b0:	e7f7      	b.n	80035a2 <__swsetup_r+0xba>
 80035b2:	bf00      	nop
 80035b4:	2000000c 	.word	0x2000000c
 80035b8:	08003918 	.word	0x08003918
 80035bc:	08003938 	.word	0x08003938
 80035c0:	080038f8 	.word	0x080038f8

080035c4 <_close_r>:
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	2300      	movs	r3, #0
 80035c8:	4c05      	ldr	r4, [pc, #20]	; (80035e0 <_close_r+0x1c>)
 80035ca:	4605      	mov	r5, r0
 80035cc:	4608      	mov	r0, r1
 80035ce:	6023      	str	r3, [r4, #0]
 80035d0:	f7fd faf7 	bl	8000bc2 <_close>
 80035d4:	1c43      	adds	r3, r0, #1
 80035d6:	d102      	bne.n	80035de <_close_r+0x1a>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	b103      	cbz	r3, 80035de <_close_r+0x1a>
 80035dc:	602b      	str	r3, [r5, #0]
 80035de:	bd38      	pop	{r3, r4, r5, pc}
 80035e0:	2000031c 	.word	0x2000031c

080035e4 <__sflush_r>:
 80035e4:	898a      	ldrh	r2, [r1, #12]
 80035e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ea:	4605      	mov	r5, r0
 80035ec:	0710      	lsls	r0, r2, #28
 80035ee:	460c      	mov	r4, r1
 80035f0:	d458      	bmi.n	80036a4 <__sflush_r+0xc0>
 80035f2:	684b      	ldr	r3, [r1, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	dc05      	bgt.n	8003604 <__sflush_r+0x20>
 80035f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	dc02      	bgt.n	8003604 <__sflush_r+0x20>
 80035fe:	2000      	movs	r0, #0
 8003600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003606:	2e00      	cmp	r6, #0
 8003608:	d0f9      	beq.n	80035fe <__sflush_r+0x1a>
 800360a:	2300      	movs	r3, #0
 800360c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003610:	682f      	ldr	r7, [r5, #0]
 8003612:	6a21      	ldr	r1, [r4, #32]
 8003614:	602b      	str	r3, [r5, #0]
 8003616:	d032      	beq.n	800367e <__sflush_r+0x9a>
 8003618:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	075a      	lsls	r2, r3, #29
 800361e:	d505      	bpl.n	800362c <__sflush_r+0x48>
 8003620:	6863      	ldr	r3, [r4, #4]
 8003622:	1ac0      	subs	r0, r0, r3
 8003624:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003626:	b10b      	cbz	r3, 800362c <__sflush_r+0x48>
 8003628:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800362a:	1ac0      	subs	r0, r0, r3
 800362c:	2300      	movs	r3, #0
 800362e:	4602      	mov	r2, r0
 8003630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003632:	6a21      	ldr	r1, [r4, #32]
 8003634:	4628      	mov	r0, r5
 8003636:	47b0      	blx	r6
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	d106      	bne.n	800364c <__sflush_r+0x68>
 800363e:	6829      	ldr	r1, [r5, #0]
 8003640:	291d      	cmp	r1, #29
 8003642:	d848      	bhi.n	80036d6 <__sflush_r+0xf2>
 8003644:	4a29      	ldr	r2, [pc, #164]	; (80036ec <__sflush_r+0x108>)
 8003646:	40ca      	lsrs	r2, r1
 8003648:	07d6      	lsls	r6, r2, #31
 800364a:	d544      	bpl.n	80036d6 <__sflush_r+0xf2>
 800364c:	2200      	movs	r2, #0
 800364e:	6062      	str	r2, [r4, #4]
 8003650:	6922      	ldr	r2, [r4, #16]
 8003652:	04d9      	lsls	r1, r3, #19
 8003654:	6022      	str	r2, [r4, #0]
 8003656:	d504      	bpl.n	8003662 <__sflush_r+0x7e>
 8003658:	1c42      	adds	r2, r0, #1
 800365a:	d101      	bne.n	8003660 <__sflush_r+0x7c>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	b903      	cbnz	r3, 8003662 <__sflush_r+0x7e>
 8003660:	6560      	str	r0, [r4, #84]	; 0x54
 8003662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003664:	602f      	str	r7, [r5, #0]
 8003666:	2900      	cmp	r1, #0
 8003668:	d0c9      	beq.n	80035fe <__sflush_r+0x1a>
 800366a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800366e:	4299      	cmp	r1, r3
 8003670:	d002      	beq.n	8003678 <__sflush_r+0x94>
 8003672:	4628      	mov	r0, r5
 8003674:	f7ff fa30 	bl	8002ad8 <_free_r>
 8003678:	2000      	movs	r0, #0
 800367a:	6360      	str	r0, [r4, #52]	; 0x34
 800367c:	e7c0      	b.n	8003600 <__sflush_r+0x1c>
 800367e:	2301      	movs	r3, #1
 8003680:	4628      	mov	r0, r5
 8003682:	47b0      	blx	r6
 8003684:	1c41      	adds	r1, r0, #1
 8003686:	d1c8      	bne.n	800361a <__sflush_r+0x36>
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0c5      	beq.n	800361a <__sflush_r+0x36>
 800368e:	2b1d      	cmp	r3, #29
 8003690:	d001      	beq.n	8003696 <__sflush_r+0xb2>
 8003692:	2b16      	cmp	r3, #22
 8003694:	d101      	bne.n	800369a <__sflush_r+0xb6>
 8003696:	602f      	str	r7, [r5, #0]
 8003698:	e7b1      	b.n	80035fe <__sflush_r+0x1a>
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a0:	81a3      	strh	r3, [r4, #12]
 80036a2:	e7ad      	b.n	8003600 <__sflush_r+0x1c>
 80036a4:	690f      	ldr	r7, [r1, #16]
 80036a6:	2f00      	cmp	r7, #0
 80036a8:	d0a9      	beq.n	80035fe <__sflush_r+0x1a>
 80036aa:	0793      	lsls	r3, r2, #30
 80036ac:	bf18      	it	ne
 80036ae:	2300      	movne	r3, #0
 80036b0:	680e      	ldr	r6, [r1, #0]
 80036b2:	bf08      	it	eq
 80036b4:	694b      	ldreq	r3, [r1, #20]
 80036b6:	eba6 0807 	sub.w	r8, r6, r7
 80036ba:	600f      	str	r7, [r1, #0]
 80036bc:	608b      	str	r3, [r1, #8]
 80036be:	f1b8 0f00 	cmp.w	r8, #0
 80036c2:	dd9c      	ble.n	80035fe <__sflush_r+0x1a>
 80036c4:	4643      	mov	r3, r8
 80036c6:	463a      	mov	r2, r7
 80036c8:	6a21      	ldr	r1, [r4, #32]
 80036ca:	4628      	mov	r0, r5
 80036cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036ce:	47b0      	blx	r6
 80036d0:	2800      	cmp	r0, #0
 80036d2:	dc06      	bgt.n	80036e2 <__sflush_r+0xfe>
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036da:	81a3      	strh	r3, [r4, #12]
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036e0:	e78e      	b.n	8003600 <__sflush_r+0x1c>
 80036e2:	4407      	add	r7, r0
 80036e4:	eba8 0800 	sub.w	r8, r8, r0
 80036e8:	e7e9      	b.n	80036be <__sflush_r+0xda>
 80036ea:	bf00      	nop
 80036ec:	20400001 	.word	0x20400001

080036f0 <_fflush_r>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	690b      	ldr	r3, [r1, #16]
 80036f4:	4605      	mov	r5, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	b1db      	cbz	r3, 8003732 <_fflush_r+0x42>
 80036fa:	b118      	cbz	r0, 8003704 <_fflush_r+0x14>
 80036fc:	6983      	ldr	r3, [r0, #24]
 80036fe:	b90b      	cbnz	r3, 8003704 <_fflush_r+0x14>
 8003700:	f7ff faf8 	bl	8002cf4 <__sinit>
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <_fflush_r+0x48>)
 8003706:	429c      	cmp	r4, r3
 8003708:	d109      	bne.n	800371e <_fflush_r+0x2e>
 800370a:	686c      	ldr	r4, [r5, #4]
 800370c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003710:	b17b      	cbz	r3, 8003732 <_fflush_r+0x42>
 8003712:	4621      	mov	r1, r4
 8003714:	4628      	mov	r0, r5
 8003716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800371a:	f7ff bf63 	b.w	80035e4 <__sflush_r>
 800371e:	4b07      	ldr	r3, [pc, #28]	; (800373c <_fflush_r+0x4c>)
 8003720:	429c      	cmp	r4, r3
 8003722:	d101      	bne.n	8003728 <_fflush_r+0x38>
 8003724:	68ac      	ldr	r4, [r5, #8]
 8003726:	e7f1      	b.n	800370c <_fflush_r+0x1c>
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <_fflush_r+0x50>)
 800372a:	429c      	cmp	r4, r3
 800372c:	bf08      	it	eq
 800372e:	68ec      	ldreq	r4, [r5, #12]
 8003730:	e7ec      	b.n	800370c <_fflush_r+0x1c>
 8003732:	2000      	movs	r0, #0
 8003734:	bd38      	pop	{r3, r4, r5, pc}
 8003736:	bf00      	nop
 8003738:	08003918 	.word	0x08003918
 800373c:	08003938 	.word	0x08003938
 8003740:	080038f8 	.word	0x080038f8

08003744 <_lseek_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4605      	mov	r5, r0
 8003748:	4608      	mov	r0, r1
 800374a:	4611      	mov	r1, r2
 800374c:	2200      	movs	r2, #0
 800374e:	4c05      	ldr	r4, [pc, #20]	; (8003764 <_lseek_r+0x20>)
 8003750:	6022      	str	r2, [r4, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	f7fd fa59 	bl	8000c0a <_lseek>
 8003758:	1c43      	adds	r3, r0, #1
 800375a:	d102      	bne.n	8003762 <_lseek_r+0x1e>
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	b103      	cbz	r3, 8003762 <_lseek_r+0x1e>
 8003760:	602b      	str	r3, [r5, #0]
 8003762:	bd38      	pop	{r3, r4, r5, pc}
 8003764:	2000031c 	.word	0x2000031c

08003768 <__swhatbuf_r>:
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	460e      	mov	r6, r1
 800376c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003770:	b096      	sub	sp, #88	; 0x58
 8003772:	2900      	cmp	r1, #0
 8003774:	4614      	mov	r4, r2
 8003776:	461d      	mov	r5, r3
 8003778:	da07      	bge.n	800378a <__swhatbuf_r+0x22>
 800377a:	2300      	movs	r3, #0
 800377c:	602b      	str	r3, [r5, #0]
 800377e:	89b3      	ldrh	r3, [r6, #12]
 8003780:	061a      	lsls	r2, r3, #24
 8003782:	d410      	bmi.n	80037a6 <__swhatbuf_r+0x3e>
 8003784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003788:	e00e      	b.n	80037a8 <__swhatbuf_r+0x40>
 800378a:	466a      	mov	r2, sp
 800378c:	f000 f870 	bl	8003870 <_fstat_r>
 8003790:	2800      	cmp	r0, #0
 8003792:	dbf2      	blt.n	800377a <__swhatbuf_r+0x12>
 8003794:	9a01      	ldr	r2, [sp, #4]
 8003796:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800379a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800379e:	425a      	negs	r2, r3
 80037a0:	415a      	adcs	r2, r3
 80037a2:	602a      	str	r2, [r5, #0]
 80037a4:	e7ee      	b.n	8003784 <__swhatbuf_r+0x1c>
 80037a6:	2340      	movs	r3, #64	; 0x40
 80037a8:	2000      	movs	r0, #0
 80037aa:	6023      	str	r3, [r4, #0]
 80037ac:	b016      	add	sp, #88	; 0x58
 80037ae:	bd70      	pop	{r4, r5, r6, pc}

080037b0 <__smakebuf_r>:
 80037b0:	898b      	ldrh	r3, [r1, #12]
 80037b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037b4:	079d      	lsls	r5, r3, #30
 80037b6:	4606      	mov	r6, r0
 80037b8:	460c      	mov	r4, r1
 80037ba:	d507      	bpl.n	80037cc <__smakebuf_r+0x1c>
 80037bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	6123      	str	r3, [r4, #16]
 80037c4:	2301      	movs	r3, #1
 80037c6:	6163      	str	r3, [r4, #20]
 80037c8:	b002      	add	sp, #8
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
 80037cc:	ab01      	add	r3, sp, #4
 80037ce:	466a      	mov	r2, sp
 80037d0:	f7ff ffca 	bl	8003768 <__swhatbuf_r>
 80037d4:	9900      	ldr	r1, [sp, #0]
 80037d6:	4605      	mov	r5, r0
 80037d8:	4630      	mov	r0, r6
 80037da:	f7ff f9c9 	bl	8002b70 <_malloc_r>
 80037de:	b948      	cbnz	r0, 80037f4 <__smakebuf_r+0x44>
 80037e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037e4:	059a      	lsls	r2, r3, #22
 80037e6:	d4ef      	bmi.n	80037c8 <__smakebuf_r+0x18>
 80037e8:	f023 0303 	bic.w	r3, r3, #3
 80037ec:	f043 0302 	orr.w	r3, r3, #2
 80037f0:	81a3      	strh	r3, [r4, #12]
 80037f2:	e7e3      	b.n	80037bc <__smakebuf_r+0xc>
 80037f4:	4b0d      	ldr	r3, [pc, #52]	; (800382c <__smakebuf_r+0x7c>)
 80037f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80037f8:	89a3      	ldrh	r3, [r4, #12]
 80037fa:	6020      	str	r0, [r4, #0]
 80037fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003800:	81a3      	strh	r3, [r4, #12]
 8003802:	9b00      	ldr	r3, [sp, #0]
 8003804:	6120      	str	r0, [r4, #16]
 8003806:	6163      	str	r3, [r4, #20]
 8003808:	9b01      	ldr	r3, [sp, #4]
 800380a:	b15b      	cbz	r3, 8003824 <__smakebuf_r+0x74>
 800380c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003810:	4630      	mov	r0, r6
 8003812:	f000 f83f 	bl	8003894 <_isatty_r>
 8003816:	b128      	cbz	r0, 8003824 <__smakebuf_r+0x74>
 8003818:	89a3      	ldrh	r3, [r4, #12]
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	81a3      	strh	r3, [r4, #12]
 8003824:	89a3      	ldrh	r3, [r4, #12]
 8003826:	431d      	orrs	r5, r3
 8003828:	81a5      	strh	r5, [r4, #12]
 800382a:	e7cd      	b.n	80037c8 <__smakebuf_r+0x18>
 800382c:	08002cbd 	.word	0x08002cbd

08003830 <memchr>:
 8003830:	b510      	push	{r4, lr}
 8003832:	b2c9      	uxtb	r1, r1
 8003834:	4402      	add	r2, r0
 8003836:	4290      	cmp	r0, r2
 8003838:	4603      	mov	r3, r0
 800383a:	d101      	bne.n	8003840 <memchr+0x10>
 800383c:	2300      	movs	r3, #0
 800383e:	e003      	b.n	8003848 <memchr+0x18>
 8003840:	781c      	ldrb	r4, [r3, #0]
 8003842:	3001      	adds	r0, #1
 8003844:	428c      	cmp	r4, r1
 8003846:	d1f6      	bne.n	8003836 <memchr+0x6>
 8003848:	4618      	mov	r0, r3
 800384a:	bd10      	pop	{r4, pc}

0800384c <_read_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	4605      	mov	r5, r0
 8003850:	4608      	mov	r0, r1
 8003852:	4611      	mov	r1, r2
 8003854:	2200      	movs	r2, #0
 8003856:	4c05      	ldr	r4, [pc, #20]	; (800386c <_read_r+0x20>)
 8003858:	6022      	str	r2, [r4, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	f7fd f978 	bl	8000b50 <_read>
 8003860:	1c43      	adds	r3, r0, #1
 8003862:	d102      	bne.n	800386a <_read_r+0x1e>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	b103      	cbz	r3, 800386a <_read_r+0x1e>
 8003868:	602b      	str	r3, [r5, #0]
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	2000031c 	.word	0x2000031c

08003870 <_fstat_r>:
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	2300      	movs	r3, #0
 8003874:	4c06      	ldr	r4, [pc, #24]	; (8003890 <_fstat_r+0x20>)
 8003876:	4605      	mov	r5, r0
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	f7fd f9ab 	bl	8000bd8 <_fstat>
 8003882:	1c43      	adds	r3, r0, #1
 8003884:	d102      	bne.n	800388c <_fstat_r+0x1c>
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	b103      	cbz	r3, 800388c <_fstat_r+0x1c>
 800388a:	602b      	str	r3, [r5, #0]
 800388c:	bd38      	pop	{r3, r4, r5, pc}
 800388e:	bf00      	nop
 8003890:	2000031c 	.word	0x2000031c

08003894 <_isatty_r>:
 8003894:	b538      	push	{r3, r4, r5, lr}
 8003896:	2300      	movs	r3, #0
 8003898:	4c05      	ldr	r4, [pc, #20]	; (80038b0 <_isatty_r+0x1c>)
 800389a:	4605      	mov	r5, r0
 800389c:	4608      	mov	r0, r1
 800389e:	6023      	str	r3, [r4, #0]
 80038a0:	f7fd f9a9 	bl	8000bf6 <_isatty>
 80038a4:	1c43      	adds	r3, r0, #1
 80038a6:	d102      	bne.n	80038ae <_isatty_r+0x1a>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	b103      	cbz	r3, 80038ae <_isatty_r+0x1a>
 80038ac:	602b      	str	r3, [r5, #0]
 80038ae:	bd38      	pop	{r3, r4, r5, pc}
 80038b0:	2000031c 	.word	0x2000031c

080038b4 <_init>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	bf00      	nop
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr

080038c0 <_fini>:
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	bf00      	nop
 80038c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c6:	bc08      	pop	{r3}
 80038c8:	469e      	mov	lr, r3
 80038ca:	4770      	bx	lr
